
STM32F103XX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027dc  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800290c  0800290c  0001290c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002980  08002980  000200c4  2**0
                  CONTENTS
  4 .ARM          00000000  08002980  08002980  000200c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002980  08002980  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002980  08002980  00012980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002984  08002984  00012984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08002988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  200000c4  08002a4c  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08002a4c  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb54  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000197c  00000000  00000000  0002bc41  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001d8c  00000000  00000000  0002d5bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000458  00000000  00000000  0002f350  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000390  00000000  00000000  0002f7a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001ae8  00000000  00000000  0002fb38  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000587f  00000000  00000000  00031620  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000d57b  00000000  00000000  00036e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0004441a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000133c  00000000  00000000  00044498  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000c4 	.word	0x200000c4
 800014c:	00000000 	.word	0x00000000
 8000150:	080028f4 	.word	0x080028f4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000c8 	.word	0x200000c8
 800016c:	080028f4 	.word	0x080028f4

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__aeabi_d2uiz>:
 800091c:	004a      	lsls	r2, r1, #1
 800091e:	d211      	bcs.n	8000944 <__aeabi_d2uiz+0x28>
 8000920:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000924:	d211      	bcs.n	800094a <__aeabi_d2uiz+0x2e>
 8000926:	d50d      	bpl.n	8000944 <__aeabi_d2uiz+0x28>
 8000928:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800092c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000930:	d40e      	bmi.n	8000950 <__aeabi_d2uiz+0x34>
 8000932:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000936:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800093a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800093e:	fa23 f002 	lsr.w	r0, r3, r2
 8000942:	4770      	bx	lr
 8000944:	f04f 0000 	mov.w	r0, #0
 8000948:	4770      	bx	lr
 800094a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800094e:	d102      	bne.n	8000956 <__aeabi_d2uiz+0x3a>
 8000950:	f04f 30ff 	mov.w	r0, #4294967295
 8000954:	4770      	bx	lr
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	4770      	bx	lr

0800095c <lcd_4bit_intialize>:
 * @param lcd
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType lcd_4bit_intialize(const chr_lcd_4bit_t *lcd){
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
    Std_ReturnType ret = E_OK;
 8000964:	2301      	movs	r3, #1
 8000966:	73fb      	strb	r3, [r7, #15]
    uint8 l_data_pins_counter = ZERO_INIT;
 8000968:	2300      	movs	r3, #0
 800096a:	73bb      	strb	r3, [r7, #14]
    if(NULL == lcd){
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d102      	bne.n	8000978 <lcd_4bit_intialize+0x1c>
        ret = E_NOT_OK;
 8000972:	2300      	movs	r3, #0
 8000974:	73fb      	strb	r3, [r7, #15]
 8000976:	e046      	b.n	8000a06 <lcd_4bit_intialize+0xaa>
    }
    else{
         gpio_pin_intialize( &(lcd->lcd_en));
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	3308      	adds	r3, #8
 800097c:	4618      	mov	r0, r3
 800097e:	f000 fb39 	bl	8000ff4 <gpio_pin_intialize>
         gpio_pin_intialize(&(lcd->lcd_rs));
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4618      	mov	r0, r3
 8000986:	f000 fb35 	bl	8000ff4 <gpio_pin_intialize>

        for(l_data_pins_counter=ZERO_INIT; l_data_pins_counter<4; l_data_pins_counter++){
 800098a:	2300      	movs	r3, #0
 800098c:	73bb      	strb	r3, [r7, #14]
 800098e:	e00a      	b.n	80009a6 <lcd_4bit_intialize+0x4a>
             gpio_pin_intialize(&(lcd->lcd_data[l_data_pins_counter]));
 8000990:	7bbb      	ldrb	r3, [r7, #14]
 8000992:	3302      	adds	r3, #2
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	4413      	add	r3, r2
 800099a:	4618      	mov	r0, r3
 800099c:	f000 fb2a 	bl	8000ff4 <gpio_pin_intialize>
        for(l_data_pins_counter=ZERO_INIT; l_data_pins_counter<4; l_data_pins_counter++){
 80009a0:	7bbb      	ldrb	r3, [r7, #14]
 80009a2:	3301      	adds	r3, #1
 80009a4:	73bb      	strb	r3, [r7, #14]
 80009a6:	7bbb      	ldrb	r3, [r7, #14]
 80009a8:	2b03      	cmp	r3, #3
 80009aa:	d9f1      	bls.n	8000990 <lcd_4bit_intialize+0x34>
        }
        delay_ms(20);
 80009ac:	2014      	movs	r0, #20
 80009ae:	f000 fbde 	bl	800116e <delay_ms>
         lcd_4bit_send_command(lcd, _LCD_8BIT_MODE_2_LINE);
 80009b2:	2138      	movs	r1, #56	; 0x38
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f000 f82b 	bl	8000a10 <lcd_4bit_send_command>
        delay_ms(5);
 80009ba:	2005      	movs	r0, #5
 80009bc:	f000 fbd7 	bl	800116e <delay_ms>
         lcd_4bit_send_command(lcd, _LCD_8BIT_MODE_2_LINE);
 80009c0:	2138      	movs	r1, #56	; 0x38
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f000 f824 	bl	8000a10 <lcd_4bit_send_command>
        delay_ms(1);
 80009c8:	2001      	movs	r0, #1
 80009ca:	f000 fbd0 	bl	800116e <delay_ms>
         lcd_4bit_send_command(lcd, _LCD_8BIT_MODE_2_LINE);
 80009ce:	2138      	movs	r1, #56	; 0x38
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f000 f81d 	bl	8000a10 <lcd_4bit_send_command>
         //delay_ms(1);
         lcd_4bit_send_command(lcd, _LCD_CLEAR);
 80009d6:	2101      	movs	r1, #1
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f000 f819 	bl	8000a10 <lcd_4bit_send_command>
         //delay_ms(1);
         lcd_4bit_send_command(lcd, _LCD_RETURN_HOME);
 80009de:	2102      	movs	r1, #2
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f000 f815 	bl	8000a10 <lcd_4bit_send_command>
         //delay_ms(1);
         lcd_4bit_send_command(lcd, _LCD_ENTRY_MODE_INC_SHIFT_OFF);
 80009e6:	2106      	movs	r1, #6
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f000 f811 	bl	8000a10 <lcd_4bit_send_command>
         //delay_ms(1);
         lcd_4bit_send_command(lcd, _LCD_DISPLAY_ON_UNDERLINE_ON_CURSOR_ON);
 80009ee:	210f      	movs	r1, #15
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f000 f80d 	bl	8000a10 <lcd_4bit_send_command>
        // delay_ms(1);
        lcd_4bit_send_command(lcd, _LCD_4BIT_MODE_2_LINE);
 80009f6:	2128      	movs	r1, #40	; 0x28
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f000 f809 	bl	8000a10 <lcd_4bit_send_command>
       // delay_ms(1);
         lcd_4bit_send_command(lcd, 0x80);
 80009fe:	2180      	movs	r1, #128	; 0x80
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f000 f805 	bl	8000a10 <lcd_4bit_send_command>
         //delay_ms(1);
    }
    return ret;
 8000a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3710      	adds	r7, #16
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <lcd_4bit_send_command>:
 * @param command
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType lcd_4bit_send_command(const chr_lcd_4bit_t *lcd, uint8 command){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	460b      	mov	r3, r1
 8000a1a:	70fb      	strb	r3, [r7, #3]
    Std_ReturnType ret = E_OK;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	73fb      	strb	r3, [r7, #15]
    if(NULL == lcd){
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d102      	bne.n	8000a2c <lcd_4bit_send_command+0x1c>
        ret = E_NOT_OK;
 8000a26:	2300      	movs	r3, #0
 8000a28:	73fb      	strb	r3, [r7, #15]
 8000a2a:	e02a      	b.n	8000a82 <lcd_4bit_send_command+0x72>
    }
    else{
        /* R/W Pin connected to the GND -> Logic (0) "Hard Wired" */
        /* Write Logic (0) to the "Register Select" Pin to select the "Instruction Register"  */
    	//delay_ms(1);
    	gpio_pin_write_logic(&(lcd->lcd_rs), GPIO_LOW);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 fb73 	bl	800111c <gpio_pin_write_logic>
        /* Send the Command through the (4-Pins" Data lines */

        ret = lcd_send_4bits(lcd, (command >> 4));
 8000a36:	78fb      	ldrb	r3, [r7, #3]
 8000a38:	091b      	lsrs	r3, r3, #4
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f000 f883 	bl	8000b4a <lcd_send_4bits>
 8000a44:	4603      	mov	r3, r0
 8000a46:	73fb      	strb	r3, [r7, #15]
        /* Send the Enable Signal on the "E" Pin */
        delay_ms(1);
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f000 fb90 	bl	800116e <delay_ms>
        ret = lcd_4bit_send_enable_signal(lcd);
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f000 f8ba 	bl	8000bc8 <lcd_4bit_send_enable_signal>
 8000a54:	4603      	mov	r3, r0
 8000a56:	73fb      	strb	r3, [r7, #15]
        /* Send the Command through the (4-Pins" Data lines */
        delay_ms(2);
 8000a58:	2002      	movs	r0, #2
 8000a5a:	f000 fb88 	bl	800116e <delay_ms>
        ret = lcd_send_4bits(lcd, command );
 8000a5e:	78fb      	ldrb	r3, [r7, #3]
 8000a60:	4619      	mov	r1, r3
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f000 f871 	bl	8000b4a <lcd_send_4bits>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	73fb      	strb	r3, [r7, #15]
        /* Send the Enable Signal on the "E" Pin */
        delay_ms(1);
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f000 fb7e 	bl	800116e <delay_ms>
        ret = lcd_4bit_send_enable_signal(lcd);
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f000 f8a8 	bl	8000bc8 <lcd_4bit_send_enable_signal>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	73fb      	strb	r3, [r7, #15]
        delay_ms(2);
 8000a7c:	2002      	movs	r0, #2
 8000a7e:	f000 fb76 	bl	800116e <delay_ms>



    }
    return ret;
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <lcd_4bit_send_char_data>:
 * @param data The data that we need to send to the LCD
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType lcd_4bit_send_char_data(const chr_lcd_4bit_t *lcd, uint8 data){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	460b      	mov	r3, r1
 8000a96:	70fb      	strb	r3, [r7, #3]
    Std_ReturnType ret = E_OK;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	73fb      	strb	r3, [r7, #15]
    if(NULL == lcd){
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d102      	bne.n	8000aa8 <lcd_4bit_send_char_data+0x1c>
        ret = E_NOT_OK;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	73fb      	strb	r3, [r7, #15]
 8000aa6:	e01e      	b.n	8000ae6 <lcd_4bit_send_char_data+0x5a>
    }
    else{
        /* R/W Pin connected to the GND -> Logic (0) "Hard Wired" */
        /* Write Logic (1) to the "Register Select" Pin to select the "Data Register"  */
         gpio_pin_write_logic(&(lcd->lcd_rs), GPIO_HIGH);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2101      	movs	r1, #1
 8000aac:	4618      	mov	r0, r3
 8000aae:	f000 fb35 	bl	800111c <gpio_pin_write_logic>
        /* Send the Data through the (4-Pins" Data lines */
        ret = lcd_send_4bits(lcd, data >> 4);
 8000ab2:	78fb      	ldrb	r3, [r7, #3]
 8000ab4:	091b      	lsrs	r3, r3, #4
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	4619      	mov	r1, r3
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f000 f845 	bl	8000b4a <lcd_send_4bits>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	73fb      	strb	r3, [r7, #15]

        /* Send the Enable Signal on the "E" Pin */
        ret = lcd_4bit_send_enable_signal(lcd);
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f000 f87f 	bl	8000bc8 <lcd_4bit_send_enable_signal>
 8000aca:	4603      	mov	r3, r0
 8000acc:	73fb      	strb	r3, [r7, #15]

        /* Send the Data through the (4-Pins" Data lines */
        ret = lcd_send_4bits(lcd, data);
 8000ace:	78fb      	ldrb	r3, [r7, #3]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f000 f839 	bl	8000b4a <lcd_send_4bits>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	73fb      	strb	r3, [r7, #15]

        /* Send the Enable Signal on the "E" Pin */
        ret = lcd_4bit_send_enable_signal(lcd);
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f000 f873 	bl	8000bc8 <lcd_4bit_send_enable_signal>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	73fb      	strb	r3, [r7, #15]

    }
    return ret;
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <lcd_4bit_send_string_pos>:
 * @param str
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType lcd_4bit_send_string_pos(const chr_lcd_4bit_t *lcd, uint8 row, uint8 column, uint8 *str){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	460b      	mov	r3, r1
 8000afc:	72fb      	strb	r3, [r7, #11]
 8000afe:	4613      	mov	r3, r2
 8000b00:	72bb      	strb	r3, [r7, #10]
    Std_ReturnType ret = E_OK;
 8000b02:	2301      	movs	r3, #1
 8000b04:	75fb      	strb	r3, [r7, #23]
    if(NULL == lcd){
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d102      	bne.n	8000b12 <lcd_4bit_send_string_pos+0x22>
        ret = E_NOT_OK;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	75fb      	strb	r3, [r7, #23]
 8000b10:	e016      	b.n	8000b40 <lcd_4bit_send_string_pos+0x50>
    }
    else{
        ret = lcd_4bit_set_cursor(lcd, row, column);
 8000b12:	7aba      	ldrb	r2, [r7, #10]
 8000b14:	7afb      	ldrb	r3, [r7, #11]
 8000b16:	4619      	mov	r1, r3
 8000b18:	68f8      	ldr	r0, [r7, #12]
 8000b1a:	f000 f86f 	bl	8000bfc <lcd_4bit_set_cursor>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	75fb      	strb	r3, [r7, #23]
        while(*str){
 8000b22:	e009      	b.n	8000b38 <lcd_4bit_send_string_pos+0x48>
            ret = lcd_4bit_send_char_data(lcd, *str++);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	1c5a      	adds	r2, r3, #1
 8000b28:	607a      	str	r2, [r7, #4]
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	68f8      	ldr	r0, [r7, #12]
 8000b30:	f7ff ffac 	bl	8000a8c <lcd_4bit_send_char_data>
 8000b34:	4603      	mov	r3, r0
 8000b36:	75fb      	strb	r3, [r7, #23]
        while(*str){
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d1f1      	bne.n	8000b24 <lcd_4bit_send_string_pos+0x34>
        }
    }
    return ret;
 8000b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3718      	adds	r7, #24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <lcd_send_4bits>:
 * @param _data_command
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
static Std_ReturnType lcd_send_4bits(const chr_lcd_4bit_t *lcd, uint8 _data_command){
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b084      	sub	sp, #16
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
 8000b52:	460b      	mov	r3, r1
 8000b54:	70fb      	strb	r3, [r7, #3]
    Std_ReturnType ret = E_OK;
 8000b56:	2301      	movs	r3, #1
 8000b58:	73fb      	strb	r3, [r7, #15]
     gpio_pin_write_logic(&(lcd->lcd_data[0]), (_data_command >> 0) & (uint8)0x01);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	f103 0210 	add.w	r2, r3, #16
 8000b60:	78fb      	ldrb	r3, [r7, #3]
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4610      	mov	r0, r2
 8000b6c:	f000 fad6 	bl	800111c <gpio_pin_write_logic>
     gpio_pin_write_logic(&(lcd->lcd_data[1]), (_data_command >> 1) & (uint8)0x01);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f103 0218 	add.w	r2, r3, #24
 8000b76:	78fb      	ldrb	r3, [r7, #3]
 8000b78:	085b      	lsrs	r3, r3, #1
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	4619      	mov	r1, r3
 8000b84:	4610      	mov	r0, r2
 8000b86:	f000 fac9 	bl	800111c <gpio_pin_write_logic>
     gpio_pin_write_logic(&(lcd->lcd_data[2]), (_data_command >> 2) & (uint8)0x01);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	f103 0220 	add.w	r2, r3, #32
 8000b90:	78fb      	ldrb	r3, [r7, #3]
 8000b92:	089b      	lsrs	r3, r3, #2
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4610      	mov	r0, r2
 8000ba0:	f000 fabc 	bl	800111c <gpio_pin_write_logic>
     gpio_pin_write_logic(&(lcd->lcd_data[3]), (_data_command >> 3) & (uint8)0x01);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8000baa:	78fb      	ldrb	r3, [r7, #3]
 8000bac:	08db      	lsrs	r3, r3, #3
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	f003 0301 	and.w	r3, r3, #1
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4610      	mov	r0, r2
 8000bba:	f000 faaf 	bl	800111c <gpio_pin_write_logic>
     //delay_ms(1);
    return ret;
 8000bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <lcd_4bit_send_enable_signal>:
 * @param lcd
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
static Std_ReturnType lcd_4bit_send_enable_signal(const chr_lcd_4bit_t *lcd){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
    Std_ReturnType ret = E_OK;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	73fb      	strb	r3, [r7, #15]
    gpio_pin_write_logic(&(lcd->lcd_en), GPIO_HIGH);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3308      	adds	r3, #8
 8000bd8:	2101      	movs	r1, #1
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 fa9e 	bl	800111c <gpio_pin_write_logic>
    delay_ms(1);
 8000be0:	2001      	movs	r0, #1
 8000be2:	f000 fac4 	bl	800116e <delay_ms>
     gpio_pin_write_logic(&(lcd->lcd_en), GPIO_LOW);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	3308      	adds	r3, #8
 8000bea:	2100      	movs	r1, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 fa95 	bl	800111c <gpio_pin_write_logic>


    return ret;
 8000bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <lcd_4bit_set_cursor>:
 * @param coulmn
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
static Std_ReturnType lcd_4bit_set_cursor(const chr_lcd_4bit_t *lcd, uint8 row, uint8 coulmn){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	460b      	mov	r3, r1
 8000c06:	70fb      	strb	r3, [r7, #3]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	70bb      	strb	r3, [r7, #2]
    Std_ReturnType ret = E_OK;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	73fb      	strb	r3, [r7, #15]
    coulmn--;
 8000c10:	78bb      	ldrb	r3, [r7, #2]
 8000c12:	3b01      	subs	r3, #1
 8000c14:	70bb      	strb	r3, [r7, #2]
    switch(row){
 8000c16:	78fb      	ldrb	r3, [r7, #3]
 8000c18:	3b01      	subs	r3, #1
 8000c1a:	2b03      	cmp	r3, #3
 8000c1c:	d832      	bhi.n	8000c84 <lcd_4bit_set_cursor+0x88>
 8000c1e:	a201      	add	r2, pc, #4	; (adr r2, 8000c24 <lcd_4bit_set_cursor+0x28>)
 8000c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c24:	08000c35 	.word	0x08000c35
 8000c28:	08000c49 	.word	0x08000c49
 8000c2c:	08000c5d 	.word	0x08000c5d
 8000c30:	08000c71 	.word	0x08000c71
        case ROW1 : ret = lcd_4bit_send_command(lcd, (0x80 + coulmn)); break;
 8000c34:	78bb      	ldrb	r3, [r7, #2]
 8000c36:	3b80      	subs	r3, #128	; 0x80
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff fee7 	bl	8000a10 <lcd_4bit_send_command>
 8000c42:	4603      	mov	r3, r0
 8000c44:	73fb      	strb	r3, [r7, #15]
 8000c46:	e01d      	b.n	8000c84 <lcd_4bit_set_cursor+0x88>
        case ROW2 : ret = lcd_4bit_send_command(lcd, (0xc0 + coulmn)); break;
 8000c48:	78bb      	ldrb	r3, [r7, #2]
 8000c4a:	3b40      	subs	r3, #64	; 0x40
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	4619      	mov	r1, r3
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff fedd 	bl	8000a10 <lcd_4bit_send_command>
 8000c56:	4603      	mov	r3, r0
 8000c58:	73fb      	strb	r3, [r7, #15]
 8000c5a:	e013      	b.n	8000c84 <lcd_4bit_set_cursor+0x88>
        case ROW3 : ret = lcd_4bit_send_command(lcd, (0x94 + coulmn)); break;
 8000c5c:	78bb      	ldrb	r3, [r7, #2]
 8000c5e:	3b6c      	subs	r3, #108	; 0x6c
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	4619      	mov	r1, r3
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f7ff fed3 	bl	8000a10 <lcd_4bit_send_command>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	73fb      	strb	r3, [r7, #15]
 8000c6e:	e009      	b.n	8000c84 <lcd_4bit_set_cursor+0x88>
        case ROW4 : ret = lcd_4bit_send_command(lcd, (0xd4 + coulmn)); break;
 8000c70:	78bb      	ldrb	r3, [r7, #2]
 8000c72:	3b2c      	subs	r3, #44	; 0x2c
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	4619      	mov	r1, r3
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff fec9 	bl	8000a10 <lcd_4bit_send_command>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	73fb      	strb	r3, [r7, #15]
 8000c82:	bf00      	nop
        default : ;
    }
    return ret;
 8000c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop

08000c90 <MCAL_ADC_INIT>:

#include "ADC.h"



void MCAL_ADC_INIT(ADC_typeDef* ADCx){
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	if(ADCx==ADC1){
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4a19      	ldr	r2, [pc, #100]	; (8000d00 <MCAL_ADC_INIT+0x70>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d106      	bne.n	8000cae <MCAL_ADC_INIT+0x1e>
		RCC_ADC1_Enable();
 8000ca0:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <MCAL_ADC_INIT+0x74>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	4a17      	ldr	r2, [pc, #92]	; (8000d04 <MCAL_ADC_INIT+0x74>)
 8000ca6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000caa:	6193      	str	r3, [r2, #24]
 8000cac:	e009      	b.n	8000cc2 <MCAL_ADC_INIT+0x32>
	}
	else if(ADCx==ADC2){
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a15      	ldr	r2, [pc, #84]	; (8000d08 <MCAL_ADC_INIT+0x78>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d105      	bne.n	8000cc2 <MCAL_ADC_INIT+0x32>
		RCC_ADC1_Enable();
 8000cb6:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <MCAL_ADC_INIT+0x74>)
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	4a12      	ldr	r2, [pc, #72]	; (8000d04 <MCAL_ADC_INIT+0x74>)
 8000cbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cc0:	6193      	str	r3, [r2, #24]
	//		then it wakes up the ADC from Power Down state.
	//		Conversion starts when this bit holds a value of 1 and a 1 is written to it. The application
	//		should allow a delay of tSTAB between power up and start of conversion. Refer to Figure 23.
	//		0: Disable ADC conversion/calibration and go to power down mode.
	//		1: Enable ADC and to start conversion
	ADCx->CR2 |=(1<<0);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	f043 0201 	orr.w	r2, r3, #1
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
	//		Bit 1 CONT: Continuous conversion
	//		This bit is set and cleared by software. If set conversion takes place continuously till this bit is
	//		reset.
	//		0: Single conversion mode
	//		1: Continuous conversion mode
	ADCx->CR2 &=~(1<<1);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	f023 0202 	bic.w	r2, r3, #2
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
	//		Bit 2 CAL: A/D Calibration
	//		This bit is set by software to start the calibration. It is reset by hardware after calibration is
	//		complete.
	//		0: Calibration completed
	//		1: Enable calibratio
	ADCx->CR2 |=(1<<2);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	f043 0204 	orr.w	r2, r3, #4
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
	while(((ADCx->CR2>>2)&1)){};
 8000ce6:	bf00      	nop
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	089b      	lsrs	r3, r3, #2
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d1f8      	bne.n	8000ce8 <MCAL_ADC_INIT+0x58>
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr
 8000d00:	40012400 	.word	0x40012400
 8000d04:	40021000 	.word	0x40021000
 8000d08:	40012800 	.word	0x40012800

08000d0c <MCAL_ADC_READ>:

uint16_t MCAL_ADC_READ(ADC_typeDef* ADCx,uint8_t ADC_pin){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b088      	sub	sp, #32
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	460b      	mov	r3, r1
 8000d16:	70fb      	strb	r3, [r7, #3]
	GPIO_PinConfig_t ADC_Pin;
	if(ADC_pin<0b0111){
 8000d18:	78fb      	ldrb	r3, [r7, #3]
 8000d1a:	2b06      	cmp	r3, #6
 8000d1c:	d808      	bhi.n	8000d30 <MCAL_ADC_READ+0x24>
		GPIO_PinConfig_t ADC_Pin={
 8000d1e:	4b21      	ldr	r3, [pc, #132]	; (8000da4 <MCAL_ADC_READ+0x98>)
 8000d20:	613b      	str	r3, [r7, #16]
 8000d22:	78fb      	ldrb	r3, [r7, #3]
 8000d24:	753b      	strb	r3, [r7, #20]
 8000d26:	2300      	movs	r3, #0
 8000d28:	757b      	strb	r3, [r7, #21]
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	75bb      	strb	r3, [r7, #22]
 8000d2e:	e007      	b.n	8000d40 <MCAL_ADC_READ+0x34>
				.GPIO_Output_Speed =GPIO_SPEED_10M,
				.GPIO_Port= GPIOA,
				.GPIO_PinNumber=ADC_pin};
	}
	else{
		GPIO_PinConfig_t ADC_Pin={
 8000d30:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <MCAL_ADC_READ+0x9c>)
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	78fb      	ldrb	r3, [r7, #3]
 8000d36:	733b      	strb	r3, [r7, #12]
 8000d38:	2300      	movs	r3, #0
 8000d3a:	737b      	strb	r3, [r7, #13]
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	73bb      	strb	r3, [r7, #14]
				.GPIO_Output_Speed =GPIO_SPEED_10M,
				.GPIO_Port= GPIOB,
				.GPIO_PinNumber=ADC_pin };
	}

	gpio_pin_intialize(&ADC_Pin);
 8000d40:	f107 0318 	add.w	r3, r7, #24
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 f955 	bl	8000ff4 <gpio_pin_intialize>

	ADCx->CR2=0;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
	ADCx->SQR3 =0;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2200      	movs	r2, #0
 8000d54:	635a      	str	r2, [r3, #52]	; 0x34

	//Bits 4:0 SQ1[4:0]: first conversion in regular sequence
	ADCx->SQR3 |=(ADC_pin << 0);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d5a:	78fb      	ldrb	r3, [r7, #3]
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	635a      	str	r2, [r3, #52]	; 0x34
	//		then it wakes up the ADC from Power Down state.
	//		Conversion starts when this bit holds a value of 1 and a 1 is written to it. The application
	//		should allow a delay of tSTAB between power up and start of conversion. Refer to Figure 23.
	//		0: Disable ADC conversion/calibration and go to power down mode.
	//		1: Enable ADC and to start conversion
	ADCx->CR2 |=(1<<0);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	f043 0201 	orr.w	r2, r3, #1
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
	ADCx->CR2 |=(1<<0);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	f043 0201 	orr.w	r2, r3, #1
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	609a      	str	r2, [r3, #8]
	//		This bit is set by software to start conversion and cleared by hardware as soon as
	//		conversion starts. It starts a conversion of a group of regular channels if SWSTART is
	//		selected as trigger event by the EXTSEL[2:0] bits.
	//		0: Reset state
	//		1: Starts conversion of regular channels
	ADCx->CR2 |=(1<<22);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	609a      	str	r2, [r3, #8]
	//		Bit 1 EOC: End of conversion
	//		This bit is set by hardware at the end of a group channel conversion (regular or injected). It is
	//		cleared by software or by reading the ADC_DR.
	//		0: Conversion is not complete
	//		1: Conversion complete
	while(! ((ADCx->SR>>1)&1) ){};
 8000d86:	bf00      	nop
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	085b      	lsrs	r3, r3, #1
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d0f8      	beq.n	8000d88 <MCAL_ADC_READ+0x7c>

	return((uint16_t)ADCx->DR);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9a:	b29b      	uxth	r3, r3

}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3720      	adds	r7, #32
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40010800 	.word	0x40010800
 8000da8:	40010c00 	.word	0x40010c00

08000dac <EXTI0_IRQHandler>:
///**===========			ISR  Functions        =========================
///**================================================================
// */

void EXTI0_IRQHandler (void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	//cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= 1<<0 ;
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <EXTI0_IRQHandler+0x1c>)
 8000db2:	695b      	ldr	r3, [r3, #20]
 8000db4:	4a04      	ldr	r2, [pc, #16]	; (8000dc8 <EXTI0_IRQHandler+0x1c>)
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[0]() ;
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <EXTI0_IRQHandler+0x20>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4798      	blx	r3
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40010400 	.word	0x40010400
 8000dcc:	20000150 	.word	0x20000150

08000dd0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<1) ;
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <EXTI1_IRQHandler+0x1c>)
 8000dd6:	695b      	ldr	r3, [r3, #20]
 8000dd8:	4a04      	ldr	r2, [pc, #16]	; (8000dec <EXTI1_IRQHandler+0x1c>)
 8000dda:	f043 0302 	orr.w	r3, r3, #2
 8000dde:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[1]() ; }
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <EXTI1_IRQHandler+0x20>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	4798      	blx	r3
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40010400 	.word	0x40010400
 8000df0:	20000150 	.word	0x20000150

08000df4 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler (void) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<2) ;
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <EXTI2_IRQHandler+0x1c>)
 8000dfa:	695b      	ldr	r3, [r3, #20]
 8000dfc:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <EXTI2_IRQHandler+0x1c>)
 8000dfe:	f043 0304 	orr.w	r3, r3, #4
 8000e02:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[2]() ; }
 8000e04:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <EXTI2_IRQHandler+0x20>)
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	4798      	blx	r3
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40010400 	.word	0x40010400
 8000e14:	20000150 	.word	0x20000150

08000e18 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler (void) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<3) ;
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <EXTI3_IRQHandler+0x1c>)
 8000e1e:	695b      	ldr	r3, [r3, #20]
 8000e20:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <EXTI3_IRQHandler+0x1c>)
 8000e22:	f043 0308 	orr.w	r3, r3, #8
 8000e26:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[3]() ; }
 8000e28:	4b03      	ldr	r3, [pc, #12]	; (8000e38 <EXTI3_IRQHandler+0x20>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	4798      	blx	r3
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40010400 	.word	0x40010400
 8000e38:	20000150 	.word	0x20000150

08000e3c <EXTI4_IRQHandler>:


void EXTI4_IRQHandler (void) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<4) ;
 8000e40:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <EXTI4_IRQHandler+0x1c>)
 8000e42:	695b      	ldr	r3, [r3, #20]
 8000e44:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <EXTI4_IRQHandler+0x1c>)
 8000e46:	f043 0310 	orr.w	r3, r3, #16
 8000e4a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]() ; }
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <EXTI4_IRQHandler+0x20>)
 8000e4e:	691b      	ldr	r3, [r3, #16]
 8000e50:	4798      	blx	r3
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40010400 	.word	0x40010400
 8000e5c:	20000150 	.word	0x20000150

08000e60 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler (void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5 ) {	EXTI->PR |=  (1<<5)    ; GP_IRQ_CallBack[5]() ;   }
 8000e64:	4b26      	ldr	r3, [pc, #152]	; (8000f00 <EXTI9_5_IRQHandler+0xa0>)
 8000e66:	695b      	ldr	r3, [r3, #20]
 8000e68:	f003 0320 	and.w	r3, r3, #32
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d008      	beq.n	8000e82 <EXTI9_5_IRQHandler+0x22>
 8000e70:	4b23      	ldr	r3, [pc, #140]	; (8000f00 <EXTI9_5_IRQHandler+0xa0>)
 8000e72:	695b      	ldr	r3, [r3, #20]
 8000e74:	4a22      	ldr	r2, [pc, #136]	; (8000f00 <EXTI9_5_IRQHandler+0xa0>)
 8000e76:	f043 0320 	orr.w	r3, r3, #32
 8000e7a:	6153      	str	r3, [r2, #20]
 8000e7c:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <EXTI9_5_IRQHandler+0xa4>)
 8000e7e:	695b      	ldr	r3, [r3, #20]
 8000e80:	4798      	blx	r3
	if (EXTI->PR & 1<<6 ) {	EXTI->PR |=  (1<<6)    ; GP_IRQ_CallBack[6]() ;   }
 8000e82:	4b1f      	ldr	r3, [pc, #124]	; (8000f00 <EXTI9_5_IRQHandler+0xa0>)
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d008      	beq.n	8000ea0 <EXTI9_5_IRQHandler+0x40>
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <EXTI9_5_IRQHandler+0xa0>)
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	4a1b      	ldr	r2, [pc, #108]	; (8000f00 <EXTI9_5_IRQHandler+0xa0>)
 8000e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e98:	6153      	str	r3, [r2, #20]
 8000e9a:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <EXTI9_5_IRQHandler+0xa4>)
 8000e9c:	699b      	ldr	r3, [r3, #24]
 8000e9e:	4798      	blx	r3
	if (EXTI->PR & 1<<7 ) {	EXTI->PR |=  (1<<7)    ; GP_IRQ_CallBack[7]() ;   }
 8000ea0:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <EXTI9_5_IRQHandler+0xa0>)
 8000ea2:	695b      	ldr	r3, [r3, #20]
 8000ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d008      	beq.n	8000ebe <EXTI9_5_IRQHandler+0x5e>
 8000eac:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <EXTI9_5_IRQHandler+0xa0>)
 8000eae:	695b      	ldr	r3, [r3, #20]
 8000eb0:	4a13      	ldr	r2, [pc, #76]	; (8000f00 <EXTI9_5_IRQHandler+0xa0>)
 8000eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb6:	6153      	str	r3, [r2, #20]
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <EXTI9_5_IRQHandler+0xa4>)
 8000eba:	69db      	ldr	r3, [r3, #28]
 8000ebc:	4798      	blx	r3
	if (EXTI->PR & 1<<8 ) {	EXTI->PR |=  (1<<8)    ; GP_IRQ_CallBack[8]() ;   }
 8000ebe:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <EXTI9_5_IRQHandler+0xa0>)
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d008      	beq.n	8000edc <EXTI9_5_IRQHandler+0x7c>
 8000eca:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <EXTI9_5_IRQHandler+0xa0>)
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	4a0c      	ldr	r2, [pc, #48]	; (8000f00 <EXTI9_5_IRQHandler+0xa0>)
 8000ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed4:	6153      	str	r3, [r2, #20]
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <EXTI9_5_IRQHandler+0xa4>)
 8000ed8:	6a1b      	ldr	r3, [r3, #32]
 8000eda:	4798      	blx	r3
	if (EXTI->PR & 1<<9 ) {	EXTI->PR |=  (1<<9)    ; GP_IRQ_CallBack[9]() ;   }
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <EXTI9_5_IRQHandler+0xa0>)
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d008      	beq.n	8000efa <EXTI9_5_IRQHandler+0x9a>
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <EXTI9_5_IRQHandler+0xa0>)
 8000eea:	695b      	ldr	r3, [r3, #20]
 8000eec:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <EXTI9_5_IRQHandler+0xa0>)
 8000eee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ef2:	6153      	str	r3, [r2, #20]
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <EXTI9_5_IRQHandler+0xa4>)
 8000ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef8:	4798      	blx	r3

}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40010400 	.word	0x40010400
 8000f04:	20000150 	.word	0x20000150

08000f08 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<10 ) {	EXTI->PR |=  (1<<10)    ; GP_IRQ_CallBack[10]() ;   }
 8000f0c:	4b2d      	ldr	r3, [pc, #180]	; (8000fc4 <EXTI15_10_IRQHandler+0xbc>)
 8000f0e:	695b      	ldr	r3, [r3, #20]
 8000f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d008      	beq.n	8000f2a <EXTI15_10_IRQHandler+0x22>
 8000f18:	4b2a      	ldr	r3, [pc, #168]	; (8000fc4 <EXTI15_10_IRQHandler+0xbc>)
 8000f1a:	695b      	ldr	r3, [r3, #20]
 8000f1c:	4a29      	ldr	r2, [pc, #164]	; (8000fc4 <EXTI15_10_IRQHandler+0xbc>)
 8000f1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f22:	6153      	str	r3, [r2, #20]
 8000f24:	4b28      	ldr	r3, [pc, #160]	; (8000fc8 <EXTI15_10_IRQHandler+0xc0>)
 8000f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f28:	4798      	blx	r3
	if (EXTI->PR & 1<<11 ) {	EXTI->PR |=  (1<<11)    ; GP_IRQ_CallBack[11]() ;   }
 8000f2a:	4b26      	ldr	r3, [pc, #152]	; (8000fc4 <EXTI15_10_IRQHandler+0xbc>)
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d008      	beq.n	8000f48 <EXTI15_10_IRQHandler+0x40>
 8000f36:	4b23      	ldr	r3, [pc, #140]	; (8000fc4 <EXTI15_10_IRQHandler+0xbc>)
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	4a22      	ldr	r2, [pc, #136]	; (8000fc4 <EXTI15_10_IRQHandler+0xbc>)
 8000f3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f40:	6153      	str	r3, [r2, #20]
 8000f42:	4b21      	ldr	r3, [pc, #132]	; (8000fc8 <EXTI15_10_IRQHandler+0xc0>)
 8000f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f46:	4798      	blx	r3
	if (EXTI->PR & 1<<12 ) {	EXTI->PR |=  (1<<12)    ; GP_IRQ_CallBack[12]() ;   }
 8000f48:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <EXTI15_10_IRQHandler+0xbc>)
 8000f4a:	695b      	ldr	r3, [r3, #20]
 8000f4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d008      	beq.n	8000f66 <EXTI15_10_IRQHandler+0x5e>
 8000f54:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <EXTI15_10_IRQHandler+0xbc>)
 8000f56:	695b      	ldr	r3, [r3, #20]
 8000f58:	4a1a      	ldr	r2, [pc, #104]	; (8000fc4 <EXTI15_10_IRQHandler+0xbc>)
 8000f5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f5e:	6153      	str	r3, [r2, #20]
 8000f60:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <EXTI15_10_IRQHandler+0xc0>)
 8000f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f64:	4798      	blx	r3
	if (EXTI->PR & 1<<13 ) {	EXTI->PR |=  (1<<13)    ; GP_IRQ_CallBack[13]() ;   }
 8000f66:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <EXTI15_10_IRQHandler+0xbc>)
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d008      	beq.n	8000f84 <EXTI15_10_IRQHandler+0x7c>
 8000f72:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <EXTI15_10_IRQHandler+0xbc>)
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	4a13      	ldr	r2, [pc, #76]	; (8000fc4 <EXTI15_10_IRQHandler+0xbc>)
 8000f78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f7c:	6153      	str	r3, [r2, #20]
 8000f7e:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <EXTI15_10_IRQHandler+0xc0>)
 8000f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f82:	4798      	blx	r3
	if (EXTI->PR & 1<<14 ) {	EXTI->PR |=  (1<<14)    ; GP_IRQ_CallBack[14]() ;   }
 8000f84:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <EXTI15_10_IRQHandler+0xbc>)
 8000f86:	695b      	ldr	r3, [r3, #20]
 8000f88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d008      	beq.n	8000fa2 <EXTI15_10_IRQHandler+0x9a>
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <EXTI15_10_IRQHandler+0xbc>)
 8000f92:	695b      	ldr	r3, [r3, #20]
 8000f94:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <EXTI15_10_IRQHandler+0xbc>)
 8000f96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f9a:	6153      	str	r3, [r2, #20]
 8000f9c:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <EXTI15_10_IRQHandler+0xc0>)
 8000f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fa0:	4798      	blx	r3
	if (EXTI->PR & 1<<15 ) {	EXTI->PR |=  (1<<15)    ; GP_IRQ_CallBack[15]() ;   }
 8000fa2:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <EXTI15_10_IRQHandler+0xbc>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d008      	beq.n	8000fc0 <EXTI15_10_IRQHandler+0xb8>
 8000fae:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <EXTI15_10_IRQHandler+0xbc>)
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <EXTI15_10_IRQHandler+0xbc>)
 8000fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fb8:	6153      	str	r3, [r2, #20]
 8000fba:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <EXTI15_10_IRQHandler+0xc0>)
 8000fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fbe:	4798      	blx	r3

}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40010400 	.word	0x40010400
 8000fc8:	20000150 	.word	0x20000150

08000fcc <Get_CRL_Position>:
 * =======================================================================================
 * 							Generic Functions
 * =======================================================================================
 */
uint8_t Get_CRL_Position(GPIO_Pin_Num PinNumber)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
	if (PinNumber > 7) PinNumber -=8 ;
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	2b07      	cmp	r3, #7
 8000fda:	d902      	bls.n	8000fe2 <Get_CRL_Position+0x16>
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	3b08      	subs	r3, #8
 8000fe0:	71fb      	strb	r3, [r7, #7]

	return (PinNumber * 4);
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	b2db      	uxtb	r3, r3

}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr
	...

08000ff4 <gpio_pin_intialize>:
 * @retval 			-none
 * Note				-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 					 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void gpio_pin_intialize(GPIO_PinConfig_t* PinConfig)
{
 8000ff4:	b590      	push	{r4, r7, lr}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]


	volatile uint32_t* configregister = NULL ;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
	volatile uint32_t conf =0;
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]

	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &(PinConfig->GPIO_Port->CRL)  : &(PinConfig->GPIO_Port->CRH);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	791b      	ldrb	r3, [r3, #4]
 8001008:	2b07      	cmp	r3, #7
 800100a:	d802      	bhi.n	8001012 <gpio_pin_intialize+0x1e>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	e002      	b.n	8001018 <gpio_pin_intialize+0x24>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	3304      	adds	r3, #4
 8001018:	60fb      	str	r3, [r7, #12]

	//CNF0[1:0] MODE0[1:0=]   Clear the four Bits
	(*configregister) &= ~(0xf << Get_CRL_Position(PinConfig->GPIO_PinNumber) );
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	791b      	ldrb	r3, [r3, #4]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff ffd4 	bl	8000fcc <Get_CRL_Position>
 8001024:	4603      	mov	r3, r0
 8001026:	461a      	mov	r2, r3
 8001028:	230f      	movs	r3, #15
 800102a:	4093      	lsls	r3, r2
 800102c:	43da      	mvns	r2, r3
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	401a      	ands	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	601a      	str	r2, [r3, #0]

	switch (PinConfig->GPIO_MODE) {
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	795b      	ldrb	r3, [r3, #5]
 800103c:	2b08      	cmp	r3, #8
 800103e:	d85a      	bhi.n	80010f6 <gpio_pin_intialize+0x102>
 8001040:	a201      	add	r2, pc, #4	; (adr r2, 8001048 <gpio_pin_intialize+0x54>)
 8001042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001046:	bf00      	nop
 8001048:	0800106d 	.word	0x0800106d
 800104c:	08001073 	.word	0x08001073
 8001050:	08001079 	.word	0x08001079
 8001054:	08001093 	.word	0x08001093
 8001058:	080010af 	.word	0x080010af
 800105c:	080010bb 	.word	0x080010bb
 8001060:	080010cd 	.word	0x080010cd
 8001064:	080010df 	.word	0x080010df
 8001068:	080010f1 	.word	0x080010f1
	case GPIO_ANALOG_MODE:
		conf = 0b0000 &0x0F;
 800106c:	2300      	movs	r3, #0
 800106e:	60bb      	str	r3, [r7, #8]
		break;
 8001070:	e042      	b.n	80010f8 <gpio_pin_intialize+0x104>
	case GPIO_FLOATING_INPUT_MODE:
		conf = 0b0100 &0x0F;
 8001072:	2304      	movs	r3, #4
 8001074:	60bb      	str	r3, [r7, #8]
		break;
 8001076:	e03f      	b.n	80010f8 <gpio_pin_intialize+0x104>
	case GPIO_INPUT_PULLUP_MODE:
		conf = 0b1000 &0x0F;
 8001078:	2308      	movs	r3, #8
 800107a:	60bb      	str	r3, [r7, #8]
		PinConfig->GPIO_Port->ODR |=PinConfig->GPIO_PinNumber ;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	68da      	ldr	r2, [r3, #12]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	791b      	ldrb	r3, [r3, #4]
 8001086:	4619      	mov	r1, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	430a      	orrs	r2, r1
 800108e:	60da      	str	r2, [r3, #12]
		break;
 8001090:	e032      	b.n	80010f8 <gpio_pin_intialize+0x104>
	case GPIO_INPUT_PULLDOWN_MODE:
		conf = 0b1000 &0x0F;
 8001092:	2308      	movs	r3, #8
 8001094:	60bb      	str	r3, [r7, #8]
		PinConfig->GPIO_Port->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	68da      	ldr	r2, [r3, #12]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	791b      	ldrb	r3, [r3, #4]
 80010a0:	43db      	mvns	r3, r3
 80010a2:	4619      	mov	r1, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	400a      	ands	r2, r1
 80010aa:	60da      	str	r2, [r3, #12]
		break;
 80010ac:	e024      	b.n	80010f8 <gpio_pin_intialize+0x104>
	case GPIO_OUTPUT_PUSHPULL_MODE:
		conf = (((0b00<<2)| (PinConfig->GPIO_Output_Speed ))&0x0F);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	799b      	ldrb	r3, [r3, #6]
 80010b2:	f003 030f 	and.w	r3, r3, #15
 80010b6:	60bb      	str	r3, [r7, #8]
		break;
 80010b8:	e01e      	b.n	80010f8 <gpio_pin_intialize+0x104>
	case GPIO_OUTPUT_OPENDRAIN_MODE:
		conf = (((0b01<<2)| (PinConfig->GPIO_Output_Speed ))&0x0F);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	799b      	ldrb	r3, [r3, #6]
 80010be:	f043 0304 	orr.w	r3, r3, #4
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	f003 030f 	and.w	r3, r3, #15
 80010c8:	60bb      	str	r3, [r7, #8]
		break;
 80010ca:	e015      	b.n	80010f8 <gpio_pin_intialize+0x104>
	case GPIO_ALT_OUTPUT_PUSHPULL_MODE:
		conf = (((0b10<<2)| (PinConfig->GPIO_Output_Speed ))&0x0F);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	799b      	ldrb	r3, [r3, #6]
 80010d0:	f043 0308 	orr.w	r3, r3, #8
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	f003 030f 	and.w	r3, r3, #15
 80010da:	60bb      	str	r3, [r7, #8]
		break;
 80010dc:	e00c      	b.n	80010f8 <gpio_pin_intialize+0x104>
	case GPIO_ALT_OUTPUT_OPENDRAIN_MODE:
		conf = (((0b11<<2)| (PinConfig->GPIO_Output_Speed ))&0x0F);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	799b      	ldrb	r3, [r3, #6]
 80010e2:	f043 030c 	orr.w	r3, r3, #12
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	f003 030f 	and.w	r3, r3, #15
 80010ec:	60bb      	str	r3, [r7, #8]
		break;
 80010ee:	e003      	b.n	80010f8 <gpio_pin_intialize+0x104>
	case GPIO_ALT_INPUT_MODE:
		conf = (((0b01<<2) | 0x0) & 0x0f);
 80010f0:	2304      	movs	r3, #4
 80010f2:	60bb      	str	r3, [r7, #8]
		break;
 80010f4:	e000      	b.n	80010f8 <gpio_pin_intialize+0x104>
	default:
		break;
 80010f6:	bf00      	nop
	}

	(*configregister) |= (  (  conf  ) << ( Get_CRL_Position( PinConfig->GPIO_PinNumber) ) ) ;
 80010f8:	68bc      	ldr	r4, [r7, #8]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	791b      	ldrb	r3, [r3, #4]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff ff64 	bl	8000fcc <Get_CRL_Position>
 8001104:	4603      	mov	r3, r0
 8001106:	fa04 f203 	lsl.w	r2, r4, r3
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	431a      	orrs	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	601a      	str	r2, [r3, #0]

}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	bd90      	pop	{r4, r7, pc}

0800111c <gpio_pin_write_logic>:
 *@param [in] 			-Value: Pin Value
 *
 * @retval 			-none
 * Note				-none
 */
void gpio_pin_write_logic ( GPIO_PinConfig_t* PinConfig, logic_t logic){
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	70fb      	strb	r3, [r7, #3]

	if(logic == 1)
 8001128:	78fb      	ldrb	r3, [r7, #3]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d10d      	bne.n	800114a <gpio_pin_write_logic+0x2e>
		SET_BIT((PinConfig->GPIO_Port->ODR),(PinConfig->GPIO_PinNumber));
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	68d9      	ldr	r1, [r3, #12]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	791b      	ldrb	r3, [r3, #4]
 8001138:	461a      	mov	r2, r3
 800113a:	2301      	movs	r3, #1
 800113c:	fa03 f202 	lsl.w	r2, r3, r2
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	430a      	orrs	r2, r1
 8001146:	60da      	str	r2, [r3, #12]
	else
		CLEAR_BIT((PinConfig->GPIO_Port->ODR),(PinConfig->GPIO_PinNumber));


}
 8001148:	e00c      	b.n	8001164 <gpio_pin_write_logic+0x48>
		CLEAR_BIT((PinConfig->GPIO_Port->ODR),(PinConfig->GPIO_PinNumber));
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	68d9      	ldr	r1, [r3, #12]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	791b      	ldrb	r3, [r3, #4]
 8001154:	461a      	mov	r2, r3
 8001156:	2301      	movs	r3, #1
 8001158:	4093      	lsls	r3, r2
 800115a:	43da      	mvns	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	400a      	ands	r2, r1
 8001162:	60da      	str	r2, [r3, #12]
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr

0800116e <delay_ms>:
	{
		return ERROR;
	}

}
void delay_ms(uint32_t time) {
 800116e:	b480      	push	{r7}
 8001170:	b085      	sub	sp, #20
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	e00b      	b.n	8001194 <delay_ms+0x26>
		for (j = 0; j < 255; j++)
 800117c:	2300      	movs	r3, #0
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	e002      	b.n	8001188 <delay_ms+0x1a>
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	3301      	adds	r3, #1
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	2bfe      	cmp	r3, #254	; 0xfe
 800118c:	d9f9      	bls.n	8001182 <delay_ms+0x14>
	for (i = 0; i < time; i++)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	3301      	adds	r3, #1
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	429a      	cmp	r2, r3
 800119a:	d3ef      	bcc.n	800117c <delay_ms+0xe>
			;
}
 800119c:	bf00      	nop
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr

080011a6 <I2C1_ER_IRQHandler>:
	return (uint8_t) I2Cx->DR;
}


void I2C1_ER_IRQHandler (void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0

}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr
	...

080011b4 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler (void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
	volatile uint32_t dummy_read = 0 ;
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]
	I2C_TypeDef* I2Cx = I2C1 ;
 80011be:	4b37      	ldr	r3, [pc, #220]	; (800129c <I2C1_EV_IRQHandler+0xe8>)
 80011c0:	617b      	str	r3, [r7, #20]
	//Interrupt handling for both master and slave mode of a device
	uint32_t temp1, temp2, temp3;

	temp1   = I2Cx->CR2 & (  I2C_CR2_ITEVTEN) ;
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011ca:	613b      	str	r3, [r7, #16]
	temp2   = I2Cx->CR2 & ( I2C_CR2_ITBUFEN) ;
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011d4:	60fb      	str	r3, [r7, #12]
	temp3  = I2Cx->SR1 & ( I2C_SR1_STOPF);
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	f003 0310 	and.w	r3, r3, #16
 80011de:	60bb      	str	r3, [r7, #8]


	// Handle For interrupt generated by STOPF event
		// Note : Stop detection flag is applicable only slave mode
		if(temp1 && temp3)
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00a      	beq.n	80011fc <I2C1_EV_IRQHandler+0x48>
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d007      	beq.n	80011fc <I2C1_EV_IRQHandler+0x48>
		{
			//STOF flag is set
			//Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )
			I2Cx->CR1 |= 0x0000;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	601a      	str	r2, [r3, #0]
			Slave_States(I2Cx,I2C_EV_STOP);
 80011f4:	2100      	movs	r1, #0
 80011f6:	6978      	ldr	r0, [r7, #20]
 80011f8:	f000 f852 	bl	80012a0 <Slave_States>


		}
		//----------------------------------------------------------
		temp3  = I2Cx->SR1 & (I2C_SR1_ADDR);
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by ADDR event
		//Note : When master mode : Address is sent
		//		 When Slave mode   : Address matched with own address
		if(temp1 && temp3)
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d012      	beq.n	8001232 <I2C1_EV_IRQHandler+0x7e>
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d00f      	beq.n	8001232 <I2C1_EV_IRQHandler+0x7e>
		{
			// interrupt is generated because of ADDR event
			//check for device mode
			if(I2Cx->SR2 & ( I2C_SR2_MSL))
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	2b00      	cmp	r3, #0
 800121c:	d109      	bne.n	8001232 <I2C1_EV_IRQHandler+0x7e>

			}else
			{
				//slave mode
				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = I2Cx->SR1;
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	607b      	str	r3, [r7, #4]
				dummy_read = I2Cx->SR2;
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	607b      	str	r3, [r7, #4]
				Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 800122a:	2102      	movs	r1, #2
 800122c:	6978      	ldr	r0, [r7, #20]
 800122e:	f000 f837 	bl	80012a0 <Slave_States>

			}
		}
		//----------------------------------------------------------

		temp3  = I2Cx->SR1 & ( I2C_SR1_TXE);
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800123a:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by TXE event
		if(temp1 && temp2 && temp3)
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d00f      	beq.n	8001262 <I2C1_EV_IRQHandler+0xae>
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d00c      	beq.n	8001262 <I2C1_EV_IRQHandler+0xae>
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d009      	beq.n	8001262 <I2C1_EV_IRQHandler+0xae>
		{
			//Check for device mode
			if(I2Cx->SR2 & (I2C_SR2_MSL))
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	2b00      	cmp	r3, #0
 8001258:	d103      	bne.n	8001262 <I2C1_EV_IRQHandler+0xae>
			{

			}else
			{
				//slave
				Slave_States(I2Cx,I2C_EV_DATA_REQ);
 800125a:	2103      	movs	r1, #3
 800125c:	6978      	ldr	r0, [r7, #20]
 800125e:	f000 f81f 	bl	80012a0 <Slave_States>
			}
		}

		//----------------------------------------------------------

		temp3  = I2Cx->SR1 & ( I2C_SR1_RXNE);
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800126a:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by 	SB=1, cleared by reading SR1 register followed by writing DR register with Address.
		if(temp1 && temp2 && temp3)
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d00f      	beq.n	8001292 <I2C1_EV_IRQHandler+0xde>
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d00c      	beq.n	8001292 <I2C1_EV_IRQHandler+0xde>
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d009      	beq.n	8001292 <I2C1_EV_IRQHandler+0xde>
		{
			//check device mode .
			if(I2Cx->SR2 & ( I2C_SR2_MSL))
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	2b00      	cmp	r3, #0
 8001288:	d103      	bne.n	8001292 <I2C1_EV_IRQHandler+0xde>
				//The device is master

			}else
			{
				//slave
				Slave_States(I2Cx,I2C_EV_DATA_RCV);
 800128a:	2104      	movs	r1, #4
 800128c:	6978      	ldr	r0, [r7, #20]
 800128e:	f000 f807 	bl	80012a0 <Slave_States>
			}
		}



}
 8001292:	bf00      	nop
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40005400 	.word	0x40005400

080012a0 <Slave_States>:


void Slave_States (I2C_TypeDef* I2Cx  ,Slave_State state)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	70fb      	strb	r3, [r7, #3]
	uint8_t index =    I2Cx == I2C1 ? I2C1_INDEX: I2C2_INDEX ;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a32      	ldr	r2, [pc, #200]	; (8001378 <Slave_States+0xd8>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	bf14      	ite	ne
 80012b4:	2301      	movne	r3, #1
 80012b6:	2300      	moveq	r3, #0
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	73fb      	strb	r3, [r7, #15]

	switch (state)
 80012bc:	78fb      	ldrb	r3, [r7, #3]
 80012be:	2b04      	cmp	r3, #4
 80012c0:	d856      	bhi.n	8001370 <Slave_States+0xd0>
 80012c2:	a201      	add	r2, pc, #4	; (adr r2, 80012c8 <Slave_States+0x28>)
 80012c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c8:	080012e3 	.word	0x080012e3
 80012cc:	080012dd 	.word	0x080012dd
 80012d0:	08001307 	.word	0x08001307
 80012d4:	0800131f 	.word	0x0800131f
 80012d8:	08001343 	.word	0x08001343
	{

	case I2C_ERROR_AF:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	699b      	ldr	r3, [r3, #24]
		{
			//Slave Shouldn't Send anything else

		}

		break ;
 80012e0:	e046      	b.n	8001370 <Slave_States+0xd0>
	}

	case I2C_EV_STOP:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	f003 0304 	and.w	r3, r3, #4
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d03b      	beq.n	8001366 <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is sent by the master
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_STOP) ;
 80012ee:	7bfa      	ldrb	r2, [r7, #15]
 80012f0:	4922      	ldr	r1, [pc, #136]	; (800137c <Slave_States+0xdc>)
 80012f2:	4613      	mov	r3, r2
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	4413      	add	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	440b      	add	r3, r1
 80012fc:	3320      	adds	r3, #32
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2000      	movs	r0, #0
 8001302:	4798      	blx	r3
		}

		break ;
 8001304:	e02f      	b.n	8001366 <Slave_States+0xc6>
	}

	case I2C_EV_ADDR_Matched:
	{
		//Notify APP that the Stop Condition is sent by the master
		Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_ADDR_Matched) ;
 8001306:	7bfa      	ldrb	r2, [r7, #15]
 8001308:	491c      	ldr	r1, [pc, #112]	; (800137c <Slave_States+0xdc>)
 800130a:	4613      	mov	r3, r2
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	4413      	add	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	440b      	add	r3, r1
 8001314:	3320      	adds	r3, #32
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2002      	movs	r0, #2
 800131a:	4798      	blx	r3

		break ;
 800131c:	e028      	b.n	8001370 <Slave_States+0xd0>
	}

	case I2C_EV_DATA_REQ:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	2b00      	cmp	r3, #0
 8001328:	d01f      	beq.n	800136a <Slave_States+0xca>
		{
			//the APP layer should send the data (MCAL_I2C_SlaveSendData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_REQ) ;
 800132a:	7bfa      	ldrb	r2, [r7, #15]
 800132c:	4913      	ldr	r1, [pc, #76]	; (800137c <Slave_States+0xdc>)
 800132e:	4613      	mov	r3, r2
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	4413      	add	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	440b      	add	r3, r1
 8001338:	3320      	adds	r3, #32
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2003      	movs	r0, #3
 800133e:	4798      	blx	r3
		}

		break ;
 8001340:	e013      	b.n	800136a <Slave_States+0xca>
	}
	case I2C_EV_DATA_RCV:
	{
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & ( I2C_SR2_TRA)))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10f      	bne.n	800136e <Slave_States+0xce>
		{
			//the APP layer should read the data (MCAL_I2C_SlaveReceiveData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_RCV) ;
 800134e:	7bfa      	ldrb	r2, [r7, #15]
 8001350:	490a      	ldr	r1, [pc, #40]	; (800137c <Slave_States+0xdc>)
 8001352:	4613      	mov	r3, r2
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	4413      	add	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	440b      	add	r3, r1
 800135c:	3320      	adds	r3, #32
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2004      	movs	r0, #4
 8001362:	4798      	blx	r3
		}

		break ;
 8001364:	e003      	b.n	800136e <Slave_States+0xce>
		break ;
 8001366:	bf00      	nop
 8001368:	e002      	b.n	8001370 <Slave_States+0xd0>
		break ;
 800136a:	bf00      	nop
 800136c:	e000      	b.n	8001370 <Slave_States+0xd0>
		break ;
 800136e:	bf00      	nop
	}
	}

}
 8001370:	bf00      	nop
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40005400 	.word	0x40005400
 800137c:	200000e0 	.word	0x200000e0

08001380 <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler (void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0

}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr

0800138c <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler (void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0

}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr

08001398 <MCAL_RCC_GetSYS_CLCKFreq>:
 * 							Generic Functions
 * =======================================================================================
 */

uint32_t MCAL_RCC_GetSYS_CLCKFreq(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
//	Set and cleared by hardware to indicate which clock source is used as system clock.
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: Not applicable
	switch  ( (RCC->CFGR  >> 2  ) & 0b11 )
 800139c:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <MCAL_RCC_GetSYS_CLCKFreq+0x30>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	089b      	lsrs	r3, r3, #2
 80013a2:	f003 0303 	and.w	r3, r3, #3
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d006      	beq.n	80013b8 <MCAL_RCC_GetSYS_CLCKFreq+0x20>
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d302      	bcc.n	80013b4 <MCAL_RCC_GetSYS_CLCKFreq+0x1c>
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d004      	beq.n	80013bc <MCAL_RCC_GetSYS_CLCKFreq+0x24>
 80013b2:	e005      	b.n	80013c0 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
	{
	case 0:

		return HSI_RC_Clk ;
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <MCAL_RCC_GetSYS_CLCKFreq+0x34>)
 80013b6:	e003      	b.n	80013c0 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	case 1:

		//todo need to calculate  it //HSE User Should Specify it
		return HSE_Clock ;
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 80013ba:	e001      	b.n	80013c0 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	case 2:

		//todo need to calculate  it PLLCLK and PLLMUL & PLL Source MUX
		return 16000000 ;
 80013bc:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 80013be:	e7ff      	b.n	80013c0 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	}

}
 80013c0:	4618      	mov	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr
 80013c8:	40021000 	.word	0x40021000
 80013cc:	007a1200 	.word	0x007a1200
 80013d0:	00f42400 	.word	0x00f42400

080013d4 <MCAL_RCC_GetHCLKFreq>:


uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_GetSYS_CLCKFreq() >> AHBPrescTable[ ( (RCC->CFGR >> 4 ) & 0xF) ]  ); //the first shift is multiplication}
 80013d8:	f7ff ffde 	bl	8001398 <MCAL_RCC_GetSYS_CLCKFreq>
 80013dc:	4601      	mov	r1, r0
 80013de:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <MCAL_RCC_GetHCLKFreq+0x20>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	091b      	lsrs	r3, r3, #4
 80013e4:	f003 030f 	and.w	r3, r3, #15
 80013e8:	4a03      	ldr	r2, [pc, #12]	; (80013f8 <MCAL_RCC_GetHCLKFreq+0x24>)
 80013ea:	5cd3      	ldrb	r3, [r2, r3]
 80013ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40021000 	.word	0x40021000
 80013f8:	0800293c 	.word	0x0800293c

080013fc <MCAL_RCC_GetPCLK1Freq>:

//APB Low speed clock (PCLK1).
//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 8 ) & 0b111) ]  ); //the first shift is multiplication
 8001400:	f7ff ffe8 	bl	80013d4 <MCAL_RCC_GetHCLKFreq>
 8001404:	4601      	mov	r1, r0
 8001406:	4b05      	ldr	r3, [pc, #20]	; (800141c <MCAL_RCC_GetPCLK1Freq+0x20>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	0a1b      	lsrs	r3, r3, #8
 800140c:	f003 0307 	and.w	r3, r3, #7
 8001410:	4a03      	ldr	r2, [pc, #12]	; (8001420 <MCAL_RCC_GetPCLK1Freq+0x24>)
 8001412:	5cd3      	ldrb	r3, [r2, r3]
 8001414:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001418:	4618      	mov	r0, r3
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40021000 	.word	0x40021000
 8001420:	08002934 	.word	0x08002934

08001424 <MCAL_RCC_GetPCLK2Freq>:

uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 11 ) & 0b111) ]  ); //the first shift is multiplication
 8001428:	f7ff ffd4 	bl	80013d4 <MCAL_RCC_GetHCLKFreq>
 800142c:	4601      	mov	r1, r0
 800142e:	4b05      	ldr	r3, [pc, #20]	; (8001444 <MCAL_RCC_GetPCLK2Freq+0x20>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	0adb      	lsrs	r3, r3, #11
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	4a03      	ldr	r2, [pc, #12]	; (8001448 <MCAL_RCC_GetPCLK2Freq+0x24>)
 800143a:	5cd3      	ldrb	r3, [r2, r3]
 800143c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001440:	4618      	mov	r0, r3
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40021000 	.word	0x40021000
 8001448:	08002934 	.word	0x08002934

0800144c <SPI1_IRQHandler>:

/* ================= IRQ Function Definitions ===================== */
/* ================================================================ */

void SPI1_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
	SPI_INT_CALLBACK [0]();
 8001450:	4b02      	ldr	r3, [pc, #8]	; (800145c <SPI1_IRQHandler+0x10>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4798      	blx	r3
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000128 	.word	0x20000128

08001460 <SPI2_IRQHandler>:


void SPI2_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
	SPI_INT_CALLBACK [1]();
 8001464:	4b02      	ldr	r3, [pc, #8]	; (8001470 <SPI2_IRQHandler+0x10>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	4798      	blx	r3
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000128 	.word	0x20000128

08001474 <PWM>:
 *
 *  Created on: Sep 15, 2023
 *      Author: Omar Zakaria
 */
#include <TIMERS.h>
void PWM(TIMER_t* CONF,uint32_t CH,uint32_t duty_cycle){
 8001474:	b580      	push	{r7, lr}
 8001476:	b08a      	sub	sp, #40	; 0x28
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
	CONF->TIMERx->CR1 &=~(1<<0);//Counter disabled
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f022 0201 	bic.w	r2, r2, #1
 800148e:	601a      	str	r2, [r3, #0]
	GPIO_PinConfig_t pin;
	char user_flage=1;
 8001490:	2301      	movs	r3, #1
 8001492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t AUTO_RELOAD=0;
 8001496:	2300      	movs	r3, #0
 8001498:	623b      	str	r3, [r7, #32]
	uint32_t PRESCALE=1;
 800149a:	2301      	movs	r3, #1
 800149c:	61fb      	str	r3, [r7, #28]

	while(user_flage==1){
 800149e:	e014      	b.n	80014ca <PWM+0x56>
		AUTO_RELOAD = (CONF->CLOCK)/(CONF->FREQUENCY * PRESCALE );
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	69f9      	ldr	r1, [r7, #28]
 80014aa:	fb01 f303 	mul.w	r3, r1, r3
 80014ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b2:	623b      	str	r3, [r7, #32]
		if(AUTO_RELOAD>=32000){
 80014b4:	6a3b      	ldr	r3, [r7, #32]
 80014b6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80014ba:	d303      	bcc.n	80014c4 <PWM+0x50>
			PRESCALE+=2;
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	3302      	adds	r3, #2
 80014c0:	61fb      	str	r3, [r7, #28]
 80014c2:	e002      	b.n	80014ca <PWM+0x56>
		}
		else{
			user_flage=0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(user_flage==1){
 80014ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d0e6      	beq.n	80014a0 <PWM+0x2c>
		}
	}

	if(CONF->TIMERx == TIM2){
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014da:	f040 811d 	bne.w	8001718 <PWM+0x2a4>
		RCC_TIMER2_Enable();
 80014de:	4b8b      	ldr	r3, [pc, #556]	; (800170c <PWM+0x298>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	4a8a      	ldr	r2, [pc, #552]	; (800170c <PWM+0x298>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 80014ea:	4b88      	ldr	r3, [pc, #544]	; (800170c <PWM+0x298>)
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	4a87      	ldr	r2, [pc, #540]	; (800170c <PWM+0x298>)
 80014f0:	f043 0304 	orr.w	r3, r3, #4
 80014f4:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 80014f6:	4b85      	ldr	r3, [pc, #532]	; (800170c <PWM+0x298>)
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	4a84      	ldr	r2, [pc, #528]	; (800170c <PWM+0x298>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6193      	str	r3, [r2, #24]

		if(CH==1){
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d13d      	bne.n	8001584 <PWM+0x110>
			pin.GPIO_MODE =GPIO_ALT_OUTPUT_PUSHPULL_MODE;
 8001508:	2306      	movs	r3, #6
 800150a:	767b      	strb	r3, [r7, #25]
			pin.GPIO_Output_Speed =GPIO_SPEED_50M;
 800150c:	2303      	movs	r3, #3
 800150e:	76bb      	strb	r3, [r7, #26]
			pin.GPIO_PinNumber=0 ;
 8001510:	2300      	movs	r3, #0
 8001512:	763b      	strb	r3, [r7, #24]
			pin.GPIO_Port =GPIOA;
 8001514:	4b7e      	ldr	r3, [pc, #504]	; (8001710 <PWM+0x29c>)
 8001516:	617b      	str	r3, [r7, #20]
			gpio_pin_intialize(&pin);
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fd69 	bl	8000ff4 <gpio_pin_intialize>

			CONF->TIMERx->CCMR1 |=(1<<3);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	699a      	ldr	r2, [r3, #24]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f042 0208 	orr.w	r2, r2, #8
 8001530:	619a      	str	r2, [r3, #24]
			CONF->TIMERx->CCER |=(1<<0);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6a1a      	ldr	r2, [r3, #32]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f042 0201 	orr.w	r2, r2, #1
 8001540:	621a      	str	r2, [r3, #32]
			CONF->TIMERx->CCMR1 |=(0b110<<4);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	699a      	ldr	r2, [r3, #24]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001550:	619a      	str	r2, [r3, #24]
			CONF->TIMERx->CCR1=(AUTO_RELOAD*duty_cycle*10/1000);//duty cycle
 8001552:	6a3b      	ldr	r3, [r7, #32]
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	fb02 f203 	mul.w	r2, r2, r3
 800155a:	4613      	mov	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	4619      	mov	r1, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a6a      	ldr	r2, [pc, #424]	; (8001714 <PWM+0x2a0>)
 800156a:	fba2 1201 	umull	r1, r2, r2, r1
 800156e:	0992      	lsrs	r2, r2, #6
 8001570:	635a      	str	r2, [r3, #52]	; 0x34
			CONF->TIMERx->DIER |=(0b11<<0);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68da      	ldr	r2, [r3, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f042 0203 	orr.w	r2, r2, #3
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	e1ea      	b.n	800195a <PWM+0x4e6>
		}
		else if(CH==2){
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	2b02      	cmp	r3, #2
 8001588:	d13d      	bne.n	8001606 <PWM+0x192>
			pin.GPIO_MODE =GPIO_ALT_OUTPUT_PUSHPULL_MODE;
 800158a:	2306      	movs	r3, #6
 800158c:	767b      	strb	r3, [r7, #25]
			pin.GPIO_Output_Speed =GPIO_SPEED_50M;
 800158e:	2303      	movs	r3, #3
 8001590:	76bb      	strb	r3, [r7, #26]
			pin.GPIO_PinNumber=1 ;
 8001592:	2301      	movs	r3, #1
 8001594:	763b      	strb	r3, [r7, #24]
			pin.GPIO_Port =GPIOA;
 8001596:	4b5e      	ldr	r3, [pc, #376]	; (8001710 <PWM+0x29c>)
 8001598:	617b      	str	r3, [r7, #20]
			gpio_pin_intialize(&pin);
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fd28 	bl	8000ff4 <gpio_pin_intialize>
			CONF->TIMERx->CCMR1 |=(1<<11);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	699a      	ldr	r2, [r3, #24]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015b2:	619a      	str	r2, [r3, #24]
			CONF->TIMERx->CCER |=(1<<4);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6a1a      	ldr	r2, [r3, #32]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f042 0210 	orr.w	r2, r2, #16
 80015c2:	621a      	str	r2, [r3, #32]
			CONF->TIMERx->CCMR1 |=(0b110<<12);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	699a      	ldr	r2, [r3, #24]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80015d2:	619a      	str	r2, [r3, #24]
			CONF->TIMERx->CCR2=(AUTO_RELOAD*duty_cycle*10/1000);//duty cycle
 80015d4:	6a3b      	ldr	r3, [r7, #32]
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	fb02 f203 	mul.w	r2, r2, r3
 80015dc:	4613      	mov	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	4619      	mov	r1, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a4a      	ldr	r2, [pc, #296]	; (8001714 <PWM+0x2a0>)
 80015ec:	fba2 1201 	umull	r1, r2, r2, r1
 80015f0:	0992      	lsrs	r2, r2, #6
 80015f2:	639a      	str	r2, [r3, #56]	; 0x38
			CONF->TIMERx->DIER |=(0b101<<0);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	68da      	ldr	r2, [r3, #12]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f042 0205 	orr.w	r2, r2, #5
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	e1a9      	b.n	800195a <PWM+0x4e6>
		}
		else if(CH==3){
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	2b03      	cmp	r3, #3
 800160a:	d13d      	bne.n	8001688 <PWM+0x214>
			pin.GPIO_MODE =GPIO_ALT_OUTPUT_PUSHPULL_MODE;
 800160c:	2306      	movs	r3, #6
 800160e:	767b      	strb	r3, [r7, #25]
			pin.GPIO_Output_Speed =GPIO_SPEED_50M;
 8001610:	2303      	movs	r3, #3
 8001612:	76bb      	strb	r3, [r7, #26]
			pin.GPIO_PinNumber=2 ;
 8001614:	2302      	movs	r3, #2
 8001616:	763b      	strb	r3, [r7, #24]
			pin.GPIO_Port =GPIOA;
 8001618:	4b3d      	ldr	r3, [pc, #244]	; (8001710 <PWM+0x29c>)
 800161a:	617b      	str	r3, [r7, #20]
			gpio_pin_intialize(&pin);
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fce7 	bl	8000ff4 <gpio_pin_intialize>
			CONF->TIMERx->CCMR2 |=(1<<3);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	69da      	ldr	r2, [r3, #28]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f042 0208 	orr.w	r2, r2, #8
 8001634:	61da      	str	r2, [r3, #28]
			CONF->TIMERx->CCER |=(1<<8);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6a1a      	ldr	r2, [r3, #32]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001644:	621a      	str	r2, [r3, #32]
			CONF->TIMERx->CCMR2 |=(0b110<<4);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	69da      	ldr	r2, [r3, #28]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001654:	61da      	str	r2, [r3, #28]
			CONF->TIMERx->CCR3=(AUTO_RELOAD*duty_cycle*10/1000);//duty cycle
 8001656:	6a3b      	ldr	r3, [r7, #32]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	fb02 f203 	mul.w	r2, r2, r3
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	4619      	mov	r1, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a29      	ldr	r2, [pc, #164]	; (8001714 <PWM+0x2a0>)
 800166e:	fba2 1201 	umull	r1, r2, r2, r1
 8001672:	0992      	lsrs	r2, r2, #6
 8001674:	63da      	str	r2, [r3, #60]	; 0x3c
			CONF->TIMERx->DIER |=(0b1001<<0);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	68da      	ldr	r2, [r3, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f042 0209 	orr.w	r2, r2, #9
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	e168      	b.n	800195a <PWM+0x4e6>
		}
		else if(CH==4){
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	2b04      	cmp	r3, #4
 800168c:	f040 8165 	bne.w	800195a <PWM+0x4e6>
			pin.GPIO_MODE =GPIO_ALT_OUTPUT_PUSHPULL_MODE;
 8001690:	2306      	movs	r3, #6
 8001692:	767b      	strb	r3, [r7, #25]
			pin.GPIO_Output_Speed =GPIO_SPEED_50M;
 8001694:	2303      	movs	r3, #3
 8001696:	76bb      	strb	r3, [r7, #26]
			pin.GPIO_PinNumber=3 ;
 8001698:	2303      	movs	r3, #3
 800169a:	763b      	strb	r3, [r7, #24]
			pin.GPIO_Port =GPIOA;
 800169c:	4b1c      	ldr	r3, [pc, #112]	; (8001710 <PWM+0x29c>)
 800169e:	617b      	str	r3, [r7, #20]
			gpio_pin_intialize(&pin);
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fca5 	bl	8000ff4 <gpio_pin_intialize>
			CONF->TIMERx->CCMR2 |=(1<<11);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	69da      	ldr	r2, [r3, #28]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016b8:	61da      	str	r2, [r3, #28]
			CONF->TIMERx->CCER |=(1<<12);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6a1a      	ldr	r2, [r3, #32]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80016c8:	621a      	str	r2, [r3, #32]
			CONF->TIMERx->CCMR2 |=(0b110<<12);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	69da      	ldr	r2, [r3, #28]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80016d8:	61da      	str	r2, [r3, #28]
			CONF->TIMERx->CCR4=(AUTO_RELOAD*duty_cycle*10/1000);//duty cycle
 80016da:	6a3b      	ldr	r3, [r7, #32]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	fb02 f203 	mul.w	r2, r2, r3
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	4619      	mov	r1, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a08      	ldr	r2, [pc, #32]	; (8001714 <PWM+0x2a0>)
 80016f2:	fba2 1201 	umull	r1, r2, r2, r1
 80016f6:	0992      	lsrs	r2, r2, #6
 80016f8:	641a      	str	r2, [r3, #64]	; 0x40
			CONF->TIMERx->DIER |=(0b10001<<0);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68da      	ldr	r2, [r3, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f042 0211 	orr.w	r2, r2, #17
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	e126      	b.n	800195a <PWM+0x4e6>
 800170c:	40021000 	.word	0x40021000
 8001710:	40010800 	.word	0x40010800
 8001714:	10624dd3 	.word	0x10624dd3
		}
	}
	else if (CONF->TIMERx==TIM3){
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4aa1      	ldr	r2, [pc, #644]	; (80019a4 <PWM+0x530>)
 800171e:	4293      	cmp	r3, r2
 8001720:	f040 811b 	bne.w	800195a <PWM+0x4e6>
		RCC_TIMER3_Enable();//enable timer3 clock
 8001724:	4ba0      	ldr	r3, [pc, #640]	; (80019a8 <PWM+0x534>)
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	4a9f      	ldr	r2, [pc, #636]	; (80019a8 <PWM+0x534>)
 800172a:	f043 0302 	orr.w	r3, r3, #2
 800172e:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 8001730:	4b9d      	ldr	r3, [pc, #628]	; (80019a8 <PWM+0x534>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	4a9c      	ldr	r2, [pc, #624]	; (80019a8 <PWM+0x534>)
 8001736:	f043 0304 	orr.w	r3, r3, #4
 800173a:	6193      	str	r3, [r2, #24]
		RCC_GPIOB_CLK_EN();
 800173c:	4b9a      	ldr	r3, [pc, #616]	; (80019a8 <PWM+0x534>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	4a99      	ldr	r2, [pc, #612]	; (80019a8 <PWM+0x534>)
 8001742:	f043 0308 	orr.w	r3, r3, #8
 8001746:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8001748:	4b97      	ldr	r3, [pc, #604]	; (80019a8 <PWM+0x534>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	4a96      	ldr	r2, [pc, #600]	; (80019a8 <PWM+0x534>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	6193      	str	r3, [r2, #24]

		if(CH==1){
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d13d      	bne.n	80017d6 <PWM+0x362>
			pin.GPIO_MODE =GPIO_ALT_OUTPUT_PUSHPULL_MODE;
 800175a:	2306      	movs	r3, #6
 800175c:	767b      	strb	r3, [r7, #25]
			pin.GPIO_Output_Speed =GPIO_SPEED_50M;
 800175e:	2303      	movs	r3, #3
 8001760:	76bb      	strb	r3, [r7, #26]
			pin.GPIO_PinNumber=6 ;
 8001762:	2306      	movs	r3, #6
 8001764:	763b      	strb	r3, [r7, #24]
			pin.GPIO_Port =GPIOA;
 8001766:	4b91      	ldr	r3, [pc, #580]	; (80019ac <PWM+0x538>)
 8001768:	617b      	str	r3, [r7, #20]
			gpio_pin_intialize(&pin);
 800176a:	f107 0314 	add.w	r3, r7, #20
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff fc40 	bl	8000ff4 <gpio_pin_intialize>

			CONF->TIMERx->CCMR1 |=(1<<3);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	699a      	ldr	r2, [r3, #24]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f042 0208 	orr.w	r2, r2, #8
 8001782:	619a      	str	r2, [r3, #24]
			CONF->TIMERx->CCER |=(1<<0);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6a1a      	ldr	r2, [r3, #32]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f042 0201 	orr.w	r2, r2, #1
 8001792:	621a      	str	r2, [r3, #32]
			CONF->TIMERx->CCMR1 |=(0b110<<4);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	699a      	ldr	r2, [r3, #24]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80017a2:	619a      	str	r2, [r3, #24]
			CONF->TIMERx->CCR1=(AUTO_RELOAD*duty_cycle*10/1000);//duty cycle
 80017a4:	6a3b      	ldr	r3, [r7, #32]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	fb02 f203 	mul.w	r2, r2, r3
 80017ac:	4613      	mov	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	4619      	mov	r1, r3
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a7d      	ldr	r2, [pc, #500]	; (80019b0 <PWM+0x53c>)
 80017bc:	fba2 1201 	umull	r1, r2, r2, r1
 80017c0:	0992      	lsrs	r2, r2, #6
 80017c2:	635a      	str	r2, [r3, #52]	; 0x34
			CONF->TIMERx->DIER |=(0b11<<0);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68da      	ldr	r2, [r3, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f042 0203 	orr.w	r2, r2, #3
 80017d2:	60da      	str	r2, [r3, #12]
 80017d4:	e0c1      	b.n	800195a <PWM+0x4e6>
		}
		else if(CH==2){
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d13d      	bne.n	8001858 <PWM+0x3e4>
			pin.GPIO_MODE =GPIO_ALT_OUTPUT_PUSHPULL_MODE;
 80017dc:	2306      	movs	r3, #6
 80017de:	767b      	strb	r3, [r7, #25]
			pin.GPIO_Output_Speed =GPIO_SPEED_50M;
 80017e0:	2303      	movs	r3, #3
 80017e2:	76bb      	strb	r3, [r7, #26]
			pin.GPIO_PinNumber=7 ;
 80017e4:	2307      	movs	r3, #7
 80017e6:	763b      	strb	r3, [r7, #24]
			pin.GPIO_Port =GPIOA;
 80017e8:	4b70      	ldr	r3, [pc, #448]	; (80019ac <PWM+0x538>)
 80017ea:	617b      	str	r3, [r7, #20]
			gpio_pin_intialize(&pin);
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fbff 	bl	8000ff4 <gpio_pin_intialize>

			CONF->TIMERx->CCMR1 |=(1<<11);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	699a      	ldr	r2, [r3, #24]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001804:	619a      	str	r2, [r3, #24]
			CONF->TIMERx->CCER |=(1<<4);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6a1a      	ldr	r2, [r3, #32]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f042 0210 	orr.w	r2, r2, #16
 8001814:	621a      	str	r2, [r3, #32]
			CONF->TIMERx->CCMR1 |=(0b110<<12);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	699a      	ldr	r2, [r3, #24]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8001824:	619a      	str	r2, [r3, #24]
			CONF->TIMERx->CCR2=(AUTO_RELOAD*duty_cycle*10/1000);//duty cycle
 8001826:	6a3b      	ldr	r3, [r7, #32]
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	fb02 f203 	mul.w	r2, r2, r3
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	4619      	mov	r1, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a5c      	ldr	r2, [pc, #368]	; (80019b0 <PWM+0x53c>)
 800183e:	fba2 1201 	umull	r1, r2, r2, r1
 8001842:	0992      	lsrs	r2, r2, #6
 8001844:	639a      	str	r2, [r3, #56]	; 0x38
			CONF->TIMERx->DIER |=(0b101<<0);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68da      	ldr	r2, [r3, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f042 0205 	orr.w	r2, r2, #5
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	e080      	b.n	800195a <PWM+0x4e6>
		}
		else if(CH==3){
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	2b03      	cmp	r3, #3
 800185c:	d13d      	bne.n	80018da <PWM+0x466>
			pin.GPIO_MODE =GPIO_ALT_OUTPUT_PUSHPULL_MODE;
 800185e:	2306      	movs	r3, #6
 8001860:	767b      	strb	r3, [r7, #25]
			pin.GPIO_Output_Speed =GPIO_SPEED_50M;
 8001862:	2303      	movs	r3, #3
 8001864:	76bb      	strb	r3, [r7, #26]
			pin.GPIO_PinNumber=0 ;
 8001866:	2300      	movs	r3, #0
 8001868:	763b      	strb	r3, [r7, #24]
			pin.GPIO_Port =GPIOB;
 800186a:	4b52      	ldr	r3, [pc, #328]	; (80019b4 <PWM+0x540>)
 800186c:	617b      	str	r3, [r7, #20]
			gpio_pin_intialize(&pin);
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fbbe 	bl	8000ff4 <gpio_pin_intialize>

			CONF->TIMERx->CCMR2 |=(1<<3);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	69da      	ldr	r2, [r3, #28]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f042 0208 	orr.w	r2, r2, #8
 8001886:	61da      	str	r2, [r3, #28]
			CONF->TIMERx->CCER |=(1<<8);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6a1a      	ldr	r2, [r3, #32]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001896:	621a      	str	r2, [r3, #32]
			CONF->TIMERx->CCMR2 |=(0b110<<4);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	69da      	ldr	r2, [r3, #28]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80018a6:	61da      	str	r2, [r3, #28]
			CONF->TIMERx->CCR3=(AUTO_RELOAD*duty_cycle*10/1000);//duty cycle
 80018a8:	6a3b      	ldr	r3, [r7, #32]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	fb02 f203 	mul.w	r2, r2, r3
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4619      	mov	r1, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a3c      	ldr	r2, [pc, #240]	; (80019b0 <PWM+0x53c>)
 80018c0:	fba2 1201 	umull	r1, r2, r2, r1
 80018c4:	0992      	lsrs	r2, r2, #6
 80018c6:	63da      	str	r2, [r3, #60]	; 0x3c
			CONF->TIMERx->DIER |=(0b1001<<0);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 0209 	orr.w	r2, r2, #9
 80018d6:	60da      	str	r2, [r3, #12]
 80018d8:	e03f      	b.n	800195a <PWM+0x4e6>
		}
		else if(CH==4){
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	2b04      	cmp	r3, #4
 80018de:	d13c      	bne.n	800195a <PWM+0x4e6>
			pin.GPIO_MODE =GPIO_ALT_OUTPUT_PUSHPULL_MODE;
 80018e0:	2306      	movs	r3, #6
 80018e2:	767b      	strb	r3, [r7, #25]
			pin.GPIO_Output_Speed =GPIO_SPEED_50M;
 80018e4:	2303      	movs	r3, #3
 80018e6:	76bb      	strb	r3, [r7, #26]
			pin.GPIO_PinNumber=1 ;
 80018e8:	2301      	movs	r3, #1
 80018ea:	763b      	strb	r3, [r7, #24]
			pin.GPIO_Port =GPIOA;
 80018ec:	4b2f      	ldr	r3, [pc, #188]	; (80019ac <PWM+0x538>)
 80018ee:	617b      	str	r3, [r7, #20]
			gpio_pin_intialize(&pin);
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fb7d 	bl	8000ff4 <gpio_pin_intialize>

			CONF->TIMERx->CCMR2 |=(1<<11);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	69da      	ldr	r2, [r3, #28]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001908:	61da      	str	r2, [r3, #28]
			CONF->TIMERx->CCER |=(1<<12);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6a1a      	ldr	r2, [r3, #32]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001918:	621a      	str	r2, [r3, #32]
			CONF->TIMERx->CCMR2 |=(0b110<<12);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	69da      	ldr	r2, [r3, #28]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8001928:	61da      	str	r2, [r3, #28]
			CONF->TIMERx->CCR4=(AUTO_RELOAD*duty_cycle*10/1000);//duty cycle
 800192a:	6a3b      	ldr	r3, [r7, #32]
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	fb02 f203 	mul.w	r2, r2, r3
 8001932:	4613      	mov	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4413      	add	r3, r2
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	4619      	mov	r1, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a1b      	ldr	r2, [pc, #108]	; (80019b0 <PWM+0x53c>)
 8001942:	fba2 1201 	umull	r1, r2, r2, r1
 8001946:	0992      	lsrs	r2, r2, #6
 8001948:	641a      	str	r2, [r3, #64]	; 0x40
			CONF->TIMERx->DIER |=(0b10001<<0);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68da      	ldr	r2, [r3, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f042 0211 	orr.w	r2, r2, #17
 8001958:	60da      	str	r2, [r3, #12]


	//	ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	CONF->TIMERx->CR1 |=(1<<7);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001968:	601a      	str	r2, [r3, #0]


	//	110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1


	CONF->TIMERx->ARR=AUTO_RELOAD;//frec peak value
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6a3a      	ldr	r2, [r7, #32]
 8001970:	62da      	str	r2, [r3, #44]	; 0x2c

	CONF->TIMERx->PSC=(PRESCALE-1);//prescaller
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	69fa      	ldr	r2, [r7, #28]
 8001978:	3a01      	subs	r2, #1
 800197a:	629a      	str	r2, [r3, #40]	; 0x28
	//	0: No action
	//	1: Reinitialize the counter and generates an update of the registers. Note that the prescaler
	//	counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if
	//	the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload
	//	value (TIMx_ARR) if DIR=1 (downcounting).
	CONF->TIMERx->EGR |=(1<<0);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	695a      	ldr	r2, [r3, #20]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 0201 	orr.w	r2, r2, #1
 800198a:	615a      	str	r2, [r3, #20]
	//CONF->TIMERx->CCMR1 |=0b110<((CH - 1) * 4);
	CONF->TIMERx->CR1 |=(1<<0);//enable the timer
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f042 0201 	orr.w	r2, r2, #1
 800199a:	601a      	str	r2, [r3, #0]

}
 800199c:	bf00      	nop
 800199e:	3728      	adds	r7, #40	; 0x28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40000400 	.word	0x40000400
 80019a8:	40021000 	.word	0x40021000
 80019ac:	40010800 	.word	0x40010800
 80019b0:	10624dd3 	.word	0x10624dd3
 80019b4:	40010c00 	.word	0x40010c00

080019b8 <MCAL_UART_Init>:
 * Note				-Support for Now Asynch mode & Clock 8 MHZ S

 /  */

void MCAL_UART_Init ( UART_Config* UART_Config)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
	uint32_t pclk ,BRR  ;

	//	enable the Clock for given USART peripheral
	if ( UART_Config->USARTx == USART1 ){
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a78      	ldr	r2, [pc, #480]	; (8001ba8 <MCAL_UART_Init+0x1f0>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d10d      	bne.n	80019e6 <MCAL_UART_Init+0x2e>
		RCC_USART1_CLK_EN();
 80019ca:	4b78      	ldr	r3, [pc, #480]	; (8001bac <MCAL_UART_Init+0x1f4>)
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	4a77      	ldr	r2, [pc, #476]	; (8001bac <MCAL_UART_Init+0x1f4>)
 80019d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d4:	6193      	str	r3, [r2, #24]
		USART_INT_CALLBACK [0] = UART_Config->P_IRQ_CallBack;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	4a75      	ldr	r2, [pc, #468]	; (8001bb0 <MCAL_UART_Init+0x1f8>)
 80019dc:	6013      	str	r3, [r2, #0]
		pclk = MCAL_RCC_GetPCLK2Freq();
 80019de:	f7ff fd21 	bl	8001424 <MCAL_RCC_GetPCLK2Freq>
 80019e2:	6178      	str	r0, [r7, #20]
 80019e4:	e024      	b.n	8001a30 <MCAL_UART_Init+0x78>
	}
	else if ( UART_Config->USARTx == USART2 ){
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a72      	ldr	r2, [pc, #456]	; (8001bb4 <MCAL_UART_Init+0x1fc>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d10d      	bne.n	8001a0c <MCAL_UART_Init+0x54>
		RCC_USART2_CLK_EN();
 80019f0:	4b6e      	ldr	r3, [pc, #440]	; (8001bac <MCAL_UART_Init+0x1f4>)
 80019f2:	69db      	ldr	r3, [r3, #28]
 80019f4:	4a6d      	ldr	r2, [pc, #436]	; (8001bac <MCAL_UART_Init+0x1f4>)
 80019f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019fa:	61d3      	str	r3, [r2, #28]
		USART_INT_CALLBACK [1] = UART_Config->P_IRQ_CallBack;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	695b      	ldr	r3, [r3, #20]
 8001a00:	4a6b      	ldr	r2, [pc, #428]	; (8001bb0 <MCAL_UART_Init+0x1f8>)
 8001a02:	6053      	str	r3, [r2, #4]
		pclk = MCAL_RCC_GetPCLK1Freq();
 8001a04:	f7ff fcfa 	bl	80013fc <MCAL_RCC_GetPCLK1Freq>
 8001a08:	6178      	str	r0, [r7, #20]
 8001a0a:	e011      	b.n	8001a30 <MCAL_UART_Init+0x78>
	}
	else if ( UART_Config->USARTx == USART3 ){
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a69      	ldr	r2, [pc, #420]	; (8001bb8 <MCAL_UART_Init+0x200>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d10c      	bne.n	8001a30 <MCAL_UART_Init+0x78>
		RCC_USART3_CLK_EN();
 8001a16:	4b65      	ldr	r3, [pc, #404]	; (8001bac <MCAL_UART_Init+0x1f4>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	4a64      	ldr	r2, [pc, #400]	; (8001bac <MCAL_UART_Init+0x1f4>)
 8001a1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a20:	61d3      	str	r3, [r2, #28]
		USART_INT_CALLBACK [2] = UART_Config->P_IRQ_CallBack;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	4a62      	ldr	r2, [pc, #392]	; (8001bb0 <MCAL_UART_Init+0x1f8>)
 8001a28:	6093      	str	r3, [r2, #8]
		pclk = MCAL_RCC_GetPCLK1Freq();
 8001a2a:	f7ff fce7 	bl	80013fc <MCAL_RCC_GetPCLK1Freq>
 8001a2e:	6178      	str	r0, [r7, #20]
	}


	//Enable USART Module
	//	USART_CR1  Bit 13 UE: USART enable
	UART_Config->USARTx->CR1 |= 1<<13 ;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a3e:	60da      	str	r2, [r3, #12]

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	//	USART_CR1 Bit 3 TE: Transmitter enable & Bit 2 RE: Receiver enable
	UART_Config->USARTx->CR1 |= UART_Config->USART_Mode ;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	791b      	ldrb	r3, [r3, #4]
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	430a      	orrs	r2, r1
 8001a52:	60da      	str	r2, [r3, #12]

	//PAYLOAD Width
	// USARTx->CR1  Bit 12 M: Word length
	UART_Config->USARTx->CR1 |= UART_Config->Payload_Length ;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68da      	ldr	r2, [r3, #12]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	7b1b      	ldrb	r3, [r3, #12]
 8001a5e:	4619      	mov	r1, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	430a      	orrs	r2, r1
 8001a66:	60da      	str	r2, [r3, #12]

	//Configuration of parity control bit fields
	// USARTx->CR1 	Bit 10 PCE: Parity control enable     Bit 9 PS: Parity selection
	UART_Config->USARTx->CR1 |= UART_Config->Parity ;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68da      	ldr	r2, [r3, #12]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	7b5b      	ldrb	r3, [r3, #13]
 8001a72:	4619      	mov	r1, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	60da      	str	r2, [r3, #12]

	//configure the number of stop bits
	//USART_CR2  Bits 13:12 STOP: STOP bits
	UART_Config->USARTx->CR2 |= UART_Config->StopBits ;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	691a      	ldr	r2, [r3, #16]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	7b9b      	ldrb	r3, [r3, #14]
 8001a86:	4619      	mov	r1, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	611a      	str	r2, [r3, #16]


	//USART hardware flow control
	//USART_CR3  Bit 9 CTSE: CTS enable   Bit 8 RTSE: RTS enable
	UART_Config->USARTx->CR3 |= UART_Config->HwFlowCtl ;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	695a      	ldr	r2, [r3, #20]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	7bdb      	ldrb	r3, [r3, #15]
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	615a      	str	r2, [r3, #20]

	BRR = UART_BRR_Register(pclk, UART_Config->BaudRate) ;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	011b      	lsls	r3, r3, #4
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab0:	0119      	lsls	r1, r3, #4
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	009a      	lsls	r2, r3, #2
 8001abc:	441a      	add	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	011b      	lsls	r3, r3, #4
 8001ace:	6978      	ldr	r0, [r7, #20]
 8001ad0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ad4:	2064      	movs	r0, #100	; 0x64
 8001ad6:	fb00 f303 	mul.w	r3, r0, r3
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	011b      	lsls	r3, r3, #4
 8001ade:	4a37      	ldr	r2, [pc, #220]	; (8001bbc <MCAL_UART_Init+0x204>)
 8001ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae4:	095b      	lsrs	r3, r3, #5
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	430b      	orrs	r3, r1
 8001aec:	613b      	str	r3, [r7, #16]
	UART_Config->USARTx->BRR = BRR ;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	609a      	str	r2, [r3, #8]

	/* 9. ENABLE / DISABLE Interrupt */
	uint8_t interrupts =0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	73fb      	strb	r3, [r7, #15]
	interrupts |= UART_Config->RXNEIE_IRQ_Enable
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	7c1b      	ldrb	r3, [r3, #16]
 8001afe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	b25a      	sxtb	r2, r3
			| (UART_Config->TCIE_IRQ_Enable<<1)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	7c1b      	ldrb	r3, [r3, #16]
 8001b0a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	b25b      	sxtb	r3, r3
 8001b14:	4313      	orrs	r3, r2
 8001b16:	b25a      	sxtb	r2, r3
			| (UART_Config->TXEIE_IRQ_Enable<<2)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	7c1b      	ldrb	r3, [r3, #16]
 8001b1c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	b25b      	sxtb	r3, r3
 8001b26:	4313      	orrs	r3, r2
 8001b28:	b25a      	sxtb	r2, r3
			| (UART_Config->PEIE_IRQ_Enable<<3);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	7c1b      	ldrb	r3, [r3, #16]
 8001b2e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	b25b      	sxtb	r3, r3
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	b25a      	sxtb	r2, r3
	interrupts |= UART_Config->RXNEIE_IRQ_Enable
 8001b3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	b25b      	sxtb	r3, r3
 8001b44:	73fb      	strb	r3, [r7, #15]
	UART_Config->USARTx->CR1 |=  interrupts<<5;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68da      	ldr	r2, [r3, #12]
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	015b      	lsls	r3, r3, #5
 8001b50:	4619      	mov	r1, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	60da      	str	r2, [r3, #12]

	if (UART_Config->USARTx == USART1)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a12      	ldr	r2, [pc, #72]	; (8001ba8 <MCAL_UART_Init+0x1f0>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d106      	bne.n	8001b72 <MCAL_UART_Init+0x1ba>
		NVIC_IRQ37_USART1_Enable;
 8001b64:	4b16      	ldr	r3, [pc, #88]	; (8001bc0 <MCAL_UART_Init+0x208>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a15      	ldr	r2, [pc, #84]	; (8001bc0 <MCAL_UART_Init+0x208>)
 8001b6a:	f043 0320 	orr.w	r3, r3, #32
 8001b6e:	6013      	str	r3, [r2, #0]
		NVIC_IRQ38_USART2_Enable;

	else if (UART_Config->USARTx == USART3)
		NVIC_IRQ39_USART3_Enable;

}
 8001b70:	e016      	b.n	8001ba0 <MCAL_UART_Init+0x1e8>
	else if (UART_Config->USARTx == USART2)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a0f      	ldr	r2, [pc, #60]	; (8001bb4 <MCAL_UART_Init+0x1fc>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d106      	bne.n	8001b8a <MCAL_UART_Init+0x1d2>
		NVIC_IRQ38_USART2_Enable;
 8001b7c:	4b10      	ldr	r3, [pc, #64]	; (8001bc0 <MCAL_UART_Init+0x208>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a0f      	ldr	r2, [pc, #60]	; (8001bc0 <MCAL_UART_Init+0x208>)
 8001b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b86:	6013      	str	r3, [r2, #0]
}
 8001b88:	e00a      	b.n	8001ba0 <MCAL_UART_Init+0x1e8>
	else if (UART_Config->USARTx == USART3)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <MCAL_UART_Init+0x200>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d105      	bne.n	8001ba0 <MCAL_UART_Init+0x1e8>
		NVIC_IRQ39_USART3_Enable;
 8001b94:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <MCAL_UART_Init+0x208>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a09      	ldr	r2, [pc, #36]	; (8001bc0 <MCAL_UART_Init+0x208>)
 8001b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b9e:	6013      	str	r3, [r2, #0]
}
 8001ba0:	bf00      	nop
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40013800 	.word	0x40013800
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	20000130 	.word	0x20000130
 8001bb4:	40004400 	.word	0x40004400
 8001bb8:	40004800 	.word	0x40004800
 8001bbc:	51eb851f 	.word	0x51eb851f
 8001bc0:	e000e104 	.word	0xe000e104

08001bc4 <MCAL_UART_SendData>:
 * 					- because it is replaced by the parity
 * 					- when receiving with the parity enabled the value read in the MSB bit is the received parity bit
 */

void MCAL_UART_SendData	(UART_Config* UART_Config, uint16_t *pTxBuffer,enum Polling_mechism PollingEn )
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	71fb      	strb	r3, [r7, #7]
	/* 1. Wait until TXE flag is set in the SR */
	if (PollingEn == enable)
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d107      	bne.n	8001be8 <MCAL_UART_SendData+0x24>
		 * The TXE bit is set by hardware and it indicates:
		 * The data has been moved from TDR to the shift register and the data transmission has started.
		 * The TDR register is empty.
		 * The next data can be written in the USART_DR register without overwriting the previous data.
		 */
		while (!(UART_Config->USARTx->SR & 1<<7));
 8001bd8:	bf00      	nop
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0f8      	beq.n	8001bda <MCAL_UART_SendData+0x16>
	 * the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect
	 * because it is replaced by the parity.
	 * When receiving with the parity enabled, the value read in the MSB bit is the received parity bit.
	 *
	 */
	if (UART_Config->Payload_Length == UART_Payload_Length_8B)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	7b1b      	ldrb	r3, [r3, #12]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d106      	bne.n	8001bfe <MCAL_UART_SendData+0x3a>
	{
		UART_Config->USARTx->DR = (*pTxBuffer) & (uint8_t)0xFF ;
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	605a      	str	r2, [r3, #4]
	{
		UART_Config->USARTx->DR = (*pTxBuffer) & (uint16_t)0x1FF ;
	}


}
 8001bfe:	bf00      	nop
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr

08001c08 <MCAL_UART_WAIT_TC>:

void MCAL_UART_WAIT_TC(UART_Config* UART_Config)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
	/* Wait till TC flag is set in the SR */
	while(!(UART_Config->USARTx->SR & 1<<6));
 8001c10:	bf00      	nop
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0f8      	beq.n	8001c12 <MCAL_UART_WAIT_TC+0xa>
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
	...

08001c2c <USART1_IRQHandler>:
}



void USART1_IRQHandler (void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
	USART_INT_CALLBACK [0]();
 8001c30:	4b02      	ldr	r3, [pc, #8]	; (8001c3c <USART1_IRQHandler+0x10>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4798      	blx	r3
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000130 	.word	0x20000130

08001c40 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
	USART_INT_CALLBACK [1]();
 8001c44:	4b02      	ldr	r3, [pc, #8]	; (8001c50 <USART2_IRQHandler+0x10>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	4798      	blx	r3
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000130 	.word	0x20000130

08001c54 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
	USART_INT_CALLBACK [2]();
 8001c58:	4b02      	ldr	r3, [pc, #8]	; (8001c64 <USART3_IRQHandler+0x10>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	4798      	blx	r3
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000130 	.word	0x20000130

08001c68 <GetTemp>:
		.lcd_data[3].GPIO_Output_Speed=GPIO_SPEED_2M,
		.lcd_data[3].GPIO_MODE =GPIO_OUTPUT_PUSHPULL_MODE

};

uint16_t GetTemp(){
 8001c68:	b590      	push	{r4, r7, lr}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
	uint16_t adc;
	adc = MCAL_ADC_READ(ADC1,0);
 8001c6e:	2100      	movs	r1, #0
 8001c70:	480f      	ldr	r0, [pc, #60]	; (8001cb0 <GetTemp+0x48>)
 8001c72:	f7ff f84b 	bl	8000d0c <MCAL_ADC_READ>
 8001c76:	4603      	mov	r3, r0
 8001c78:	80fb      	strh	r3, [r7, #6]
	adc /= (1867.0/150.0);
 8001c7a:	88fb      	ldrh	r3, [r7, #6]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7fe fbd1 	bl	8000424 <__aeabi_i2d>
 8001c82:	a309      	add	r3, pc, #36	; (adr r3, 8001ca8 <GetTemp+0x40>)
 8001c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c88:	f7fe fd60 	bl	800074c <__aeabi_ddiv>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	460c      	mov	r4, r1
 8001c90:	4618      	mov	r0, r3
 8001c92:	4621      	mov	r1, r4
 8001c94:	f7fe fe42 	bl	800091c <__aeabi_d2uiz>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	80fb      	strh	r3, [r7, #6]
	return adc;
 8001c9c:	88fb      	ldrh	r3, [r7, #6]

}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd90      	pop	{r4, r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	7e4b17e5 	.word	0x7e4b17e5
 8001cac:	4028e4b1 	.word	0x4028e4b1
 8001cb0:	40012400 	.word	0x40012400

08001cb4 <SendFrame>:

void SendFrame (USART_TypeDef * uart, char str []){
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
	uint32_t size =strlen(str);
 8001cbe:	6838      	ldr	r0, [r7, #0]
 8001cc0:	f7fe fa56 	bl	8000170 <strlen>
 8001cc4:	60b8      	str	r0, [r7, #8]
	for (int i = 0; i < size; i++) {
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	e00d      	b.n	8001ce8 <SendFrame+0x34>
		MCAL_UART_SendData(uart,(str+i), 1);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff ff74 	bl	8001bc4 <MCAL_UART_SendData>
		MCAL_UART_WAIT_TC(uart);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7ff ff93 	bl	8001c08 <MCAL_UART_WAIT_TC>
	for (int i = 0; i < size; i++) {
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d8ed      	bhi.n	8001ccc <SendFrame+0x18>
	}
}
 8001cf0:	bf00      	nop
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <NumToStr>:

void NumToStr(uint16_t number ,char *str){
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	6039      	str	r1, [r7, #0]
 8001d02:	80fb      	strh	r3, [r7, #6]
	sprintf(str,"%d",number);
 8001d04:	88fb      	ldrh	r3, [r7, #6]
 8001d06:	461a      	mov	r2, r3
 8001d08:	4903      	ldr	r1, [pc, #12]	; (8001d18 <NumToStr+0x20>)
 8001d0a:	6838      	ldr	r0, [r7, #0]
 8001d0c:	f000 f9e0 	bl	80020d0 <siprintf>
}
 8001d10:	bf00      	nop
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	0800290c 	.word	0x0800290c

08001d1c <Automatic>:
	lcd_4bit_send_string_pos(&lcd, 3, 1, str);
	lcd_4bit_send_string(&lcd, "  ");
}


void Automatic(uint32_t min , uint32_t max){
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
	MaxTemp=max;
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <Automatic+0x2c>)
 8001d2c:	701a      	strb	r2, [r3, #0]
	MinTemp=min;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <Automatic+0x30>)
 8001d34:	701a      	strb	r2, [r3, #0]
	Automated=1;
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <Automatic+0x34>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	701a      	strb	r2, [r3, #0]
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20000191 	.word	0x20000191
 8001d4c:	20000190 	.word	0x20000190
 8001d50:	20000000 	.word	0x20000000

08001d54 <Manual>:
void Manual (uint32_t X ,uint32_t fan_speed){
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
	Automated=0;
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <Manual+0x38>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
	PWM(&PWM2,2,(fan_speed)*10);
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	4613      	mov	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	461a      	mov	r2, r3
 8001d70:	2102      	movs	r1, #2
 8001d72:	4807      	ldr	r0, [pc, #28]	; (8001d90 <Manual+0x3c>)
 8001d74:	f7ff fb7e 	bl	8001474 <PWM>
	gpio_pin_write_logic(&lamp, X);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4805      	ldr	r0, [pc, #20]	; (8001d94 <Manual+0x40>)
 8001d80:	f7ff f9cc 	bl	800111c <gpio_pin_write_logic>
}
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000000 	.word	0x20000000
 8001d90:	2000001c 	.word	0x2000001c
 8001d94:	20000028 	.word	0x20000028

08001d98 <EXIT_CALLBACK>:


char val[3]={0,0,0};
void EXIT_CALLBACK (){
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0

	Exit_Data=USART2->DR;
 8001d9c:	4b2e      	ldr	r3, [pc, #184]	; (8001e58 <EXIT_CALLBACK+0xc0>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	4b2e      	ldr	r3, [pc, #184]	; (8001e5c <EXIT_CALLBACK+0xc4>)
 8001da4:	701a      	strb	r2, [r3, #0]
	MCAL_UART_SendData(&Exit, &Exit_Data, 1);
 8001da6:	2201      	movs	r2, #1
 8001da8:	492c      	ldr	r1, [pc, #176]	; (8001e5c <EXIT_CALLBACK+0xc4>)
 8001daa:	482d      	ldr	r0, [pc, #180]	; (8001e60 <EXIT_CALLBACK+0xc8>)
 8001dac:	f7ff ff0a 	bl	8001bc4 <MCAL_UART_SendData>
	buffer[N]= Exit_Data;
 8001db0:	4b2c      	ldr	r3, [pc, #176]	; (8001e64 <EXIT_CALLBACK+0xcc>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a29      	ldr	r2, [pc, #164]	; (8001e5c <EXIT_CALLBACK+0xc4>)
 8001db6:	7811      	ldrb	r1, [r2, #0]
 8001db8:	4a2b      	ldr	r2, [pc, #172]	; (8001e68 <EXIT_CALLBACK+0xd0>)
 8001dba:	54d1      	strb	r1, [r2, r3]
	N++;
 8001dbc:	4b29      	ldr	r3, [pc, #164]	; (8001e64 <EXIT_CALLBACK+0xcc>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	4a28      	ldr	r2, [pc, #160]	; (8001e64 <EXIT_CALLBACK+0xcc>)
 8001dc4:	6013      	str	r3, [r2, #0]
	if (N==3) {
 8001dc6:	4b27      	ldr	r3, [pc, #156]	; (8001e64 <EXIT_CALLBACK+0xcc>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d142      	bne.n	8001e54 <EXIT_CALLBACK+0xbc>
		buffer[1]-='0';
 8001dce:	4b26      	ldr	r3, [pc, #152]	; (8001e68 <EXIT_CALLBACK+0xd0>)
 8001dd0:	785b      	ldrb	r3, [r3, #1]
 8001dd2:	3b30      	subs	r3, #48	; 0x30
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	4b24      	ldr	r3, [pc, #144]	; (8001e68 <EXIT_CALLBACK+0xd0>)
 8001dd8:	705a      	strb	r2, [r3, #1]
		buffer[2]-='0';
 8001dda:	4b23      	ldr	r3, [pc, #140]	; (8001e68 <EXIT_CALLBACK+0xd0>)
 8001ddc:	789b      	ldrb	r3, [r3, #2]
 8001dde:	3b30      	subs	r3, #48	; 0x30
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	4b21      	ldr	r3, [pc, #132]	; (8001e68 <EXIT_CALLBACK+0xd0>)
 8001de4:	709a      	strb	r2, [r3, #2]
		N=0;
 8001de6:	4b1f      	ldr	r3, [pc, #124]	; (8001e64 <EXIT_CALLBACK+0xcc>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
		if(buffer[0]=='A')
 8001dec:	4b1e      	ldr	r3, [pc, #120]	; (8001e68 <EXIT_CALLBACK+0xd0>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b41      	cmp	r3, #65	; 0x41
 8001df2:	d112      	bne.n	8001e1a <EXIT_CALLBACK+0x82>
			Automatic(buffer[1]*10,buffer[2]*10);
 8001df4:	4b1c      	ldr	r3, [pc, #112]	; (8001e68 <EXIT_CALLBACK+0xd0>)
 8001df6:	785b      	ldrb	r3, [r3, #1]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	4618      	mov	r0, r3
 8001e04:	4b18      	ldr	r3, [pc, #96]	; (8001e68 <EXIT_CALLBACK+0xd0>)
 8001e06:	789b      	ldrb	r3, [r3, #2]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	4619      	mov	r1, r3
 8001e14:	f7ff ff82 	bl	8001d1c <Automatic>
			SendFrame(&Exit, &val);
		}

	}

}
 8001e18:	e01c      	b.n	8001e54 <EXIT_CALLBACK+0xbc>
		else if(buffer[0]=='M')
 8001e1a:	4b13      	ldr	r3, [pc, #76]	; (8001e68 <EXIT_CALLBACK+0xd0>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b4d      	cmp	r3, #77	; 0x4d
 8001e20:	d109      	bne.n	8001e36 <EXIT_CALLBACK+0x9e>
			Manual(buffer[1],buffer[2]);
 8001e22:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <EXIT_CALLBACK+0xd0>)
 8001e24:	785b      	ldrb	r3, [r3, #1]
 8001e26:	461a      	mov	r2, r3
 8001e28:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <EXIT_CALLBACK+0xd0>)
 8001e2a:	789b      	ldrb	r3, [r3, #2]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4610      	mov	r0, r2
 8001e30:	f7ff ff90 	bl	8001d54 <Manual>
}
 8001e34:	e00e      	b.n	8001e54 <EXIT_CALLBACK+0xbc>
		else if(buffer[0]=='T') {
 8001e36:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <EXIT_CALLBACK+0xd0>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b54      	cmp	r3, #84	; 0x54
 8001e3c:	d10a      	bne.n	8001e54 <EXIT_CALLBACK+0xbc>
			NumToStr(GetTemp(),&val);
 8001e3e:	f7ff ff13 	bl	8001c68 <GetTemp>
 8001e42:	4603      	mov	r3, r0
 8001e44:	4909      	ldr	r1, [pc, #36]	; (8001e6c <EXIT_CALLBACK+0xd4>)
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff ff56 	bl	8001cf8 <NumToStr>
			SendFrame(&Exit, &val);
 8001e4c:	4907      	ldr	r1, [pc, #28]	; (8001e6c <EXIT_CALLBACK+0xd4>)
 8001e4e:	4804      	ldr	r0, [pc, #16]	; (8001e60 <EXIT_CALLBACK+0xc8>)
 8001e50:	f7ff ff30 	bl	8001cb4 <SendFrame>
}
 8001e54:	bf00      	nop
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40004400 	.word	0x40004400
 8001e5c:	2000018f 	.word	0x2000018f
 8001e60:	20000004 	.word	0x20000004
 8001e64:	2000013c 	.word	0x2000013c
 8001e68:	2000018c 	.word	0x2000018c
 8001e6c:	20000140 	.word	0x20000140

08001e70 <main>:

uint16_t ADC_Value;
char STR[3];

int main(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0

	RCC_GPIOA_CLK_EN();
 8001e76:	4b43      	ldr	r3, [pc, #268]	; (8001f84 <main+0x114>)
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	4a42      	ldr	r2, [pc, #264]	; (8001f84 <main+0x114>)
 8001e7c:	f043 0304 	orr.w	r3, r3, #4
 8001e80:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8001e82:	4b40      	ldr	r3, [pc, #256]	; (8001f84 <main+0x114>)
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	4a3f      	ldr	r2, [pc, #252]	; (8001f84 <main+0x114>)
 8001e88:	f043 0308 	orr.w	r3, r3, #8
 8001e8c:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8001e8e:	4b3d      	ldr	r3, [pc, #244]	; (8001f84 <main+0x114>)
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	4a3c      	ldr	r2, [pc, #240]	; (8001f84 <main+0x114>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	6193      	str	r3, [r2, #24]
	MCAL_ADC_INIT(ADC1);
 8001e9a:	483b      	ldr	r0, [pc, #236]	; (8001f88 <main+0x118>)
 8001e9c:	f7fe fef8 	bl	8000c90 <MCAL_ADC_INIT>
	MCAL_UART_Init(&Exit);
 8001ea0:	483a      	ldr	r0, [pc, #232]	; (8001f8c <main+0x11c>)
 8001ea2:	f7ff fd89 	bl	80019b8 <MCAL_UART_Init>
	lcd_4bit_intialize(&lcd);
 8001ea6:	483a      	ldr	r0, [pc, #232]	; (8001f90 <main+0x120>)
 8001ea8:	f7fe fd58 	bl	800095c <lcd_4bit_intialize>
	gpio_pin_intialize(&lamp);
 8001eac:	4839      	ldr	r0, [pc, #228]	; (8001f94 <main+0x124>)
 8001eae:	f7ff f8a1 	bl	8000ff4 <gpio_pin_intialize>

	uint16 Temp=GetTemp();
 8001eb2:	f7ff fed9 	bl	8001c68 <GetTemp>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	80fb      	strh	r3, [r7, #6]

	PWM(&PWM2, 2, 0);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2102      	movs	r1, #2
 8001ebe:	4836      	ldr	r0, [pc, #216]	; (8001f98 <main+0x128>)
 8001ec0:	f7ff fad8 	bl	8001474 <PWM>

	while (1){
		Temp=GetTemp();
 8001ec4:	f7ff fed0 	bl	8001c68 <GetTemp>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	80fb      	strh	r3, [r7, #6]
		NumToStr(Temp,&STR);
 8001ecc:	88fb      	ldrh	r3, [r7, #6]
 8001ece:	4933      	ldr	r1, [pc, #204]	; (8001f9c <main+0x12c>)
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff ff11 	bl	8001cf8 <NumToStr>
		lcd_4bit_send_string_pos(&lcd, 1, 1, "      ");
 8001ed6:	4b32      	ldr	r3, [pc, #200]	; (8001fa0 <main+0x130>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	2101      	movs	r1, #1
 8001edc:	482c      	ldr	r0, [pc, #176]	; (8001f90 <main+0x120>)
 8001ede:	f7fe fe07 	bl	8000af0 <lcd_4bit_send_string_pos>
		while (Automated){
 8001ee2:	e049      	b.n	8001f78 <main+0x108>
			uint16 Temp=GetTemp();
 8001ee4:	f7ff fec0 	bl	8001c68 <GetTemp>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	80bb      	strh	r3, [r7, #4]
			NumToStr(Temp,&STR);
 8001eec:	88bb      	ldrh	r3, [r7, #4]
 8001eee:	492b      	ldr	r1, [pc, #172]	; (8001f9c <main+0x12c>)
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff01 	bl	8001cf8 <NumToStr>
			lcd_4bit_send_string_pos(&lcd, 2, 1, STR);
 8001ef6:	4b29      	ldr	r3, [pc, #164]	; (8001f9c <main+0x12c>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	2102      	movs	r1, #2
 8001efc:	4824      	ldr	r0, [pc, #144]	; (8001f90 <main+0x120>)
 8001efe:	f7fe fdf7 	bl	8000af0 <lcd_4bit_send_string_pos>
			if (Temp<MinTemp){
 8001f02:	4b28      	ldr	r3, [pc, #160]	; (8001fa4 <main+0x134>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	88ba      	ldrh	r2, [r7, #4]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d20f      	bcs.n	8001f2e <main+0xbe>
				lcd_4bit_send_string_pos(&lcd, 1, 1, "Cold  ");
 8001f0e:	4b26      	ldr	r3, [pc, #152]	; (8001fa8 <main+0x138>)
 8001f10:	2201      	movs	r2, #1
 8001f12:	2101      	movs	r1, #1
 8001f14:	481e      	ldr	r0, [pc, #120]	; (8001f90 <main+0x120>)
 8001f16:	f7fe fdeb 	bl	8000af0 <lcd_4bit_send_string_pos>
				PWM(&PWM2, 2, 0);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2102      	movs	r1, #2
 8001f1e:	481e      	ldr	r0, [pc, #120]	; (8001f98 <main+0x128>)
 8001f20:	f7ff faa8 	bl	8001474 <PWM>
				gpio_pin_write_logic(&lamp, 1);
 8001f24:	2101      	movs	r1, #1
 8001f26:	481b      	ldr	r0, [pc, #108]	; (8001f94 <main+0x124>)
 8001f28:	f7ff f8f8 	bl	800111c <gpio_pin_write_logic>
 8001f2c:	e024      	b.n	8001f78 <main+0x108>
			}
			else if (Temp>MaxTemp){
 8001f2e:	4b1f      	ldr	r3, [pc, #124]	; (8001fac <main+0x13c>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	88ba      	ldrh	r2, [r7, #4]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d90f      	bls.n	8001f5a <main+0xea>
				lcd_4bit_send_string_pos(&lcd, 1, 1, "Hot   ");
 8001f3a:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <main+0x140>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	2101      	movs	r1, #1
 8001f40:	4813      	ldr	r0, [pc, #76]	; (8001f90 <main+0x120>)
 8001f42:	f7fe fdd5 	bl	8000af0 <lcd_4bit_send_string_pos>
				PWM(&PWM2, 2, 100);
 8001f46:	2264      	movs	r2, #100	; 0x64
 8001f48:	2102      	movs	r1, #2
 8001f4a:	4813      	ldr	r0, [pc, #76]	; (8001f98 <main+0x128>)
 8001f4c:	f7ff fa92 	bl	8001474 <PWM>
				gpio_pin_write_logic(&lamp, 0);
 8001f50:	2100      	movs	r1, #0
 8001f52:	4810      	ldr	r0, [pc, #64]	; (8001f94 <main+0x124>)
 8001f54:	f7ff f8e2 	bl	800111c <gpio_pin_write_logic>
 8001f58:	e00e      	b.n	8001f78 <main+0x108>

			}
			else {
				lcd_4bit_send_string_pos(&lcd, 1, 1, "Normal");
 8001f5a:	4b16      	ldr	r3, [pc, #88]	; (8001fb4 <main+0x144>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	2101      	movs	r1, #1
 8001f60:	480b      	ldr	r0, [pc, #44]	; (8001f90 <main+0x120>)
 8001f62:	f7fe fdc5 	bl	8000af0 <lcd_4bit_send_string_pos>
				gpio_pin_write_logic(&lamp, 0);
 8001f66:	2100      	movs	r1, #0
 8001f68:	480a      	ldr	r0, [pc, #40]	; (8001f94 <main+0x124>)
 8001f6a:	f7ff f8d7 	bl	800111c <gpio_pin_write_logic>
				PWM(&PWM2, 2, 0);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2102      	movs	r1, #2
 8001f72:	4809      	ldr	r0, [pc, #36]	; (8001f98 <main+0x128>)
 8001f74:	f7ff fa7e 	bl	8001474 <PWM>
		while (Automated){
 8001f78:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <main+0x148>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1b1      	bne.n	8001ee4 <main+0x74>
	while (1){
 8001f80:	e7a0      	b.n	8001ec4 <main+0x54>
 8001f82:	bf00      	nop
 8001f84:	40021000 	.word	0x40021000
 8001f88:	40012400 	.word	0x40012400
 8001f8c:	20000004 	.word	0x20000004
 8001f90:	20000030 	.word	0x20000030
 8001f94:	20000028 	.word	0x20000028
 8001f98:	2000001c 	.word	0x2000001c
 8001f9c:	20000198 	.word	0x20000198
 8001fa0:	08002914 	.word	0x08002914
 8001fa4:	20000190 	.word	0x20000190
 8001fa8:	0800291c 	.word	0x0800291c
 8001fac:	20000191 	.word	0x20000191
 8001fb0:	08002924 	.word	0x08002924
 8001fb4:	0800292c 	.word	0x0800292c
 8001fb8:	20000000 	.word	0x20000000

08001fbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fc4:	4a14      	ldr	r2, [pc, #80]	; (8002018 <_sbrk+0x5c>)
 8001fc6:	4b15      	ldr	r3, [pc, #84]	; (800201c <_sbrk+0x60>)
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fd0:	4b13      	ldr	r3, [pc, #76]	; (8002020 <_sbrk+0x64>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d102      	bne.n	8001fde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fd8:	4b11      	ldr	r3, [pc, #68]	; (8002020 <_sbrk+0x64>)
 8001fda:	4a12      	ldr	r2, [pc, #72]	; (8002024 <_sbrk+0x68>)
 8001fdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <_sbrk+0x64>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d207      	bcs.n	8001ffc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fec:	f000 f846 	bl	800207c <__errno>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	230c      	movs	r3, #12
 8001ff4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8001ffa:	e009      	b.n	8002010 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ffc:	4b08      	ldr	r3, [pc, #32]	; (8002020 <_sbrk+0x64>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002002:	4b07      	ldr	r3, [pc, #28]	; (8002020 <_sbrk+0x64>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	4a05      	ldr	r2, [pc, #20]	; (8002020 <_sbrk+0x64>)
 800200c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800200e:	68fb      	ldr	r3, [r7, #12]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20002800 	.word	0x20002800
 800201c:	00000400 	.word	0x00000400
 8002020:	20000144 	.word	0x20000144
 8002024:	200001a0 	.word	0x200001a0

08002028 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002028:	480d      	ldr	r0, [pc, #52]	; (8002060 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800202a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800202c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002030:	480c      	ldr	r0, [pc, #48]	; (8002064 <LoopForever+0x6>)
  ldr r1, =_edata
 8002032:	490d      	ldr	r1, [pc, #52]	; (8002068 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002034:	4a0d      	ldr	r2, [pc, #52]	; (800206c <LoopForever+0xe>)
  movs r3, #0
 8002036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002038:	e002      	b.n	8002040 <LoopCopyDataInit>

0800203a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800203a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800203c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800203e:	3304      	adds	r3, #4

08002040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002044:	d3f9      	bcc.n	800203a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002046:	4a0a      	ldr	r2, [pc, #40]	; (8002070 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002048:	4c0a      	ldr	r4, [pc, #40]	; (8002074 <LoopForever+0x16>)
  movs r3, #0
 800204a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800204c:	e001      	b.n	8002052 <LoopFillZerobss>

0800204e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800204e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002050:	3204      	adds	r2, #4

08002052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002054:	d3fb      	bcc.n	800204e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002056:	f000 f817 	bl	8002088 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800205a:	f7ff ff09 	bl	8001e70 <main>

0800205e <LoopForever>:

LoopForever:
    b LoopForever
 800205e:	e7fe      	b.n	800205e <LoopForever>
  ldr   r0, =_estack
 8002060:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8002064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002068:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 800206c:	08002988 	.word	0x08002988
  ldr r2, =_sbss
 8002070:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8002074:	200001a0 	.word	0x200001a0

08002078 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002078:	e7fe      	b.n	8002078 <ADC1_2_IRQHandler>
	...

0800207c <__errno>:
 800207c:	4b01      	ldr	r3, [pc, #4]	; (8002084 <__errno+0x8>)
 800207e:	6818      	ldr	r0, [r3, #0]
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	20000060 	.word	0x20000060

08002088 <__libc_init_array>:
 8002088:	b570      	push	{r4, r5, r6, lr}
 800208a:	2500      	movs	r5, #0
 800208c:	4e0c      	ldr	r6, [pc, #48]	; (80020c0 <__libc_init_array+0x38>)
 800208e:	4c0d      	ldr	r4, [pc, #52]	; (80020c4 <__libc_init_array+0x3c>)
 8002090:	1ba4      	subs	r4, r4, r6
 8002092:	10a4      	asrs	r4, r4, #2
 8002094:	42a5      	cmp	r5, r4
 8002096:	d109      	bne.n	80020ac <__libc_init_array+0x24>
 8002098:	f000 fc2c 	bl	80028f4 <_init>
 800209c:	2500      	movs	r5, #0
 800209e:	4e0a      	ldr	r6, [pc, #40]	; (80020c8 <__libc_init_array+0x40>)
 80020a0:	4c0a      	ldr	r4, [pc, #40]	; (80020cc <__libc_init_array+0x44>)
 80020a2:	1ba4      	subs	r4, r4, r6
 80020a4:	10a4      	asrs	r4, r4, #2
 80020a6:	42a5      	cmp	r5, r4
 80020a8:	d105      	bne.n	80020b6 <__libc_init_array+0x2e>
 80020aa:	bd70      	pop	{r4, r5, r6, pc}
 80020ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020b0:	4798      	blx	r3
 80020b2:	3501      	adds	r5, #1
 80020b4:	e7ee      	b.n	8002094 <__libc_init_array+0xc>
 80020b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020ba:	4798      	blx	r3
 80020bc:	3501      	adds	r5, #1
 80020be:	e7f2      	b.n	80020a6 <__libc_init_array+0x1e>
 80020c0:	08002980 	.word	0x08002980
 80020c4:	08002980 	.word	0x08002980
 80020c8:	08002980 	.word	0x08002980
 80020cc:	08002984 	.word	0x08002984

080020d0 <siprintf>:
 80020d0:	b40e      	push	{r1, r2, r3}
 80020d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80020d6:	b500      	push	{lr}
 80020d8:	b09c      	sub	sp, #112	; 0x70
 80020da:	ab1d      	add	r3, sp, #116	; 0x74
 80020dc:	9002      	str	r0, [sp, #8]
 80020de:	9006      	str	r0, [sp, #24]
 80020e0:	9107      	str	r1, [sp, #28]
 80020e2:	9104      	str	r1, [sp, #16]
 80020e4:	4808      	ldr	r0, [pc, #32]	; (8002108 <siprintf+0x38>)
 80020e6:	4909      	ldr	r1, [pc, #36]	; (800210c <siprintf+0x3c>)
 80020e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80020ec:	9105      	str	r1, [sp, #20]
 80020ee:	6800      	ldr	r0, [r0, #0]
 80020f0:	a902      	add	r1, sp, #8
 80020f2:	9301      	str	r3, [sp, #4]
 80020f4:	f000 f866 	bl	80021c4 <_svfiprintf_r>
 80020f8:	2200      	movs	r2, #0
 80020fa:	9b02      	ldr	r3, [sp, #8]
 80020fc:	701a      	strb	r2, [r3, #0]
 80020fe:	b01c      	add	sp, #112	; 0x70
 8002100:	f85d eb04 	ldr.w	lr, [sp], #4
 8002104:	b003      	add	sp, #12
 8002106:	4770      	bx	lr
 8002108:	20000060 	.word	0x20000060
 800210c:	ffff0208 	.word	0xffff0208

08002110 <__ssputs_r>:
 8002110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002114:	688e      	ldr	r6, [r1, #8]
 8002116:	4682      	mov	sl, r0
 8002118:	429e      	cmp	r6, r3
 800211a:	460c      	mov	r4, r1
 800211c:	4690      	mov	r8, r2
 800211e:	4699      	mov	r9, r3
 8002120:	d837      	bhi.n	8002192 <__ssputs_r+0x82>
 8002122:	898a      	ldrh	r2, [r1, #12]
 8002124:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002128:	d031      	beq.n	800218e <__ssputs_r+0x7e>
 800212a:	2302      	movs	r3, #2
 800212c:	6825      	ldr	r5, [r4, #0]
 800212e:	6909      	ldr	r1, [r1, #16]
 8002130:	1a6f      	subs	r7, r5, r1
 8002132:	6965      	ldr	r5, [r4, #20]
 8002134:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002138:	fb95 f5f3 	sdiv	r5, r5, r3
 800213c:	f109 0301 	add.w	r3, r9, #1
 8002140:	443b      	add	r3, r7
 8002142:	429d      	cmp	r5, r3
 8002144:	bf38      	it	cc
 8002146:	461d      	movcc	r5, r3
 8002148:	0553      	lsls	r3, r2, #21
 800214a:	d530      	bpl.n	80021ae <__ssputs_r+0x9e>
 800214c:	4629      	mov	r1, r5
 800214e:	f000 fb37 	bl	80027c0 <_malloc_r>
 8002152:	4606      	mov	r6, r0
 8002154:	b950      	cbnz	r0, 800216c <__ssputs_r+0x5c>
 8002156:	230c      	movs	r3, #12
 8002158:	f04f 30ff 	mov.w	r0, #4294967295
 800215c:	f8ca 3000 	str.w	r3, [sl]
 8002160:	89a3      	ldrh	r3, [r4, #12]
 8002162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002166:	81a3      	strh	r3, [r4, #12]
 8002168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800216c:	463a      	mov	r2, r7
 800216e:	6921      	ldr	r1, [r4, #16]
 8002170:	f000 fab6 	bl	80026e0 <memcpy>
 8002174:	89a3      	ldrh	r3, [r4, #12]
 8002176:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800217a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800217e:	81a3      	strh	r3, [r4, #12]
 8002180:	6126      	str	r6, [r4, #16]
 8002182:	443e      	add	r6, r7
 8002184:	6026      	str	r6, [r4, #0]
 8002186:	464e      	mov	r6, r9
 8002188:	6165      	str	r5, [r4, #20]
 800218a:	1bed      	subs	r5, r5, r7
 800218c:	60a5      	str	r5, [r4, #8]
 800218e:	454e      	cmp	r6, r9
 8002190:	d900      	bls.n	8002194 <__ssputs_r+0x84>
 8002192:	464e      	mov	r6, r9
 8002194:	4632      	mov	r2, r6
 8002196:	4641      	mov	r1, r8
 8002198:	6820      	ldr	r0, [r4, #0]
 800219a:	f000 faac 	bl	80026f6 <memmove>
 800219e:	68a3      	ldr	r3, [r4, #8]
 80021a0:	2000      	movs	r0, #0
 80021a2:	1b9b      	subs	r3, r3, r6
 80021a4:	60a3      	str	r3, [r4, #8]
 80021a6:	6823      	ldr	r3, [r4, #0]
 80021a8:	441e      	add	r6, r3
 80021aa:	6026      	str	r6, [r4, #0]
 80021ac:	e7dc      	b.n	8002168 <__ssputs_r+0x58>
 80021ae:	462a      	mov	r2, r5
 80021b0:	f000 fb60 	bl	8002874 <_realloc_r>
 80021b4:	4606      	mov	r6, r0
 80021b6:	2800      	cmp	r0, #0
 80021b8:	d1e2      	bne.n	8002180 <__ssputs_r+0x70>
 80021ba:	6921      	ldr	r1, [r4, #16]
 80021bc:	4650      	mov	r0, sl
 80021be:	f000 fab3 	bl	8002728 <_free_r>
 80021c2:	e7c8      	b.n	8002156 <__ssputs_r+0x46>

080021c4 <_svfiprintf_r>:
 80021c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021c8:	461d      	mov	r5, r3
 80021ca:	898b      	ldrh	r3, [r1, #12]
 80021cc:	b09d      	sub	sp, #116	; 0x74
 80021ce:	061f      	lsls	r7, r3, #24
 80021d0:	4680      	mov	r8, r0
 80021d2:	460c      	mov	r4, r1
 80021d4:	4616      	mov	r6, r2
 80021d6:	d50f      	bpl.n	80021f8 <_svfiprintf_r+0x34>
 80021d8:	690b      	ldr	r3, [r1, #16]
 80021da:	b96b      	cbnz	r3, 80021f8 <_svfiprintf_r+0x34>
 80021dc:	2140      	movs	r1, #64	; 0x40
 80021de:	f000 faef 	bl	80027c0 <_malloc_r>
 80021e2:	6020      	str	r0, [r4, #0]
 80021e4:	6120      	str	r0, [r4, #16]
 80021e6:	b928      	cbnz	r0, 80021f4 <_svfiprintf_r+0x30>
 80021e8:	230c      	movs	r3, #12
 80021ea:	f8c8 3000 	str.w	r3, [r8]
 80021ee:	f04f 30ff 	mov.w	r0, #4294967295
 80021f2:	e0c8      	b.n	8002386 <_svfiprintf_r+0x1c2>
 80021f4:	2340      	movs	r3, #64	; 0x40
 80021f6:	6163      	str	r3, [r4, #20]
 80021f8:	2300      	movs	r3, #0
 80021fa:	9309      	str	r3, [sp, #36]	; 0x24
 80021fc:	2320      	movs	r3, #32
 80021fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002202:	2330      	movs	r3, #48	; 0x30
 8002204:	f04f 0b01 	mov.w	fp, #1
 8002208:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800220c:	9503      	str	r5, [sp, #12]
 800220e:	4637      	mov	r7, r6
 8002210:	463d      	mov	r5, r7
 8002212:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002216:	b10b      	cbz	r3, 800221c <_svfiprintf_r+0x58>
 8002218:	2b25      	cmp	r3, #37	; 0x25
 800221a:	d13e      	bne.n	800229a <_svfiprintf_r+0xd6>
 800221c:	ebb7 0a06 	subs.w	sl, r7, r6
 8002220:	d00b      	beq.n	800223a <_svfiprintf_r+0x76>
 8002222:	4653      	mov	r3, sl
 8002224:	4632      	mov	r2, r6
 8002226:	4621      	mov	r1, r4
 8002228:	4640      	mov	r0, r8
 800222a:	f7ff ff71 	bl	8002110 <__ssputs_r>
 800222e:	3001      	adds	r0, #1
 8002230:	f000 80a4 	beq.w	800237c <_svfiprintf_r+0x1b8>
 8002234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002236:	4453      	add	r3, sl
 8002238:	9309      	str	r3, [sp, #36]	; 0x24
 800223a:	783b      	ldrb	r3, [r7, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 809d 	beq.w	800237c <_svfiprintf_r+0x1b8>
 8002242:	2300      	movs	r3, #0
 8002244:	f04f 32ff 	mov.w	r2, #4294967295
 8002248:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800224c:	9304      	str	r3, [sp, #16]
 800224e:	9307      	str	r3, [sp, #28]
 8002250:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002254:	931a      	str	r3, [sp, #104]	; 0x68
 8002256:	462f      	mov	r7, r5
 8002258:	2205      	movs	r2, #5
 800225a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800225e:	4850      	ldr	r0, [pc, #320]	; (80023a0 <_svfiprintf_r+0x1dc>)
 8002260:	f000 fa30 	bl	80026c4 <memchr>
 8002264:	9b04      	ldr	r3, [sp, #16]
 8002266:	b9d0      	cbnz	r0, 800229e <_svfiprintf_r+0xda>
 8002268:	06d9      	lsls	r1, r3, #27
 800226a:	bf44      	itt	mi
 800226c:	2220      	movmi	r2, #32
 800226e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002272:	071a      	lsls	r2, r3, #28
 8002274:	bf44      	itt	mi
 8002276:	222b      	movmi	r2, #43	; 0x2b
 8002278:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800227c:	782a      	ldrb	r2, [r5, #0]
 800227e:	2a2a      	cmp	r2, #42	; 0x2a
 8002280:	d015      	beq.n	80022ae <_svfiprintf_r+0xea>
 8002282:	462f      	mov	r7, r5
 8002284:	2000      	movs	r0, #0
 8002286:	250a      	movs	r5, #10
 8002288:	9a07      	ldr	r2, [sp, #28]
 800228a:	4639      	mov	r1, r7
 800228c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002290:	3b30      	subs	r3, #48	; 0x30
 8002292:	2b09      	cmp	r3, #9
 8002294:	d94d      	bls.n	8002332 <_svfiprintf_r+0x16e>
 8002296:	b1b8      	cbz	r0, 80022c8 <_svfiprintf_r+0x104>
 8002298:	e00f      	b.n	80022ba <_svfiprintf_r+0xf6>
 800229a:	462f      	mov	r7, r5
 800229c:	e7b8      	b.n	8002210 <_svfiprintf_r+0x4c>
 800229e:	4a40      	ldr	r2, [pc, #256]	; (80023a0 <_svfiprintf_r+0x1dc>)
 80022a0:	463d      	mov	r5, r7
 80022a2:	1a80      	subs	r0, r0, r2
 80022a4:	fa0b f000 	lsl.w	r0, fp, r0
 80022a8:	4318      	orrs	r0, r3
 80022aa:	9004      	str	r0, [sp, #16]
 80022ac:	e7d3      	b.n	8002256 <_svfiprintf_r+0x92>
 80022ae:	9a03      	ldr	r2, [sp, #12]
 80022b0:	1d11      	adds	r1, r2, #4
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	9103      	str	r1, [sp, #12]
 80022b6:	2a00      	cmp	r2, #0
 80022b8:	db01      	blt.n	80022be <_svfiprintf_r+0xfa>
 80022ba:	9207      	str	r2, [sp, #28]
 80022bc:	e004      	b.n	80022c8 <_svfiprintf_r+0x104>
 80022be:	4252      	negs	r2, r2
 80022c0:	f043 0302 	orr.w	r3, r3, #2
 80022c4:	9207      	str	r2, [sp, #28]
 80022c6:	9304      	str	r3, [sp, #16]
 80022c8:	783b      	ldrb	r3, [r7, #0]
 80022ca:	2b2e      	cmp	r3, #46	; 0x2e
 80022cc:	d10c      	bne.n	80022e8 <_svfiprintf_r+0x124>
 80022ce:	787b      	ldrb	r3, [r7, #1]
 80022d0:	2b2a      	cmp	r3, #42	; 0x2a
 80022d2:	d133      	bne.n	800233c <_svfiprintf_r+0x178>
 80022d4:	9b03      	ldr	r3, [sp, #12]
 80022d6:	3702      	adds	r7, #2
 80022d8:	1d1a      	adds	r2, r3, #4
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	9203      	str	r2, [sp, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	bfb8      	it	lt
 80022e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80022e6:	9305      	str	r3, [sp, #20]
 80022e8:	4d2e      	ldr	r5, [pc, #184]	; (80023a4 <_svfiprintf_r+0x1e0>)
 80022ea:	2203      	movs	r2, #3
 80022ec:	7839      	ldrb	r1, [r7, #0]
 80022ee:	4628      	mov	r0, r5
 80022f0:	f000 f9e8 	bl	80026c4 <memchr>
 80022f4:	b138      	cbz	r0, 8002306 <_svfiprintf_r+0x142>
 80022f6:	2340      	movs	r3, #64	; 0x40
 80022f8:	1b40      	subs	r0, r0, r5
 80022fa:	fa03 f000 	lsl.w	r0, r3, r0
 80022fe:	9b04      	ldr	r3, [sp, #16]
 8002300:	3701      	adds	r7, #1
 8002302:	4303      	orrs	r3, r0
 8002304:	9304      	str	r3, [sp, #16]
 8002306:	7839      	ldrb	r1, [r7, #0]
 8002308:	2206      	movs	r2, #6
 800230a:	4827      	ldr	r0, [pc, #156]	; (80023a8 <_svfiprintf_r+0x1e4>)
 800230c:	1c7e      	adds	r6, r7, #1
 800230e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002312:	f000 f9d7 	bl	80026c4 <memchr>
 8002316:	2800      	cmp	r0, #0
 8002318:	d038      	beq.n	800238c <_svfiprintf_r+0x1c8>
 800231a:	4b24      	ldr	r3, [pc, #144]	; (80023ac <_svfiprintf_r+0x1e8>)
 800231c:	bb13      	cbnz	r3, 8002364 <_svfiprintf_r+0x1a0>
 800231e:	9b03      	ldr	r3, [sp, #12]
 8002320:	3307      	adds	r3, #7
 8002322:	f023 0307 	bic.w	r3, r3, #7
 8002326:	3308      	adds	r3, #8
 8002328:	9303      	str	r3, [sp, #12]
 800232a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800232c:	444b      	add	r3, r9
 800232e:	9309      	str	r3, [sp, #36]	; 0x24
 8002330:	e76d      	b.n	800220e <_svfiprintf_r+0x4a>
 8002332:	fb05 3202 	mla	r2, r5, r2, r3
 8002336:	2001      	movs	r0, #1
 8002338:	460f      	mov	r7, r1
 800233a:	e7a6      	b.n	800228a <_svfiprintf_r+0xc6>
 800233c:	2300      	movs	r3, #0
 800233e:	250a      	movs	r5, #10
 8002340:	4619      	mov	r1, r3
 8002342:	3701      	adds	r7, #1
 8002344:	9305      	str	r3, [sp, #20]
 8002346:	4638      	mov	r0, r7
 8002348:	f810 2b01 	ldrb.w	r2, [r0], #1
 800234c:	3a30      	subs	r2, #48	; 0x30
 800234e:	2a09      	cmp	r2, #9
 8002350:	d903      	bls.n	800235a <_svfiprintf_r+0x196>
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0c8      	beq.n	80022e8 <_svfiprintf_r+0x124>
 8002356:	9105      	str	r1, [sp, #20]
 8002358:	e7c6      	b.n	80022e8 <_svfiprintf_r+0x124>
 800235a:	fb05 2101 	mla	r1, r5, r1, r2
 800235e:	2301      	movs	r3, #1
 8002360:	4607      	mov	r7, r0
 8002362:	e7f0      	b.n	8002346 <_svfiprintf_r+0x182>
 8002364:	ab03      	add	r3, sp, #12
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	4622      	mov	r2, r4
 800236a:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <_svfiprintf_r+0x1ec>)
 800236c:	a904      	add	r1, sp, #16
 800236e:	4640      	mov	r0, r8
 8002370:	f3af 8000 	nop.w
 8002374:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002378:	4681      	mov	r9, r0
 800237a:	d1d6      	bne.n	800232a <_svfiprintf_r+0x166>
 800237c:	89a3      	ldrh	r3, [r4, #12]
 800237e:	065b      	lsls	r3, r3, #25
 8002380:	f53f af35 	bmi.w	80021ee <_svfiprintf_r+0x2a>
 8002384:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002386:	b01d      	add	sp, #116	; 0x74
 8002388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800238c:	ab03      	add	r3, sp, #12
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	4622      	mov	r2, r4
 8002392:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <_svfiprintf_r+0x1ec>)
 8002394:	a904      	add	r1, sp, #16
 8002396:	4640      	mov	r0, r8
 8002398:	f000 f882 	bl	80024a0 <_printf_i>
 800239c:	e7ea      	b.n	8002374 <_svfiprintf_r+0x1b0>
 800239e:	bf00      	nop
 80023a0:	0800294c 	.word	0x0800294c
 80023a4:	08002952 	.word	0x08002952
 80023a8:	08002956 	.word	0x08002956
 80023ac:	00000000 	.word	0x00000000
 80023b0:	08002111 	.word	0x08002111

080023b4 <_printf_common>:
 80023b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023b8:	4691      	mov	r9, r2
 80023ba:	461f      	mov	r7, r3
 80023bc:	688a      	ldr	r2, [r1, #8]
 80023be:	690b      	ldr	r3, [r1, #16]
 80023c0:	4606      	mov	r6, r0
 80023c2:	4293      	cmp	r3, r2
 80023c4:	bfb8      	it	lt
 80023c6:	4613      	movlt	r3, r2
 80023c8:	f8c9 3000 	str.w	r3, [r9]
 80023cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80023d0:	460c      	mov	r4, r1
 80023d2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80023d6:	b112      	cbz	r2, 80023de <_printf_common+0x2a>
 80023d8:	3301      	adds	r3, #1
 80023da:	f8c9 3000 	str.w	r3, [r9]
 80023de:	6823      	ldr	r3, [r4, #0]
 80023e0:	0699      	lsls	r1, r3, #26
 80023e2:	bf42      	ittt	mi
 80023e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80023e8:	3302      	addmi	r3, #2
 80023ea:	f8c9 3000 	strmi.w	r3, [r9]
 80023ee:	6825      	ldr	r5, [r4, #0]
 80023f0:	f015 0506 	ands.w	r5, r5, #6
 80023f4:	d107      	bne.n	8002406 <_printf_common+0x52>
 80023f6:	f104 0a19 	add.w	sl, r4, #25
 80023fa:	68e3      	ldr	r3, [r4, #12]
 80023fc:	f8d9 2000 	ldr.w	r2, [r9]
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	42ab      	cmp	r3, r5
 8002404:	dc29      	bgt.n	800245a <_printf_common+0xa6>
 8002406:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800240a:	6822      	ldr	r2, [r4, #0]
 800240c:	3300      	adds	r3, #0
 800240e:	bf18      	it	ne
 8002410:	2301      	movne	r3, #1
 8002412:	0692      	lsls	r2, r2, #26
 8002414:	d42e      	bmi.n	8002474 <_printf_common+0xc0>
 8002416:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800241a:	4639      	mov	r1, r7
 800241c:	4630      	mov	r0, r6
 800241e:	47c0      	blx	r8
 8002420:	3001      	adds	r0, #1
 8002422:	d021      	beq.n	8002468 <_printf_common+0xb4>
 8002424:	6823      	ldr	r3, [r4, #0]
 8002426:	68e5      	ldr	r5, [r4, #12]
 8002428:	f003 0306 	and.w	r3, r3, #6
 800242c:	2b04      	cmp	r3, #4
 800242e:	bf18      	it	ne
 8002430:	2500      	movne	r5, #0
 8002432:	f8d9 2000 	ldr.w	r2, [r9]
 8002436:	f04f 0900 	mov.w	r9, #0
 800243a:	bf08      	it	eq
 800243c:	1aad      	subeq	r5, r5, r2
 800243e:	68a3      	ldr	r3, [r4, #8]
 8002440:	6922      	ldr	r2, [r4, #16]
 8002442:	bf08      	it	eq
 8002444:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002448:	4293      	cmp	r3, r2
 800244a:	bfc4      	itt	gt
 800244c:	1a9b      	subgt	r3, r3, r2
 800244e:	18ed      	addgt	r5, r5, r3
 8002450:	341a      	adds	r4, #26
 8002452:	454d      	cmp	r5, r9
 8002454:	d11a      	bne.n	800248c <_printf_common+0xd8>
 8002456:	2000      	movs	r0, #0
 8002458:	e008      	b.n	800246c <_printf_common+0xb8>
 800245a:	2301      	movs	r3, #1
 800245c:	4652      	mov	r2, sl
 800245e:	4639      	mov	r1, r7
 8002460:	4630      	mov	r0, r6
 8002462:	47c0      	blx	r8
 8002464:	3001      	adds	r0, #1
 8002466:	d103      	bne.n	8002470 <_printf_common+0xbc>
 8002468:	f04f 30ff 	mov.w	r0, #4294967295
 800246c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002470:	3501      	adds	r5, #1
 8002472:	e7c2      	b.n	80023fa <_printf_common+0x46>
 8002474:	2030      	movs	r0, #48	; 0x30
 8002476:	18e1      	adds	r1, r4, r3
 8002478:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800247c:	1c5a      	adds	r2, r3, #1
 800247e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002482:	4422      	add	r2, r4
 8002484:	3302      	adds	r3, #2
 8002486:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800248a:	e7c4      	b.n	8002416 <_printf_common+0x62>
 800248c:	2301      	movs	r3, #1
 800248e:	4622      	mov	r2, r4
 8002490:	4639      	mov	r1, r7
 8002492:	4630      	mov	r0, r6
 8002494:	47c0      	blx	r8
 8002496:	3001      	adds	r0, #1
 8002498:	d0e6      	beq.n	8002468 <_printf_common+0xb4>
 800249a:	f109 0901 	add.w	r9, r9, #1
 800249e:	e7d8      	b.n	8002452 <_printf_common+0x9e>

080024a0 <_printf_i>:
 80024a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80024a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80024a8:	460c      	mov	r4, r1
 80024aa:	7e09      	ldrb	r1, [r1, #24]
 80024ac:	b085      	sub	sp, #20
 80024ae:	296e      	cmp	r1, #110	; 0x6e
 80024b0:	4617      	mov	r7, r2
 80024b2:	4606      	mov	r6, r0
 80024b4:	4698      	mov	r8, r3
 80024b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80024b8:	f000 80b3 	beq.w	8002622 <_printf_i+0x182>
 80024bc:	d822      	bhi.n	8002504 <_printf_i+0x64>
 80024be:	2963      	cmp	r1, #99	; 0x63
 80024c0:	d036      	beq.n	8002530 <_printf_i+0x90>
 80024c2:	d80a      	bhi.n	80024da <_printf_i+0x3a>
 80024c4:	2900      	cmp	r1, #0
 80024c6:	f000 80b9 	beq.w	800263c <_printf_i+0x19c>
 80024ca:	2958      	cmp	r1, #88	; 0x58
 80024cc:	f000 8083 	beq.w	80025d6 <_printf_i+0x136>
 80024d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80024d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80024d8:	e032      	b.n	8002540 <_printf_i+0xa0>
 80024da:	2964      	cmp	r1, #100	; 0x64
 80024dc:	d001      	beq.n	80024e2 <_printf_i+0x42>
 80024de:	2969      	cmp	r1, #105	; 0x69
 80024e0:	d1f6      	bne.n	80024d0 <_printf_i+0x30>
 80024e2:	6820      	ldr	r0, [r4, #0]
 80024e4:	6813      	ldr	r3, [r2, #0]
 80024e6:	0605      	lsls	r5, r0, #24
 80024e8:	f103 0104 	add.w	r1, r3, #4
 80024ec:	d52a      	bpl.n	8002544 <_printf_i+0xa4>
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6011      	str	r1, [r2, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	da03      	bge.n	80024fe <_printf_i+0x5e>
 80024f6:	222d      	movs	r2, #45	; 0x2d
 80024f8:	425b      	negs	r3, r3
 80024fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80024fe:	486f      	ldr	r0, [pc, #444]	; (80026bc <_printf_i+0x21c>)
 8002500:	220a      	movs	r2, #10
 8002502:	e039      	b.n	8002578 <_printf_i+0xd8>
 8002504:	2973      	cmp	r1, #115	; 0x73
 8002506:	f000 809d 	beq.w	8002644 <_printf_i+0x1a4>
 800250a:	d808      	bhi.n	800251e <_printf_i+0x7e>
 800250c:	296f      	cmp	r1, #111	; 0x6f
 800250e:	d020      	beq.n	8002552 <_printf_i+0xb2>
 8002510:	2970      	cmp	r1, #112	; 0x70
 8002512:	d1dd      	bne.n	80024d0 <_printf_i+0x30>
 8002514:	6823      	ldr	r3, [r4, #0]
 8002516:	f043 0320 	orr.w	r3, r3, #32
 800251a:	6023      	str	r3, [r4, #0]
 800251c:	e003      	b.n	8002526 <_printf_i+0x86>
 800251e:	2975      	cmp	r1, #117	; 0x75
 8002520:	d017      	beq.n	8002552 <_printf_i+0xb2>
 8002522:	2978      	cmp	r1, #120	; 0x78
 8002524:	d1d4      	bne.n	80024d0 <_printf_i+0x30>
 8002526:	2378      	movs	r3, #120	; 0x78
 8002528:	4865      	ldr	r0, [pc, #404]	; (80026c0 <_printf_i+0x220>)
 800252a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800252e:	e055      	b.n	80025dc <_printf_i+0x13c>
 8002530:	6813      	ldr	r3, [r2, #0]
 8002532:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002536:	1d19      	adds	r1, r3, #4
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6011      	str	r1, [r2, #0]
 800253c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002540:	2301      	movs	r3, #1
 8002542:	e08c      	b.n	800265e <_printf_i+0x1be>
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f010 0f40 	tst.w	r0, #64	; 0x40
 800254a:	6011      	str	r1, [r2, #0]
 800254c:	bf18      	it	ne
 800254e:	b21b      	sxthne	r3, r3
 8002550:	e7cf      	b.n	80024f2 <_printf_i+0x52>
 8002552:	6813      	ldr	r3, [r2, #0]
 8002554:	6825      	ldr	r5, [r4, #0]
 8002556:	1d18      	adds	r0, r3, #4
 8002558:	6010      	str	r0, [r2, #0]
 800255a:	0628      	lsls	r0, r5, #24
 800255c:	d501      	bpl.n	8002562 <_printf_i+0xc2>
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	e002      	b.n	8002568 <_printf_i+0xc8>
 8002562:	0668      	lsls	r0, r5, #25
 8002564:	d5fb      	bpl.n	800255e <_printf_i+0xbe>
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	296f      	cmp	r1, #111	; 0x6f
 800256a:	bf14      	ite	ne
 800256c:	220a      	movne	r2, #10
 800256e:	2208      	moveq	r2, #8
 8002570:	4852      	ldr	r0, [pc, #328]	; (80026bc <_printf_i+0x21c>)
 8002572:	2100      	movs	r1, #0
 8002574:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002578:	6865      	ldr	r5, [r4, #4]
 800257a:	2d00      	cmp	r5, #0
 800257c:	60a5      	str	r5, [r4, #8]
 800257e:	f2c0 8095 	blt.w	80026ac <_printf_i+0x20c>
 8002582:	6821      	ldr	r1, [r4, #0]
 8002584:	f021 0104 	bic.w	r1, r1, #4
 8002588:	6021      	str	r1, [r4, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d13d      	bne.n	800260a <_printf_i+0x16a>
 800258e:	2d00      	cmp	r5, #0
 8002590:	f040 808e 	bne.w	80026b0 <_printf_i+0x210>
 8002594:	4665      	mov	r5, ip
 8002596:	2a08      	cmp	r2, #8
 8002598:	d10b      	bne.n	80025b2 <_printf_i+0x112>
 800259a:	6823      	ldr	r3, [r4, #0]
 800259c:	07db      	lsls	r3, r3, #31
 800259e:	d508      	bpl.n	80025b2 <_printf_i+0x112>
 80025a0:	6923      	ldr	r3, [r4, #16]
 80025a2:	6862      	ldr	r2, [r4, #4]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	bfde      	ittt	le
 80025a8:	2330      	movle	r3, #48	; 0x30
 80025aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80025ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80025b2:	ebac 0305 	sub.w	r3, ip, r5
 80025b6:	6123      	str	r3, [r4, #16]
 80025b8:	f8cd 8000 	str.w	r8, [sp]
 80025bc:	463b      	mov	r3, r7
 80025be:	aa03      	add	r2, sp, #12
 80025c0:	4621      	mov	r1, r4
 80025c2:	4630      	mov	r0, r6
 80025c4:	f7ff fef6 	bl	80023b4 <_printf_common>
 80025c8:	3001      	adds	r0, #1
 80025ca:	d14d      	bne.n	8002668 <_printf_i+0x1c8>
 80025cc:	f04f 30ff 	mov.w	r0, #4294967295
 80025d0:	b005      	add	sp, #20
 80025d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80025d6:	4839      	ldr	r0, [pc, #228]	; (80026bc <_printf_i+0x21c>)
 80025d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80025dc:	6813      	ldr	r3, [r2, #0]
 80025de:	6821      	ldr	r1, [r4, #0]
 80025e0:	1d1d      	adds	r5, r3, #4
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6015      	str	r5, [r2, #0]
 80025e6:	060a      	lsls	r2, r1, #24
 80025e8:	d50b      	bpl.n	8002602 <_printf_i+0x162>
 80025ea:	07ca      	lsls	r2, r1, #31
 80025ec:	bf44      	itt	mi
 80025ee:	f041 0120 	orrmi.w	r1, r1, #32
 80025f2:	6021      	strmi	r1, [r4, #0]
 80025f4:	b91b      	cbnz	r3, 80025fe <_printf_i+0x15e>
 80025f6:	6822      	ldr	r2, [r4, #0]
 80025f8:	f022 0220 	bic.w	r2, r2, #32
 80025fc:	6022      	str	r2, [r4, #0]
 80025fe:	2210      	movs	r2, #16
 8002600:	e7b7      	b.n	8002572 <_printf_i+0xd2>
 8002602:	064d      	lsls	r5, r1, #25
 8002604:	bf48      	it	mi
 8002606:	b29b      	uxthmi	r3, r3
 8002608:	e7ef      	b.n	80025ea <_printf_i+0x14a>
 800260a:	4665      	mov	r5, ip
 800260c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002610:	fb02 3311 	mls	r3, r2, r1, r3
 8002614:	5cc3      	ldrb	r3, [r0, r3]
 8002616:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800261a:	460b      	mov	r3, r1
 800261c:	2900      	cmp	r1, #0
 800261e:	d1f5      	bne.n	800260c <_printf_i+0x16c>
 8002620:	e7b9      	b.n	8002596 <_printf_i+0xf6>
 8002622:	6813      	ldr	r3, [r2, #0]
 8002624:	6825      	ldr	r5, [r4, #0]
 8002626:	1d18      	adds	r0, r3, #4
 8002628:	6961      	ldr	r1, [r4, #20]
 800262a:	6010      	str	r0, [r2, #0]
 800262c:	0628      	lsls	r0, r5, #24
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	d501      	bpl.n	8002636 <_printf_i+0x196>
 8002632:	6019      	str	r1, [r3, #0]
 8002634:	e002      	b.n	800263c <_printf_i+0x19c>
 8002636:	066a      	lsls	r2, r5, #25
 8002638:	d5fb      	bpl.n	8002632 <_printf_i+0x192>
 800263a:	8019      	strh	r1, [r3, #0]
 800263c:	2300      	movs	r3, #0
 800263e:	4665      	mov	r5, ip
 8002640:	6123      	str	r3, [r4, #16]
 8002642:	e7b9      	b.n	80025b8 <_printf_i+0x118>
 8002644:	6813      	ldr	r3, [r2, #0]
 8002646:	1d19      	adds	r1, r3, #4
 8002648:	6011      	str	r1, [r2, #0]
 800264a:	681d      	ldr	r5, [r3, #0]
 800264c:	6862      	ldr	r2, [r4, #4]
 800264e:	2100      	movs	r1, #0
 8002650:	4628      	mov	r0, r5
 8002652:	f000 f837 	bl	80026c4 <memchr>
 8002656:	b108      	cbz	r0, 800265c <_printf_i+0x1bc>
 8002658:	1b40      	subs	r0, r0, r5
 800265a:	6060      	str	r0, [r4, #4]
 800265c:	6863      	ldr	r3, [r4, #4]
 800265e:	6123      	str	r3, [r4, #16]
 8002660:	2300      	movs	r3, #0
 8002662:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002666:	e7a7      	b.n	80025b8 <_printf_i+0x118>
 8002668:	6923      	ldr	r3, [r4, #16]
 800266a:	462a      	mov	r2, r5
 800266c:	4639      	mov	r1, r7
 800266e:	4630      	mov	r0, r6
 8002670:	47c0      	blx	r8
 8002672:	3001      	adds	r0, #1
 8002674:	d0aa      	beq.n	80025cc <_printf_i+0x12c>
 8002676:	6823      	ldr	r3, [r4, #0]
 8002678:	079b      	lsls	r3, r3, #30
 800267a:	d413      	bmi.n	80026a4 <_printf_i+0x204>
 800267c:	68e0      	ldr	r0, [r4, #12]
 800267e:	9b03      	ldr	r3, [sp, #12]
 8002680:	4298      	cmp	r0, r3
 8002682:	bfb8      	it	lt
 8002684:	4618      	movlt	r0, r3
 8002686:	e7a3      	b.n	80025d0 <_printf_i+0x130>
 8002688:	2301      	movs	r3, #1
 800268a:	464a      	mov	r2, r9
 800268c:	4639      	mov	r1, r7
 800268e:	4630      	mov	r0, r6
 8002690:	47c0      	blx	r8
 8002692:	3001      	adds	r0, #1
 8002694:	d09a      	beq.n	80025cc <_printf_i+0x12c>
 8002696:	3501      	adds	r5, #1
 8002698:	68e3      	ldr	r3, [r4, #12]
 800269a:	9a03      	ldr	r2, [sp, #12]
 800269c:	1a9b      	subs	r3, r3, r2
 800269e:	42ab      	cmp	r3, r5
 80026a0:	dcf2      	bgt.n	8002688 <_printf_i+0x1e8>
 80026a2:	e7eb      	b.n	800267c <_printf_i+0x1dc>
 80026a4:	2500      	movs	r5, #0
 80026a6:	f104 0919 	add.w	r9, r4, #25
 80026aa:	e7f5      	b.n	8002698 <_printf_i+0x1f8>
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1ac      	bne.n	800260a <_printf_i+0x16a>
 80026b0:	7803      	ldrb	r3, [r0, #0]
 80026b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80026ba:	e76c      	b.n	8002596 <_printf_i+0xf6>
 80026bc:	0800295d 	.word	0x0800295d
 80026c0:	0800296e 	.word	0x0800296e

080026c4 <memchr>:
 80026c4:	b510      	push	{r4, lr}
 80026c6:	b2c9      	uxtb	r1, r1
 80026c8:	4402      	add	r2, r0
 80026ca:	4290      	cmp	r0, r2
 80026cc:	4603      	mov	r3, r0
 80026ce:	d101      	bne.n	80026d4 <memchr+0x10>
 80026d0:	2300      	movs	r3, #0
 80026d2:	e003      	b.n	80026dc <memchr+0x18>
 80026d4:	781c      	ldrb	r4, [r3, #0]
 80026d6:	3001      	adds	r0, #1
 80026d8:	428c      	cmp	r4, r1
 80026da:	d1f6      	bne.n	80026ca <memchr+0x6>
 80026dc:	4618      	mov	r0, r3
 80026de:	bd10      	pop	{r4, pc}

080026e0 <memcpy>:
 80026e0:	b510      	push	{r4, lr}
 80026e2:	1e43      	subs	r3, r0, #1
 80026e4:	440a      	add	r2, r1
 80026e6:	4291      	cmp	r1, r2
 80026e8:	d100      	bne.n	80026ec <memcpy+0xc>
 80026ea:	bd10      	pop	{r4, pc}
 80026ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80026f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80026f4:	e7f7      	b.n	80026e6 <memcpy+0x6>

080026f6 <memmove>:
 80026f6:	4288      	cmp	r0, r1
 80026f8:	b510      	push	{r4, lr}
 80026fa:	eb01 0302 	add.w	r3, r1, r2
 80026fe:	d807      	bhi.n	8002710 <memmove+0x1a>
 8002700:	1e42      	subs	r2, r0, #1
 8002702:	4299      	cmp	r1, r3
 8002704:	d00a      	beq.n	800271c <memmove+0x26>
 8002706:	f811 4b01 	ldrb.w	r4, [r1], #1
 800270a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800270e:	e7f8      	b.n	8002702 <memmove+0xc>
 8002710:	4283      	cmp	r3, r0
 8002712:	d9f5      	bls.n	8002700 <memmove+0xa>
 8002714:	1881      	adds	r1, r0, r2
 8002716:	1ad2      	subs	r2, r2, r3
 8002718:	42d3      	cmn	r3, r2
 800271a:	d100      	bne.n	800271e <memmove+0x28>
 800271c:	bd10      	pop	{r4, pc}
 800271e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002722:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002726:	e7f7      	b.n	8002718 <memmove+0x22>

08002728 <_free_r>:
 8002728:	b538      	push	{r3, r4, r5, lr}
 800272a:	4605      	mov	r5, r0
 800272c:	2900      	cmp	r1, #0
 800272e:	d043      	beq.n	80027b8 <_free_r+0x90>
 8002730:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002734:	1f0c      	subs	r4, r1, #4
 8002736:	2b00      	cmp	r3, #0
 8002738:	bfb8      	it	lt
 800273a:	18e4      	addlt	r4, r4, r3
 800273c:	f000 f8d0 	bl	80028e0 <__malloc_lock>
 8002740:	4a1e      	ldr	r2, [pc, #120]	; (80027bc <_free_r+0x94>)
 8002742:	6813      	ldr	r3, [r2, #0]
 8002744:	4610      	mov	r0, r2
 8002746:	b933      	cbnz	r3, 8002756 <_free_r+0x2e>
 8002748:	6063      	str	r3, [r4, #4]
 800274a:	6014      	str	r4, [r2, #0]
 800274c:	4628      	mov	r0, r5
 800274e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002752:	f000 b8c6 	b.w	80028e2 <__malloc_unlock>
 8002756:	42a3      	cmp	r3, r4
 8002758:	d90b      	bls.n	8002772 <_free_r+0x4a>
 800275a:	6821      	ldr	r1, [r4, #0]
 800275c:	1862      	adds	r2, r4, r1
 800275e:	4293      	cmp	r3, r2
 8002760:	bf01      	itttt	eq
 8002762:	681a      	ldreq	r2, [r3, #0]
 8002764:	685b      	ldreq	r3, [r3, #4]
 8002766:	1852      	addeq	r2, r2, r1
 8002768:	6022      	streq	r2, [r4, #0]
 800276a:	6063      	str	r3, [r4, #4]
 800276c:	6004      	str	r4, [r0, #0]
 800276e:	e7ed      	b.n	800274c <_free_r+0x24>
 8002770:	4613      	mov	r3, r2
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	b10a      	cbz	r2, 800277a <_free_r+0x52>
 8002776:	42a2      	cmp	r2, r4
 8002778:	d9fa      	bls.n	8002770 <_free_r+0x48>
 800277a:	6819      	ldr	r1, [r3, #0]
 800277c:	1858      	adds	r0, r3, r1
 800277e:	42a0      	cmp	r0, r4
 8002780:	d10b      	bne.n	800279a <_free_r+0x72>
 8002782:	6820      	ldr	r0, [r4, #0]
 8002784:	4401      	add	r1, r0
 8002786:	1858      	adds	r0, r3, r1
 8002788:	4282      	cmp	r2, r0
 800278a:	6019      	str	r1, [r3, #0]
 800278c:	d1de      	bne.n	800274c <_free_r+0x24>
 800278e:	6810      	ldr	r0, [r2, #0]
 8002790:	6852      	ldr	r2, [r2, #4]
 8002792:	4401      	add	r1, r0
 8002794:	6019      	str	r1, [r3, #0]
 8002796:	605a      	str	r2, [r3, #4]
 8002798:	e7d8      	b.n	800274c <_free_r+0x24>
 800279a:	d902      	bls.n	80027a2 <_free_r+0x7a>
 800279c:	230c      	movs	r3, #12
 800279e:	602b      	str	r3, [r5, #0]
 80027a0:	e7d4      	b.n	800274c <_free_r+0x24>
 80027a2:	6820      	ldr	r0, [r4, #0]
 80027a4:	1821      	adds	r1, r4, r0
 80027a6:	428a      	cmp	r2, r1
 80027a8:	bf01      	itttt	eq
 80027aa:	6811      	ldreq	r1, [r2, #0]
 80027ac:	6852      	ldreq	r2, [r2, #4]
 80027ae:	1809      	addeq	r1, r1, r0
 80027b0:	6021      	streq	r1, [r4, #0]
 80027b2:	6062      	str	r2, [r4, #4]
 80027b4:	605c      	str	r4, [r3, #4]
 80027b6:	e7c9      	b.n	800274c <_free_r+0x24>
 80027b8:	bd38      	pop	{r3, r4, r5, pc}
 80027ba:	bf00      	nop
 80027bc:	20000148 	.word	0x20000148

080027c0 <_malloc_r>:
 80027c0:	b570      	push	{r4, r5, r6, lr}
 80027c2:	1ccd      	adds	r5, r1, #3
 80027c4:	f025 0503 	bic.w	r5, r5, #3
 80027c8:	3508      	adds	r5, #8
 80027ca:	2d0c      	cmp	r5, #12
 80027cc:	bf38      	it	cc
 80027ce:	250c      	movcc	r5, #12
 80027d0:	2d00      	cmp	r5, #0
 80027d2:	4606      	mov	r6, r0
 80027d4:	db01      	blt.n	80027da <_malloc_r+0x1a>
 80027d6:	42a9      	cmp	r1, r5
 80027d8:	d903      	bls.n	80027e2 <_malloc_r+0x22>
 80027da:	230c      	movs	r3, #12
 80027dc:	6033      	str	r3, [r6, #0]
 80027de:	2000      	movs	r0, #0
 80027e0:	bd70      	pop	{r4, r5, r6, pc}
 80027e2:	f000 f87d 	bl	80028e0 <__malloc_lock>
 80027e6:	4a21      	ldr	r2, [pc, #132]	; (800286c <_malloc_r+0xac>)
 80027e8:	6814      	ldr	r4, [r2, #0]
 80027ea:	4621      	mov	r1, r4
 80027ec:	b991      	cbnz	r1, 8002814 <_malloc_r+0x54>
 80027ee:	4c20      	ldr	r4, [pc, #128]	; (8002870 <_malloc_r+0xb0>)
 80027f0:	6823      	ldr	r3, [r4, #0]
 80027f2:	b91b      	cbnz	r3, 80027fc <_malloc_r+0x3c>
 80027f4:	4630      	mov	r0, r6
 80027f6:	f000 f863 	bl	80028c0 <_sbrk_r>
 80027fa:	6020      	str	r0, [r4, #0]
 80027fc:	4629      	mov	r1, r5
 80027fe:	4630      	mov	r0, r6
 8002800:	f000 f85e 	bl	80028c0 <_sbrk_r>
 8002804:	1c43      	adds	r3, r0, #1
 8002806:	d124      	bne.n	8002852 <_malloc_r+0x92>
 8002808:	230c      	movs	r3, #12
 800280a:	4630      	mov	r0, r6
 800280c:	6033      	str	r3, [r6, #0]
 800280e:	f000 f868 	bl	80028e2 <__malloc_unlock>
 8002812:	e7e4      	b.n	80027de <_malloc_r+0x1e>
 8002814:	680b      	ldr	r3, [r1, #0]
 8002816:	1b5b      	subs	r3, r3, r5
 8002818:	d418      	bmi.n	800284c <_malloc_r+0x8c>
 800281a:	2b0b      	cmp	r3, #11
 800281c:	d90f      	bls.n	800283e <_malloc_r+0x7e>
 800281e:	600b      	str	r3, [r1, #0]
 8002820:	18cc      	adds	r4, r1, r3
 8002822:	50cd      	str	r5, [r1, r3]
 8002824:	4630      	mov	r0, r6
 8002826:	f000 f85c 	bl	80028e2 <__malloc_unlock>
 800282a:	f104 000b 	add.w	r0, r4, #11
 800282e:	1d23      	adds	r3, r4, #4
 8002830:	f020 0007 	bic.w	r0, r0, #7
 8002834:	1ac3      	subs	r3, r0, r3
 8002836:	d0d3      	beq.n	80027e0 <_malloc_r+0x20>
 8002838:	425a      	negs	r2, r3
 800283a:	50e2      	str	r2, [r4, r3]
 800283c:	e7d0      	b.n	80027e0 <_malloc_r+0x20>
 800283e:	684b      	ldr	r3, [r1, #4]
 8002840:	428c      	cmp	r4, r1
 8002842:	bf16      	itet	ne
 8002844:	6063      	strne	r3, [r4, #4]
 8002846:	6013      	streq	r3, [r2, #0]
 8002848:	460c      	movne	r4, r1
 800284a:	e7eb      	b.n	8002824 <_malloc_r+0x64>
 800284c:	460c      	mov	r4, r1
 800284e:	6849      	ldr	r1, [r1, #4]
 8002850:	e7cc      	b.n	80027ec <_malloc_r+0x2c>
 8002852:	1cc4      	adds	r4, r0, #3
 8002854:	f024 0403 	bic.w	r4, r4, #3
 8002858:	42a0      	cmp	r0, r4
 800285a:	d005      	beq.n	8002868 <_malloc_r+0xa8>
 800285c:	1a21      	subs	r1, r4, r0
 800285e:	4630      	mov	r0, r6
 8002860:	f000 f82e 	bl	80028c0 <_sbrk_r>
 8002864:	3001      	adds	r0, #1
 8002866:	d0cf      	beq.n	8002808 <_malloc_r+0x48>
 8002868:	6025      	str	r5, [r4, #0]
 800286a:	e7db      	b.n	8002824 <_malloc_r+0x64>
 800286c:	20000148 	.word	0x20000148
 8002870:	2000014c 	.word	0x2000014c

08002874 <_realloc_r>:
 8002874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002876:	4607      	mov	r7, r0
 8002878:	4614      	mov	r4, r2
 800287a:	460e      	mov	r6, r1
 800287c:	b921      	cbnz	r1, 8002888 <_realloc_r+0x14>
 800287e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002882:	4611      	mov	r1, r2
 8002884:	f7ff bf9c 	b.w	80027c0 <_malloc_r>
 8002888:	b922      	cbnz	r2, 8002894 <_realloc_r+0x20>
 800288a:	f7ff ff4d 	bl	8002728 <_free_r>
 800288e:	4625      	mov	r5, r4
 8002890:	4628      	mov	r0, r5
 8002892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002894:	f000 f826 	bl	80028e4 <_malloc_usable_size_r>
 8002898:	42a0      	cmp	r0, r4
 800289a:	d20f      	bcs.n	80028bc <_realloc_r+0x48>
 800289c:	4621      	mov	r1, r4
 800289e:	4638      	mov	r0, r7
 80028a0:	f7ff ff8e 	bl	80027c0 <_malloc_r>
 80028a4:	4605      	mov	r5, r0
 80028a6:	2800      	cmp	r0, #0
 80028a8:	d0f2      	beq.n	8002890 <_realloc_r+0x1c>
 80028aa:	4631      	mov	r1, r6
 80028ac:	4622      	mov	r2, r4
 80028ae:	f7ff ff17 	bl	80026e0 <memcpy>
 80028b2:	4631      	mov	r1, r6
 80028b4:	4638      	mov	r0, r7
 80028b6:	f7ff ff37 	bl	8002728 <_free_r>
 80028ba:	e7e9      	b.n	8002890 <_realloc_r+0x1c>
 80028bc:	4635      	mov	r5, r6
 80028be:	e7e7      	b.n	8002890 <_realloc_r+0x1c>

080028c0 <_sbrk_r>:
 80028c0:	b538      	push	{r3, r4, r5, lr}
 80028c2:	2300      	movs	r3, #0
 80028c4:	4c05      	ldr	r4, [pc, #20]	; (80028dc <_sbrk_r+0x1c>)
 80028c6:	4605      	mov	r5, r0
 80028c8:	4608      	mov	r0, r1
 80028ca:	6023      	str	r3, [r4, #0]
 80028cc:	f7ff fb76 	bl	8001fbc <_sbrk>
 80028d0:	1c43      	adds	r3, r0, #1
 80028d2:	d102      	bne.n	80028da <_sbrk_r+0x1a>
 80028d4:	6823      	ldr	r3, [r4, #0]
 80028d6:	b103      	cbz	r3, 80028da <_sbrk_r+0x1a>
 80028d8:	602b      	str	r3, [r5, #0]
 80028da:	bd38      	pop	{r3, r4, r5, pc}
 80028dc:	2000019c 	.word	0x2000019c

080028e0 <__malloc_lock>:
 80028e0:	4770      	bx	lr

080028e2 <__malloc_unlock>:
 80028e2:	4770      	bx	lr

080028e4 <_malloc_usable_size_r>:
 80028e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028e8:	1f18      	subs	r0, r3, #4
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	bfbc      	itt	lt
 80028ee:	580b      	ldrlt	r3, [r1, r0]
 80028f0:	18c0      	addlt	r0, r0, r3
 80028f2:	4770      	bx	lr

080028f4 <_init>:
 80028f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028f6:	bf00      	nop
 80028f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028fa:	bc08      	pop	{r3}
 80028fc:	469e      	mov	lr, r3
 80028fe:	4770      	bx	lr

08002900 <_fini>:
 8002900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002902:	bf00      	nop
 8002904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002906:	bc08      	pop	{r3}
 8002908:	469e      	mov	lr, r3
 800290a:	4770      	bx	lr
