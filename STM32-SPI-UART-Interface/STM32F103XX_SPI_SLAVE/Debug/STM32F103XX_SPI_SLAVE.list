
STM32F103XX_SPI_SLAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fec  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800111c  0800111c  0001111c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001134  08001134  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  08001134  08001134  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001134  08001134  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001134  08001134  00011134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001138  08001138  00011138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  0800113c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000040  0800117c  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  0800117c  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006bf7  00000000  00000000  00020069  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000eef  00000000  00000000  00026c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001394  00000000  00000000  00027b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002e8  00000000  00000000  00028ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000270  00000000  00000000  000291d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000010b1  00000000  00000000  00029440  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00003318  00000000  00000000  0002a4f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000cbdf  00000000  00000000  0002d809  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0003a3e8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000009e8  00000000  00000000  0003a464  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000040 	.word	0x20000040
 800014c:	00000000 	.word	0x00000000
 8000150:	08001104 	.word	0x08001104

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000044 	.word	0x20000044
 800016c:	08001104 	.word	0x08001104

08000170 <EXTI0_IRQHandler>:
///**===========			ISR  Functions        =========================
///**================================================================
// */

void EXTI0_IRQHandler (void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	//cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= 1<<0 ;
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[0]() ;
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	200000bc 	.word	0x200000bc

08000194 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void) {
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<1) ;
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[1]() ; }
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	200000bc 	.word	0x200000bc

080001b8 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler (void) {
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<2) ;
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[2]() ; }
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	200000bc 	.word	0x200000bc

080001dc <EXTI3_IRQHandler>:


void EXTI3_IRQHandler (void) {
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<3) ;
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[3]() ; }
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	200000bc 	.word	0x200000bc

08000200 <EXTI4_IRQHandler>:


void EXTI4_IRQHandler (void) {
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<4) ;
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]() ; }
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	200000bc 	.word	0x200000bc

08000224 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler (void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5 ) {	EXTI->PR |=  (1<<5)    ; GP_IRQ_CallBack[5]() ;   }
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	if (EXTI->PR & 1<<6 ) {	EXTI->PR |=  (1<<6)    ; GP_IRQ_CallBack[6]() ;   }
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	if (EXTI->PR & 1<<7 ) {	EXTI->PR |=  (1<<7)    ; GP_IRQ_CallBack[7]() ;   }
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	if (EXTI->PR & 1<<8 ) {	EXTI->PR |=  (1<<8)    ; GP_IRQ_CallBack[8]() ;   }
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	if (EXTI->PR & 1<<9 ) {	EXTI->PR |=  (1<<9)    ; GP_IRQ_CallBack[9]() ;   }
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3

}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	200000bc 	.word	0x200000bc

080002cc <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<10 ) {	EXTI->PR |=  (1<<10)    ; GP_IRQ_CallBack[10]() ;   }
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
	if (EXTI->PR & 1<<11 ) {	EXTI->PR |=  (1<<11)    ; GP_IRQ_CallBack[11]() ;   }
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
	if (EXTI->PR & 1<<12 ) {	EXTI->PR |=  (1<<12)    ; GP_IRQ_CallBack[12]() ;   }
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
	if (EXTI->PR & 1<<13 ) {	EXTI->PR |=  (1<<13)    ; GP_IRQ_CallBack[13]() ;   }
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
	if (EXTI->PR & 1<<14 ) {	EXTI->PR |=  (1<<14)    ; GP_IRQ_CallBack[14]() ;   }
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
	if (EXTI->PR & 1<<15 ) {	EXTI->PR |=  (1<<15)    ; GP_IRQ_CallBack[15]() ;   }
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3

}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	200000bc 	.word	0x200000bc

08000390 <Get_CRL_Position>:
 * =======================================================================================
 * 							Generic Functions
 * =======================================================================================
 */
uint8_t Get_CRL_Position(GPIO_Pin_Num PinNumber)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
	if (PinNumber > 7) PinNumber -=8 ;
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	2b07      	cmp	r3, #7
 800039e:	d902      	bls.n	80003a6 <Get_CRL_Position+0x16>
 80003a0:	79fb      	ldrb	r3, [r7, #7]
 80003a2:	3b08      	subs	r3, #8
 80003a4:	71fb      	strb	r3, [r7, #7]

	return (PinNumber * 4);
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	009b      	lsls	r3, r3, #2
 80003aa:	b2db      	uxtb	r3, r3

}
 80003ac:	4618      	mov	r0, r3
 80003ae:	370c      	adds	r7, #12
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bc80      	pop	{r7}
 80003b4:	4770      	bx	lr
	...

080003b8 <gpio_pin_intialize>:
 * @retval 			-none
 * Note				-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 					 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void gpio_pin_intialize(GPIO_PinConfig_t* PinConfig)
{
 80003b8:	b590      	push	{r4, r7, lr}
 80003ba:	b085      	sub	sp, #20
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]


	volatile uint32_t* configregister = NULL ;
 80003c0:	2300      	movs	r3, #0
 80003c2:	60fb      	str	r3, [r7, #12]
	volatile uint32_t conf =0;
 80003c4:	2300      	movs	r3, #0
 80003c6:	60bb      	str	r3, [r7, #8]

	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &(PinConfig->GPIO_Port->CRL)  : &(PinConfig->GPIO_Port->CRH);
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	791b      	ldrb	r3, [r3, #4]
 80003cc:	2b07      	cmp	r3, #7
 80003ce:	d802      	bhi.n	80003d6 <gpio_pin_intialize+0x1e>
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	e002      	b.n	80003dc <gpio_pin_intialize+0x24>
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	3304      	adds	r3, #4
 80003dc:	60fb      	str	r3, [r7, #12]

	//CNF0[1:0] MODE0[1:0=]   Clear the four Bits
	(*configregister) &= ~(0xf << Get_CRL_Position(PinConfig->GPIO_PinNumber) );
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	791b      	ldrb	r3, [r3, #4]
 80003e2:	4618      	mov	r0, r3
 80003e4:	f7ff ffd4 	bl	8000390 <Get_CRL_Position>
 80003e8:	4603      	mov	r3, r0
 80003ea:	461a      	mov	r2, r3
 80003ec:	230f      	movs	r3, #15
 80003ee:	4093      	lsls	r3, r2
 80003f0:	43da      	mvns	r2, r3
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	401a      	ands	r2, r3
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	601a      	str	r2, [r3, #0]

	switch (PinConfig->GPIO_MODE) {
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	795b      	ldrb	r3, [r3, #5]
 8000400:	2b08      	cmp	r3, #8
 8000402:	d85a      	bhi.n	80004ba <gpio_pin_intialize+0x102>
 8000404:	a201      	add	r2, pc, #4	; (adr r2, 800040c <gpio_pin_intialize+0x54>)
 8000406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800040a:	bf00      	nop
 800040c:	08000431 	.word	0x08000431
 8000410:	08000437 	.word	0x08000437
 8000414:	0800043d 	.word	0x0800043d
 8000418:	08000457 	.word	0x08000457
 800041c:	08000473 	.word	0x08000473
 8000420:	0800047f 	.word	0x0800047f
 8000424:	08000491 	.word	0x08000491
 8000428:	080004a3 	.word	0x080004a3
 800042c:	080004b5 	.word	0x080004b5
	case GPIO_ANALOG_MODE:
		conf = 0b0000 &0x0F;
 8000430:	2300      	movs	r3, #0
 8000432:	60bb      	str	r3, [r7, #8]
		break;
 8000434:	e042      	b.n	80004bc <gpio_pin_intialize+0x104>
	case GPIO_FLOATING_INPUT_MODE:
		conf = 0b0100 &0x0F;
 8000436:	2304      	movs	r3, #4
 8000438:	60bb      	str	r3, [r7, #8]
		break;
 800043a:	e03f      	b.n	80004bc <gpio_pin_intialize+0x104>
	case GPIO_INPUT_PULLUP_MODE:
		conf = 0b1000 &0x0F;
 800043c:	2308      	movs	r3, #8
 800043e:	60bb      	str	r3, [r7, #8]
		PinConfig->GPIO_Port->ODR |=PinConfig->GPIO_PinNumber ;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	68da      	ldr	r2, [r3, #12]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	791b      	ldrb	r3, [r3, #4]
 800044a:	4619      	mov	r1, r3
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	430a      	orrs	r2, r1
 8000452:	60da      	str	r2, [r3, #12]
		break;
 8000454:	e032      	b.n	80004bc <gpio_pin_intialize+0x104>
	case GPIO_INPUT_PULLDOWN_MODE:
		conf = 0b1000 &0x0F;
 8000456:	2308      	movs	r3, #8
 8000458:	60bb      	str	r3, [r7, #8]
		PinConfig->GPIO_Port->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	68da      	ldr	r2, [r3, #12]
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	791b      	ldrb	r3, [r3, #4]
 8000464:	43db      	mvns	r3, r3
 8000466:	4619      	mov	r1, r3
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	400a      	ands	r2, r1
 800046e:	60da      	str	r2, [r3, #12]
		break;
 8000470:	e024      	b.n	80004bc <gpio_pin_intialize+0x104>
	case GPIO_OUTPUT_PUSHPULL_MODE:
		conf = (((0b00<<2)| (PinConfig->GPIO_Output_Speed ))&0x0F);
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	799b      	ldrb	r3, [r3, #6]
 8000476:	f003 030f 	and.w	r3, r3, #15
 800047a:	60bb      	str	r3, [r7, #8]
		break;
 800047c:	e01e      	b.n	80004bc <gpio_pin_intialize+0x104>
	case GPIO_OUTPUT_OPENDRAIN_MODE:
		conf = (((0b01<<2)| (PinConfig->GPIO_Output_Speed ))&0x0F);
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	799b      	ldrb	r3, [r3, #6]
 8000482:	f043 0304 	orr.w	r3, r3, #4
 8000486:	b2db      	uxtb	r3, r3
 8000488:	f003 030f 	and.w	r3, r3, #15
 800048c:	60bb      	str	r3, [r7, #8]
		break;
 800048e:	e015      	b.n	80004bc <gpio_pin_intialize+0x104>
	case GPIO_ALT_OUTPUT_PUSHPULL_MODE:
		conf = (((0b10<<2)| (PinConfig->GPIO_Output_Speed ))&0x0F);
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	799b      	ldrb	r3, [r3, #6]
 8000494:	f043 0308 	orr.w	r3, r3, #8
 8000498:	b2db      	uxtb	r3, r3
 800049a:	f003 030f 	and.w	r3, r3, #15
 800049e:	60bb      	str	r3, [r7, #8]
		break;
 80004a0:	e00c      	b.n	80004bc <gpio_pin_intialize+0x104>
	case GPIO_ALT_OUTPUT_OPENDRAIN_MODE:
		conf = (((0b11<<2)| (PinConfig->GPIO_Output_Speed ))&0x0F);
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	799b      	ldrb	r3, [r3, #6]
 80004a6:	f043 030c 	orr.w	r3, r3, #12
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	f003 030f 	and.w	r3, r3, #15
 80004b0:	60bb      	str	r3, [r7, #8]
		break;
 80004b2:	e003      	b.n	80004bc <gpio_pin_intialize+0x104>
	case GPIO_ALT_INPUT_MODE:
		conf = (((0b01<<2) | 0x0) & 0x0f);
 80004b4:	2304      	movs	r3, #4
 80004b6:	60bb      	str	r3, [r7, #8]
		break;
 80004b8:	e000      	b.n	80004bc <gpio_pin_intialize+0x104>
	default:
		break;
 80004ba:	bf00      	nop
	}

	(*configregister) |= (  (  conf  ) << ( Get_CRL_Position( PinConfig->GPIO_PinNumber) ) ) ;
 80004bc:	68bc      	ldr	r4, [r7, #8]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	791b      	ldrb	r3, [r3, #4]
 80004c2:	4618      	mov	r0, r3
 80004c4:	f7ff ff64 	bl	8000390 <Get_CRL_Position>
 80004c8:	4603      	mov	r3, r0
 80004ca:	fa04 f203 	lsl.w	r2, r4, r3
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	431a      	orrs	r2, r3
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	601a      	str	r2, [r3, #0]

}
 80004d8:	bf00      	nop
 80004da:	3714      	adds	r7, #20
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd90      	pop	{r4, r7, pc}

080004e0 <gpio_pin_write_logic>:
 *@param [in] 			-Value: Pin Value
 *
 * @retval 			-none
 * Note				-none
 */
void gpio_pin_write_logic ( GPIO_PinConfig_t* PinConfig, logic_t logic){
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	460b      	mov	r3, r1
 80004ea:	70fb      	strb	r3, [r7, #3]

	if(logic == 1)
 80004ec:	78fb      	ldrb	r3, [r7, #3]
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d10d      	bne.n	800050e <gpio_pin_write_logic+0x2e>
		SET_BIT((PinConfig->GPIO_Port->ODR),(PinConfig->GPIO_PinNumber));
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	68d9      	ldr	r1, [r3, #12]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	791b      	ldrb	r3, [r3, #4]
 80004fc:	461a      	mov	r2, r3
 80004fe:	2301      	movs	r3, #1
 8000500:	fa03 f202 	lsl.w	r2, r3, r2
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	430a      	orrs	r2, r1
 800050a:	60da      	str	r2, [r3, #12]
	else
		CLEAR_BIT((PinConfig->GPIO_Port->ODR),(PinConfig->GPIO_PinNumber));


}
 800050c:	e00c      	b.n	8000528 <gpio_pin_write_logic+0x48>
		CLEAR_BIT((PinConfig->GPIO_Port->ODR),(PinConfig->GPIO_PinNumber));
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	68d9      	ldr	r1, [r3, #12]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	791b      	ldrb	r3, [r3, #4]
 8000518:	461a      	mov	r2, r3
 800051a:	2301      	movs	r3, #1
 800051c:	4093      	lsls	r3, r2
 800051e:	43da      	mvns	r2, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	400a      	ands	r2, r1
 8000526:	60da      	str	r2, [r3, #12]
}
 8000528:	bf00      	nop
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	bc80      	pop	{r7}
 8000530:	4770      	bx	lr

08000532 <delay_ms>:
	{
		return ERROR;
	}

}
void delay_ms(uint32_t time) {
 8000532:	b480      	push	{r7}
 8000534:	b085      	sub	sp, #20
 8000536:	af00      	add	r7, sp, #0
 8000538:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 800053a:	2300      	movs	r3, #0
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	e00b      	b.n	8000558 <delay_ms+0x26>
		for (j = 0; j < 255; j++)
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	e002      	b.n	800054c <delay_ms+0x1a>
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	3301      	adds	r3, #1
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	68bb      	ldr	r3, [r7, #8]
 800054e:	2bfe      	cmp	r3, #254	; 0xfe
 8000550:	d9f9      	bls.n	8000546 <delay_ms+0x14>
	for (i = 0; i < time; i++)
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	3301      	adds	r3, #1
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fa      	ldr	r2, [r7, #12]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	429a      	cmp	r2, r3
 800055e:	d3ef      	bcc.n	8000540 <delay_ms+0xe>
			;
}
 8000560:	bf00      	nop
 8000562:	3714      	adds	r7, #20
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr

0800056a <I2C1_ER_IRQHandler>:
	return (uint8_t) I2Cx->DR;
}


void I2C1_ER_IRQHandler (void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0

}
 800056e:	bf00      	nop
 8000570:	46bd      	mov	sp, r7
 8000572:	bc80      	pop	{r7}
 8000574:	4770      	bx	lr
	...

08000578 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler (void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af00      	add	r7, sp, #0
	volatile uint32_t dummy_read = 0 ;
 800057e:	2300      	movs	r3, #0
 8000580:	607b      	str	r3, [r7, #4]
	I2C_TypeDef* I2Cx = I2C1 ;
 8000582:	4b37      	ldr	r3, [pc, #220]	; (8000660 <I2C1_EV_IRQHandler+0xe8>)
 8000584:	617b      	str	r3, [r7, #20]
	//Interrupt handling for both master and slave mode of a device
	uint32_t temp1, temp2, temp3;

	temp1   = I2Cx->CR2 & (  I2C_CR2_ITEVTEN) ;
 8000586:	697b      	ldr	r3, [r7, #20]
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800058e:	613b      	str	r3, [r7, #16]
	temp2   = I2Cx->CR2 & ( I2C_CR2_ITBUFEN) ;
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000598:	60fb      	str	r3, [r7, #12]
	temp3  = I2Cx->SR1 & ( I2C_SR1_STOPF);
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	f003 0310 	and.w	r3, r3, #16
 80005a2:	60bb      	str	r3, [r7, #8]


	// Handle For interrupt generated by STOPF event
		// Note : Stop detection flag is applicable only slave mode
		if(temp1 && temp3)
 80005a4:	693b      	ldr	r3, [r7, #16]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d00a      	beq.n	80005c0 <I2C1_EV_IRQHandler+0x48>
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d007      	beq.n	80005c0 <I2C1_EV_IRQHandler+0x48>
		{
			//STOF flag is set
			//Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )
			I2Cx->CR1 |= 0x0000;
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	601a      	str	r2, [r3, #0]
			Slave_States(I2Cx,I2C_EV_STOP);
 80005b8:	2100      	movs	r1, #0
 80005ba:	6978      	ldr	r0, [r7, #20]
 80005bc:	f000 f852 	bl	8000664 <Slave_States>


		}
		//----------------------------------------------------------
		temp3  = I2Cx->SR1 & (I2C_SR1_ADDR);
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	695b      	ldr	r3, [r3, #20]
 80005c4:	f003 0302 	and.w	r3, r3, #2
 80005c8:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by ADDR event
		//Note : When master mode : Address is sent
		//		 When Slave mode   : Address matched with own address
		if(temp1 && temp3)
 80005ca:	693b      	ldr	r3, [r7, #16]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d012      	beq.n	80005f6 <I2C1_EV_IRQHandler+0x7e>
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d00f      	beq.n	80005f6 <I2C1_EV_IRQHandler+0x7e>
		{
			// interrupt is generated because of ADDR event
			//check for device mode
			if(I2Cx->SR2 & ( I2C_SR2_MSL))
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d109      	bne.n	80005f6 <I2C1_EV_IRQHandler+0x7e>

			}else
			{
				//slave mode
				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = I2Cx->SR1;
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	607b      	str	r3, [r7, #4]
				dummy_read = I2Cx->SR2;
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	607b      	str	r3, [r7, #4]
				Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 80005ee:	2102      	movs	r1, #2
 80005f0:	6978      	ldr	r0, [r7, #20]
 80005f2:	f000 f837 	bl	8000664 <Slave_States>

			}
		}
		//----------------------------------------------------------

		temp3  = I2Cx->SR1 & ( I2C_SR1_TXE);
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fe:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by TXE event
		if(temp1 && temp2 && temp3)
 8000600:	693b      	ldr	r3, [r7, #16]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d00f      	beq.n	8000626 <I2C1_EV_IRQHandler+0xae>
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d00c      	beq.n	8000626 <I2C1_EV_IRQHandler+0xae>
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d009      	beq.n	8000626 <I2C1_EV_IRQHandler+0xae>
		{
			//Check for device mode
			if(I2Cx->SR2 & (I2C_SR2_MSL))
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	699b      	ldr	r3, [r3, #24]
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	2b00      	cmp	r3, #0
 800061c:	d103      	bne.n	8000626 <I2C1_EV_IRQHandler+0xae>
			{

			}else
			{
				//slave
				Slave_States(I2Cx,I2C_EV_DATA_REQ);
 800061e:	2103      	movs	r1, #3
 8000620:	6978      	ldr	r0, [r7, #20]
 8000622:	f000 f81f 	bl	8000664 <Slave_States>
			}
		}

		//----------------------------------------------------------

		temp3  = I2Cx->SR1 & ( I2C_SR1_RXNE);
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800062e:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by 	SB=1, cleared by reading SR1 register followed by writing DR register with Address.
		if(temp1 && temp2 && temp3)
 8000630:	693b      	ldr	r3, [r7, #16]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d00f      	beq.n	8000656 <I2C1_EV_IRQHandler+0xde>
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d00c      	beq.n	8000656 <I2C1_EV_IRQHandler+0xde>
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d009      	beq.n	8000656 <I2C1_EV_IRQHandler+0xde>
		{
			//check device mode .
			if(I2Cx->SR2 & ( I2C_SR2_MSL))
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	699b      	ldr	r3, [r3, #24]
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	2b00      	cmp	r3, #0
 800064c:	d103      	bne.n	8000656 <I2C1_EV_IRQHandler+0xde>
				//The device is master

			}else
			{
				//slave
				Slave_States(I2Cx,I2C_EV_DATA_RCV);
 800064e:	2104      	movs	r1, #4
 8000650:	6978      	ldr	r0, [r7, #20]
 8000652:	f000 f807 	bl	8000664 <Slave_States>
			}
		}



}
 8000656:	bf00      	nop
 8000658:	3718      	adds	r7, #24
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40005400 	.word	0x40005400

08000664 <Slave_States>:


void Slave_States (I2C_TypeDef* I2Cx  ,Slave_State state)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	460b      	mov	r3, r1
 800066e:	70fb      	strb	r3, [r7, #3]
	uint8_t index =    I2Cx == I2C1 ? I2C1_INDEX: I2C2_INDEX ;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4a32      	ldr	r2, [pc, #200]	; (800073c <Slave_States+0xd8>)
 8000674:	4293      	cmp	r3, r2
 8000676:	bf14      	ite	ne
 8000678:	2301      	movne	r3, #1
 800067a:	2300      	moveq	r3, #0
 800067c:	b2db      	uxtb	r3, r3
 800067e:	73fb      	strb	r3, [r7, #15]

	switch (state)
 8000680:	78fb      	ldrb	r3, [r7, #3]
 8000682:	2b04      	cmp	r3, #4
 8000684:	d856      	bhi.n	8000734 <Slave_States+0xd0>
 8000686:	a201      	add	r2, pc, #4	; (adr r2, 800068c <Slave_States+0x28>)
 8000688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800068c:	080006a7 	.word	0x080006a7
 8000690:	080006a1 	.word	0x080006a1
 8000694:	080006cb 	.word	0x080006cb
 8000698:	080006e3 	.word	0x080006e3
 800069c:	08000707 	.word	0x08000707
	{

	case I2C_ERROR_AF:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	699b      	ldr	r3, [r3, #24]
		{
			//Slave Shouldn't Send anything else

		}

		break ;
 80006a4:	e046      	b.n	8000734 <Slave_States+0xd0>
	}

	case I2C_EV_STOP:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	f003 0304 	and.w	r3, r3, #4
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d03b      	beq.n	800072a <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is sent by the master
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_STOP) ;
 80006b2:	7bfa      	ldrb	r2, [r7, #15]
 80006b4:	4922      	ldr	r1, [pc, #136]	; (8000740 <Slave_States+0xdc>)
 80006b6:	4613      	mov	r3, r2
 80006b8:	00db      	lsls	r3, r3, #3
 80006ba:	4413      	add	r3, r2
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	440b      	add	r3, r1
 80006c0:	3320      	adds	r3, #32
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2000      	movs	r0, #0
 80006c6:	4798      	blx	r3
		}

		break ;
 80006c8:	e02f      	b.n	800072a <Slave_States+0xc6>
	}

	case I2C_EV_ADDR_Matched:
	{
		//Notify APP that the Stop Condition is sent by the master
		Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_ADDR_Matched) ;
 80006ca:	7bfa      	ldrb	r2, [r7, #15]
 80006cc:	491c      	ldr	r1, [pc, #112]	; (8000740 <Slave_States+0xdc>)
 80006ce:	4613      	mov	r3, r2
 80006d0:	00db      	lsls	r3, r3, #3
 80006d2:	4413      	add	r3, r2
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	440b      	add	r3, r1
 80006d8:	3320      	adds	r3, #32
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2002      	movs	r0, #2
 80006de:	4798      	blx	r3

		break ;
 80006e0:	e028      	b.n	8000734 <Slave_States+0xd0>
	}

	case I2C_EV_DATA_REQ:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	699b      	ldr	r3, [r3, #24]
 80006e6:	f003 0304 	and.w	r3, r3, #4
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d01f      	beq.n	800072e <Slave_States+0xca>
		{
			//the APP layer should send the data (MCAL_I2C_SlaveSendData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_REQ) ;
 80006ee:	7bfa      	ldrb	r2, [r7, #15]
 80006f0:	4913      	ldr	r1, [pc, #76]	; (8000740 <Slave_States+0xdc>)
 80006f2:	4613      	mov	r3, r2
 80006f4:	00db      	lsls	r3, r3, #3
 80006f6:	4413      	add	r3, r2
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	440b      	add	r3, r1
 80006fc:	3320      	adds	r3, #32
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2003      	movs	r0, #3
 8000702:	4798      	blx	r3
		}

		break ;
 8000704:	e013      	b.n	800072e <Slave_States+0xca>
	}
	case I2C_EV_DATA_RCV:
	{
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & ( I2C_SR2_TRA)))
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	2b00      	cmp	r3, #0
 8000710:	d10f      	bne.n	8000732 <Slave_States+0xce>
		{
			//the APP layer should read the data (MCAL_I2C_SlaveReceiveData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_RCV) ;
 8000712:	7bfa      	ldrb	r2, [r7, #15]
 8000714:	490a      	ldr	r1, [pc, #40]	; (8000740 <Slave_States+0xdc>)
 8000716:	4613      	mov	r3, r2
 8000718:	00db      	lsls	r3, r3, #3
 800071a:	4413      	add	r3, r2
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	440b      	add	r3, r1
 8000720:	3320      	adds	r3, #32
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2004      	movs	r0, #4
 8000726:	4798      	blx	r3
		}

		break ;
 8000728:	e003      	b.n	8000732 <Slave_States+0xce>
		break ;
 800072a:	bf00      	nop
 800072c:	e002      	b.n	8000734 <Slave_States+0xd0>
		break ;
 800072e:	bf00      	nop
 8000730:	e000      	b.n	8000734 <Slave_States+0xd0>
		break ;
 8000732:	bf00      	nop
	}
	}

}
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40005400 	.word	0x40005400
 8000740:	2000005c 	.word	0x2000005c

08000744 <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler (void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr

08000750 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler (void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0

}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr

0800075c <MCAL_RCC_GetSYS_CLCKFreq>:
 * 							Generic Functions
 * =======================================================================================
 */

uint32_t MCAL_RCC_GetSYS_CLCKFreq(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
//	Set and cleared by hardware to indicate which clock source is used as system clock.
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: Not applicable
	switch  ( (RCC->CFGR  >> 2  ) & 0b11 )
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <MCAL_RCC_GetSYS_CLCKFreq+0x30>)
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	089b      	lsrs	r3, r3, #2
 8000766:	f003 0303 	and.w	r3, r3, #3
 800076a:	2b01      	cmp	r3, #1
 800076c:	d006      	beq.n	800077c <MCAL_RCC_GetSYS_CLCKFreq+0x20>
 800076e:	2b01      	cmp	r3, #1
 8000770:	d302      	bcc.n	8000778 <MCAL_RCC_GetSYS_CLCKFreq+0x1c>
 8000772:	2b02      	cmp	r3, #2
 8000774:	d004      	beq.n	8000780 <MCAL_RCC_GetSYS_CLCKFreq+0x24>
 8000776:	e005      	b.n	8000784 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
	{
	case 0:

		return HSI_RC_Clk ;
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <MCAL_RCC_GetSYS_CLCKFreq+0x34>)
 800077a:	e003      	b.n	8000784 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	case 1:

		//todo need to calculate  it //HSE User Should Specify it
		return HSE_Clock ;
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 800077e:	e001      	b.n	8000784 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	case 2:

		//todo need to calculate  it PLLCLK and PLLMUL & PLL Source MUX
		return 16000000 ;
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 8000782:	e7ff      	b.n	8000784 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	}

}
 8000784:	4618      	mov	r0, r3
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr
 800078c:	40021000 	.word	0x40021000
 8000790:	007a1200 	.word	0x007a1200
 8000794:	00f42400 	.word	0x00f42400

08000798 <MCAL_RCC_GetHCLKFreq>:


uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_GetSYS_CLCKFreq() >> AHBPrescTable[ ( (RCC->CFGR >> 4 ) & 0xF) ]  ); //the first shift is multiplication}
 800079c:	f7ff ffde 	bl	800075c <MCAL_RCC_GetSYS_CLCKFreq>
 80007a0:	4601      	mov	r1, r0
 80007a2:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <MCAL_RCC_GetHCLKFreq+0x20>)
 80007a4:	685b      	ldr	r3, [r3, #4]
 80007a6:	091b      	lsrs	r3, r3, #4
 80007a8:	f003 030f 	and.w	r3, r3, #15
 80007ac:	4a03      	ldr	r2, [pc, #12]	; (80007bc <MCAL_RCC_GetHCLKFreq+0x24>)
 80007ae:	5cd3      	ldrb	r3, [r2, r3]
 80007b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40021000 	.word	0x40021000
 80007bc:	08001124 	.word	0x08001124

080007c0 <MCAL_RCC_GetPCLK1Freq>:

//APB Low speed clock (PCLK1).
//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 8 ) & 0b111) ]  ); //the first shift is multiplication
 80007c4:	f7ff ffe8 	bl	8000798 <MCAL_RCC_GetHCLKFreq>
 80007c8:	4601      	mov	r1, r0
 80007ca:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <MCAL_RCC_GetPCLK1Freq+0x20>)
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	0a1b      	lsrs	r3, r3, #8
 80007d0:	f003 0307 	and.w	r3, r3, #7
 80007d4:	4a03      	ldr	r2, [pc, #12]	; (80007e4 <MCAL_RCC_GetPCLK1Freq+0x24>)
 80007d6:	5cd3      	ldrb	r3, [r2, r3]
 80007d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80007dc:	4618      	mov	r0, r3
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40021000 	.word	0x40021000
 80007e4:	0800111c 	.word	0x0800111c

080007e8 <MCAL_RCC_GetPCLK2Freq>:

uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 11 ) & 0b111) ]  ); //the first shift is multiplication
 80007ec:	f7ff ffd4 	bl	8000798 <MCAL_RCC_GetHCLKFreq>
 80007f0:	4601      	mov	r1, r0
 80007f2:	4b05      	ldr	r3, [pc, #20]	; (8000808 <MCAL_RCC_GetPCLK2Freq+0x20>)
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	0adb      	lsrs	r3, r3, #11
 80007f8:	f003 0307 	and.w	r3, r3, #7
 80007fc:	4a03      	ldr	r2, [pc, #12]	; (800080c <MCAL_RCC_GetPCLK2Freq+0x24>)
 80007fe:	5cd3      	ldrb	r3, [r2, r3]
 8000800:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000804:	4618      	mov	r0, r3
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40021000 	.word	0x40021000
 800080c:	0800111c 	.word	0x0800111c

08000810 <MCAL_SPI_Init>:
 * @retval 			- None
 * Note 			- Supported for SPI FULL DUPLEX Master/Slave only & NSS Hardware/Software
 * 					- You have to configure RCC to select clock for the selected SPI Module
 */
void MCAL_SPI_Init( SPI_Config_t *Config)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	/* Safety for register, Using this technique for protect the peripheral form working before the full configurations */
	uint16_t tempReg_CR1 = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	81fb      	strh	r3, [r7, #14]
	uint16_t tempReg_CR2 = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	81bb      	strh	r3, [r7, #12]

	if(Config->SPIx == SPI1)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a5a      	ldr	r2, [pc, #360]	; (8000990 <MCAL_SPI_Init+0x180>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d106      	bne.n	8000838 <MCAL_SPI_Init+0x28>
	{
		/* 1. Open the SPI1 RCC Clock */
		RCC_SPI1_CLK_EN();
 800082a:	4b5a      	ldr	r3, [pc, #360]	; (8000994 <MCAL_SPI_Init+0x184>)
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	4a59      	ldr	r2, [pc, #356]	; (8000994 <MCAL_SPI_Init+0x184>)
 8000830:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000834:	6193      	str	r3, [r2, #24]
 8000836:	e00a      	b.n	800084e <MCAL_SPI_Init+0x3e>
	}
	else if(Config->SPIx == SPI2)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a56      	ldr	r2, [pc, #344]	; (8000998 <MCAL_SPI_Init+0x188>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d105      	bne.n	800084e <MCAL_SPI_Init+0x3e>
	{
		/* 1. Open the SPI1 RCC Clock */
		RCC_SPI2_CLK_EN();
 8000842:	4b54      	ldr	r3, [pc, #336]	; (8000994 <MCAL_SPI_Init+0x184>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	4a53      	ldr	r2, [pc, #332]	; (8000994 <MCAL_SPI_Init+0x184>)
 8000848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084c:	61d3      	str	r3, [r2, #28]
	}

	/* 2. Enable the SPI */
	tempReg_CR1 |= (uint16_t)(1<<6); 	/* Bit 6 SPE: SPI enable */
 800084e:	89fb      	ldrh	r3, [r7, #14]
 8000850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000854:	81fb      	strh	r3, [r7, #14]

	/* 3. Set Master or Slave */
	tempReg_CR1 |= Config->SPI_Mode;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	889a      	ldrh	r2, [r3, #4]
 800085a:	89fb      	ldrh	r3, [r7, #14]
 800085c:	4313      	orrs	r3, r2
 800085e:	81fb      	strh	r3, [r7, #14]

	/* 4. Set Communication Mode */
	tempReg_CR1 |= Config->Communication_Mode;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	88da      	ldrh	r2, [r3, #6]
 8000864:	89fb      	ldrh	r3, [r7, #14]
 8000866:	4313      	orrs	r3, r2
 8000868:	81fb      	strh	r3, [r7, #14]

	/* 5. Set Frame format */
	tempReg_CR1 |= Config->Frame_Format;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	891a      	ldrh	r2, [r3, #8]
 800086e:	89fb      	ldrh	r3, [r7, #14]
 8000870:	4313      	orrs	r3, r2
 8000872:	81fb      	strh	r3, [r7, #14]

	/* 6. Set Data size */
	tempReg_CR1 |= Config->Frame_Size;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	895a      	ldrh	r2, [r3, #10]
 8000878:	89fb      	ldrh	r3, [r7, #14]
 800087a:	4313      	orrs	r3, r2
 800087c:	81fb      	strh	r3, [r7, #14]

	/* 7. Set Clock Polarity */
	tempReg_CR1 |= Config->CLK_Polarity;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	899a      	ldrh	r2, [r3, #12]
 8000882:	89fb      	ldrh	r3, [r7, #14]
 8000884:	4313      	orrs	r3, r2
 8000886:	81fb      	strh	r3, [r7, #14]

	/* 8. Set Clock Phase */
	tempReg_CR1 |= Config->CLK_Phase;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	89da      	ldrh	r2, [r3, #14]
 800088c:	89fb      	ldrh	r3, [r7, #14]
 800088e:	4313      	orrs	r3, r2
 8000890:	81fb      	strh	r3, [r7, #14]

	/* 9. Set Slave Select Management */
	if(Config->NSS == NSS_HW_MASTER_SS_OUTPUT_ENABLED)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	8a1b      	ldrh	r3, [r3, #16]
 8000896:	2b04      	cmp	r3, #4
 8000898:	d105      	bne.n	80008a6 <MCAL_SPI_Init+0x96>
	{
		tempReg_CR2 |= Config->NSS;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	8a1a      	ldrh	r2, [r3, #16]
 800089e:	89bb      	ldrh	r3, [r7, #12]
 80008a0:	4313      	orrs	r3, r2
 80008a2:	81bb      	strh	r3, [r7, #12]
 80008a4:	e010      	b.n	80008c8 <MCAL_SPI_Init+0xb8>
	}
	else if(Config->NSS == NSS_HW_MASTER_SS_OUTPUT_DISABLED)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	8a1b      	ldrh	r3, [r3, #16]
 80008aa:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d105      	bne.n	80008be <MCAL_SPI_Init+0xae>
	{
		tempReg_CR2 &= Config->NSS;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	8a1a      	ldrh	r2, [r3, #16]
 80008b6:	89bb      	ldrh	r3, [r7, #12]
 80008b8:	4013      	ands	r3, r2
 80008ba:	81bb      	strh	r3, [r7, #12]
 80008bc:	e004      	b.n	80008c8 <MCAL_SPI_Init+0xb8>
	}
	else
	{
		tempReg_CR1 |= Config->NSS;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	8a1a      	ldrh	r2, [r3, #16]
 80008c2:	89fb      	ldrh	r3, [r7, #14]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	81fb      	strh	r3, [r7, #14]
	}

	/* 10. Set BoudRate Pre-scaler */
	tempReg_CR1 |= Config->BaudRate_Prescaler;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	8a5a      	ldrh	r2, [r3, #18]
 80008cc:	89fb      	ldrh	r3, [r7, #14]
 80008ce:	4313      	orrs	r3, r2
 80008d0:	81fb      	strh	r3, [r7, #14]

	/* 11. Set Interrupt Type */
	if(Config->ERRI_INT_EN || Config->RXNE_INT_EN || Config->TXE_INT_EN)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	7d1b      	ldrb	r3, [r3, #20]
 80008d6:	f003 0304 	and.w	r3, r3, #4
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d10d      	bne.n	80008fc <MCAL_SPI_Init+0xec>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	7d1b      	ldrb	r3, [r3, #20]
 80008e4:	f003 0302 	and.w	r3, r3, #2
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d106      	bne.n	80008fc <MCAL_SPI_Init+0xec>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	7d1b      	ldrb	r3, [r3, #20]
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d03c      	beq.n	8000976 <MCAL_SPI_Init+0x166>
	{
		SPI_INT_CALLBACK[0]=Config->SPI1_IRQ_CallBack;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	4a26      	ldr	r2, [pc, #152]	; (800099c <MCAL_SPI_Init+0x18c>)
 8000902:	6013      	str	r3, [r2, #0]
		SPI_INT_CALLBACK[1]=Config->SPI2_IRQ_CallBack;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	69db      	ldr	r3, [r3, #28]
 8000908:	4a24      	ldr	r2, [pc, #144]	; (800099c <MCAL_SPI_Init+0x18c>)
 800090a:	6053      	str	r3, [r2, #4]
		tempReg_CR2 |= (Config->ERRI_INT_EN <<5) |(Config->RXNE_INT_EN <<6) |(Config->TXE_INT_EN <<7);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	7d1b      	ldrb	r3, [r3, #20]
 8000910:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000914:	b2db      	uxtb	r3, r3
 8000916:	015b      	lsls	r3, r3, #5
 8000918:	b21a      	sxth	r2, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	7d1b      	ldrb	r3, [r3, #20]
 800091e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000922:	b2db      	uxtb	r3, r3
 8000924:	019b      	lsls	r3, r3, #6
 8000926:	b21b      	sxth	r3, r3
 8000928:	4313      	orrs	r3, r2
 800092a:	b21a      	sxth	r2, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	7d1b      	ldrb	r3, [r3, #20]
 8000930:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000934:	b2db      	uxtb	r3, r3
 8000936:	01db      	lsls	r3, r3, #7
 8000938:	b21b      	sxth	r3, r3
 800093a:	4313      	orrs	r3, r2
 800093c:	b21a      	sxth	r2, r3
 800093e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000942:	4313      	orrs	r3, r2
 8000944:	b21b      	sxth	r3, r3
 8000946:	81bb      	strh	r3, [r7, #12]

		/* 12. Open the global Interrupt for each peripheral */
		if (Config->SPIx == SPI1)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a10      	ldr	r2, [pc, #64]	; (8000990 <MCAL_SPI_Init+0x180>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d106      	bne.n	8000960 <MCAL_SPI_Init+0x150>
		{
			NVIC_IRQ35_SPI1_Enable;
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <MCAL_SPI_Init+0x190>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a12      	ldr	r2, [pc, #72]	; (80009a0 <MCAL_SPI_Init+0x190>)
 8000958:	f043 0308 	orr.w	r3, r3, #8
 800095c:	6013      	str	r3, [r2, #0]
 800095e:	e00a      	b.n	8000976 <MCAL_SPI_Init+0x166>
		}
		else if(Config->SPIx == SPI2)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a0c      	ldr	r2, [pc, #48]	; (8000998 <MCAL_SPI_Init+0x188>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d105      	bne.n	8000976 <MCAL_SPI_Init+0x166>
		{
			NVIC_IRQ36_SPI2_Enable;
 800096a:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <MCAL_SPI_Init+0x190>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a0c      	ldr	r2, [pc, #48]	; (80009a0 <MCAL_SPI_Init+0x190>)
 8000970:	f043 0310 	orr.w	r3, r3, #16
 8000974:	6013      	str	r3, [r2, #0]
		}
	}

	/*13. Config your register using the temp register used to protect the configurations */
	Config->SPIx->SPI_CR1 = tempReg_CR1;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	89fa      	ldrh	r2, [r7, #14]
 800097c:	601a      	str	r2, [r3, #0]
	Config->SPIx->SPI_CR2 = tempReg_CR2;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	89ba      	ldrh	r2, [r7, #12]
 8000984:	605a      	str	r2, [r3, #4]

}
 8000986:	bf00      	nop
 8000988:	3714      	adds	r7, #20
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	40013000 	.word	0x40013000
 8000994:	40021000 	.word	0x40021000
 8000998:	40003800 	.word	0x40003800
 800099c:	200000a4 	.word	0x200000a4
 80009a0:	e000e104 	.word	0xe000e104

080009a4 <MCAL_SPI_GPIO_Set_Pins>:
 * @retval 			- None
 * Note 			- Must open clock for AFIO & GPIO After GPIO Initialization
 * 					- Supported for SPI FULL DUPLEX Master/Slave only & NSS Hardware/Software
 */
void MCAL_SPI_GPIO_Set_Pins(SPI_Config_t *Config)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t SPI_GPIO_Config;

	/* Depending the recommendation in data sheet -> Table 25. SPI 	*/
	/*  "SPI pin-out"    "Configuration"     "GPIO configuration" 	*/
	if (Config->SPIx == SPI1)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a84      	ldr	r2, [pc, #528]	; (8000bc4 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d17e      	bne.n	8000ab4 <MCAL_SPI_GPIO_Set_Pins+0x110>
	{
		if(Config->SPI_Mode == SPI_MODE_MASTER) /* Master */
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	889b      	ldrh	r3, [r3, #4]
 80009ba:	2b04      	cmp	r3, #4
 80009bc:	d147      	bne.n	8000a4e <MCAL_SPI_GPIO_Set_Pins+0xaa>
		{
			/* PA4 : SPI1_NSS */
			switch (Config->NSS)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	8a1b      	ldrh	r3, [r3, #16]
 80009c2:	2b04      	cmp	r3, #4
 80009c4:	d00f      	beq.n	80009e6 <MCAL_SPI_GPIO_Set_Pins+0x42>
 80009c6:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d119      	bne.n	8000a02 <MCAL_SPI_GPIO_Set_Pins+0x5e>
			{
			 	 /* Input */
				case NSS_HW_MASTER_SS_OUTPUT_DISABLED:
					/* Hardware Master/Slave Input Floating */
					SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_4;
 80009ce:	2304      	movs	r3, #4
 80009d0:	733b      	strb	r3, [r7, #12]
					SPI_GPIO_Config.GPIO_MODE = GPIO_FLOATING_INPUT_MODE;
 80009d2:	2301      	movs	r3, #1
 80009d4:	737b      	strb	r3, [r7, #13]
					SPI_GPIO_Config.GPIO_Port= GPIOA;
 80009d6:	4b7c      	ldr	r3, [pc, #496]	; (8000bc8 <MCAL_SPI_GPIO_Set_Pins+0x224>)
 80009d8:	60bb      	str	r3, [r7, #8]
					gpio_pin_intialize( &SPI_GPIO_Config);
 80009da:	f107 0308 	add.w	r3, r7, #8
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff fcea 	bl	80003b8 <gpio_pin_intialize>
					break;
 80009e4:	e00d      	b.n	8000a02 <MCAL_SPI_GPIO_Set_Pins+0x5e>

				/* Output */
				case NSS_HW_MASTER_SS_OUTPUT_ENABLED:
					/* Hardware Master/NNS Output Alternate function push-pull */
					SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_4;
 80009e6:	2304      	movs	r3, #4
 80009e8:	733b      	strb	r3, [r7, #12]
					SPI_GPIO_Config.GPIO_MODE = GPIO_ALT_OUTPUT_PUSHPULL_MODE;
 80009ea:	2306      	movs	r3, #6
 80009ec:	737b      	strb	r3, [r7, #13]
					SPI_GPIO_Config.GPIO_Output_Speed = GPIO_SPEED_10M;
 80009ee:	2301      	movs	r3, #1
 80009f0:	73bb      	strb	r3, [r7, #14]
					SPI_GPIO_Config.GPIO_Port = GPIOA;
 80009f2:	4b75      	ldr	r3, [pc, #468]	; (8000bc8 <MCAL_SPI_GPIO_Set_Pins+0x224>)
 80009f4:	60bb      	str	r3, [r7, #8]
					gpio_pin_intialize( &SPI_GPIO_Config);
 80009f6:	f107 0308 	add.w	r3, r7, #8
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fcdc 	bl	80003b8 <gpio_pin_intialize>
					break;
 8000a00:	bf00      	nop
			}

			/* PA5 : SPI1_SCK */
			/* Master Alternate function push-pull */
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_5;
 8000a02:	2305      	movs	r3, #5
 8000a04:	733b      	strb	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_MODE = GPIO_ALT_OUTPUT_PUSHPULL_MODE;
 8000a06:	2306      	movs	r3, #6
 8000a08:	737b      	strb	r3, [r7, #13]
			SPI_GPIO_Config.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	73bb      	strb	r3, [r7, #14]
			SPI_GPIO_Config.GPIO_Port = GPIOA;
 8000a0e:	4b6e      	ldr	r3, [pc, #440]	; (8000bc8 <MCAL_SPI_GPIO_Set_Pins+0x224>)
 8000a10:	60bb      	str	r3, [r7, #8]
			gpio_pin_intialize( &SPI_GPIO_Config);
 8000a12:	f107 0308 	add.w	r3, r7, #8
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff fcce 	bl	80003b8 <gpio_pin_intialize>

			/* PA6 : SPI1_MISO */
			/* Full duplex / master Input floating / Input pull-up */
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_6;
 8000a1c:	2306      	movs	r3, #6
 8000a1e:	733b      	strb	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_MODE = GPIO_FLOATING_INPUT_MODE;
 8000a20:	2301      	movs	r3, #1
 8000a22:	737b      	strb	r3, [r7, #13]
			SPI_GPIO_Config.GPIO_Port = GPIOA;
 8000a24:	4b68      	ldr	r3, [pc, #416]	; (8000bc8 <MCAL_SPI_GPIO_Set_Pins+0x224>)
 8000a26:	60bb      	str	r3, [r7, #8]
			gpio_pin_intialize( &SPI_GPIO_Config);
 8000a28:	f107 0308 	add.w	r3, r7, #8
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff fcc3 	bl	80003b8 <gpio_pin_intialize>

			/* PA7 : SPI1_MOSI */
			/* Full duplex / master Alternate function push-pull */
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_7;
 8000a32:	2307      	movs	r3, #7
 8000a34:	733b      	strb	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_MODE = GPIO_ALT_OUTPUT_PUSHPULL_MODE;
 8000a36:	2306      	movs	r3, #6
 8000a38:	737b      	strb	r3, [r7, #13]
			SPI_GPIO_Config.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	73bb      	strb	r3, [r7, #14]
			SPI_GPIO_Config.GPIO_Port = GPIOA;
 8000a3e:	4b62      	ldr	r3, [pc, #392]	; (8000bc8 <MCAL_SPI_GPIO_Set_Pins+0x224>)
 8000a40:	60bb      	str	r3, [r7, #8]
			gpio_pin_intialize( &SPI_GPIO_Config);
 8000a42:	f107 0308 	add.w	r3, r7, #8
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff fcb6 	bl	80003b8 <gpio_pin_intialize>
			SPI_GPIO_Config.GPIO_MODE = GPIO_FLOATING_INPUT_MODE;
			SPI_GPIO_Config.GPIO_Port = GPIOB;
			gpio_pin_intialize(&SPI_GPIO_Config);
		}
	}
}
 8000a4c:	e0b5      	b.n	8000bba <MCAL_SPI_GPIO_Set_Pins+0x216>
			if(Config->NSS == NSS_HW_SLAVE)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	8a1b      	ldrh	r3, [r3, #16]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d10a      	bne.n	8000a6c <MCAL_SPI_GPIO_Set_Pins+0xc8>
				SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_4;
 8000a56:	2304      	movs	r3, #4
 8000a58:	733b      	strb	r3, [r7, #12]
				SPI_GPIO_Config.GPIO_MODE = GPIO_FLOATING_INPUT_MODE;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	737b      	strb	r3, [r7, #13]
				SPI_GPIO_Config.GPIO_Port = GPIOA;
 8000a5e:	4b5a      	ldr	r3, [pc, #360]	; (8000bc8 <MCAL_SPI_GPIO_Set_Pins+0x224>)
 8000a60:	60bb      	str	r3, [r7, #8]
				gpio_pin_intialize(&SPI_GPIO_Config);
 8000a62:	f107 0308 	add.w	r3, r7, #8
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fca6 	bl	80003b8 <gpio_pin_intialize>
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_5;
 8000a6c:	2305      	movs	r3, #5
 8000a6e:	733b      	strb	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_MODE = GPIO_FLOATING_INPUT_MODE;
 8000a70:	2301      	movs	r3, #1
 8000a72:	737b      	strb	r3, [r7, #13]
			SPI_GPIO_Config.GPIO_Port = GPIOA;
 8000a74:	4b54      	ldr	r3, [pc, #336]	; (8000bc8 <MCAL_SPI_GPIO_Set_Pins+0x224>)
 8000a76:	60bb      	str	r3, [r7, #8]
			gpio_pin_intialize(&SPI_GPIO_Config);
 8000a78:	f107 0308 	add.w	r3, r7, #8
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fc9b 	bl	80003b8 <gpio_pin_intialize>
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_6;
 8000a82:	2306      	movs	r3, #6
 8000a84:	733b      	strb	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_MODE = GPIO_ALT_OUTPUT_PUSHPULL_MODE;
 8000a86:	2306      	movs	r3, #6
 8000a88:	737b      	strb	r3, [r7, #13]
			SPI_GPIO_Config.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	73bb      	strb	r3, [r7, #14]
			SPI_GPIO_Config.GPIO_Port = GPIOA;
 8000a8e:	4b4e      	ldr	r3, [pc, #312]	; (8000bc8 <MCAL_SPI_GPIO_Set_Pins+0x224>)
 8000a90:	60bb      	str	r3, [r7, #8]
			gpio_pin_intialize(&SPI_GPIO_Config);
 8000a92:	f107 0308 	add.w	r3, r7, #8
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff fc8e 	bl	80003b8 <gpio_pin_intialize>
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_7;
 8000a9c:	2307      	movs	r3, #7
 8000a9e:	733b      	strb	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_MODE = GPIO_FLOATING_INPUT_MODE;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	737b      	strb	r3, [r7, #13]
			SPI_GPIO_Config.GPIO_Port = GPIOA;
 8000aa4:	4b48      	ldr	r3, [pc, #288]	; (8000bc8 <MCAL_SPI_GPIO_Set_Pins+0x224>)
 8000aa6:	60bb      	str	r3, [r7, #8]
			gpio_pin_intialize(&SPI_GPIO_Config);		}
 8000aa8:	f107 0308 	add.w	r3, r7, #8
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fc83 	bl	80003b8 <gpio_pin_intialize>
}
 8000ab2:	e082      	b.n	8000bba <MCAL_SPI_GPIO_Set_Pins+0x216>
	else if(Config->SPIx == SPI2)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a44      	ldr	r2, [pc, #272]	; (8000bcc <MCAL_SPI_GPIO_Set_Pins+0x228>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d17d      	bne.n	8000bba <MCAL_SPI_GPIO_Set_Pins+0x216>
		if(Config->SPI_Mode == SPI_MODE_MASTER) /* Master */
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	889b      	ldrh	r3, [r3, #4]
 8000ac2:	2b04      	cmp	r3, #4
 8000ac4:	d147      	bne.n	8000b56 <MCAL_SPI_GPIO_Set_Pins+0x1b2>
			switch (Config->NSS)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	8a1b      	ldrh	r3, [r3, #16]
 8000aca:	2b04      	cmp	r3, #4
 8000acc:	d00f      	beq.n	8000aee <MCAL_SPI_GPIO_Set_Pins+0x14a>
 8000ace:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d119      	bne.n	8000b0a <MCAL_SPI_GPIO_Set_Pins+0x166>
					SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_12;
 8000ad6:	230c      	movs	r3, #12
 8000ad8:	733b      	strb	r3, [r7, #12]
					SPI_GPIO_Config.GPIO_MODE = GPIO_FLOATING_INPUT_MODE;
 8000ada:	2301      	movs	r3, #1
 8000adc:	737b      	strb	r3, [r7, #13]
					SPI_GPIO_Config.GPIO_Port = GPIOB;
 8000ade:	4b3c      	ldr	r3, [pc, #240]	; (8000bd0 <MCAL_SPI_GPIO_Set_Pins+0x22c>)
 8000ae0:	60bb      	str	r3, [r7, #8]
					gpio_pin_intialize(&SPI_GPIO_Config);
 8000ae2:	f107 0308 	add.w	r3, r7, #8
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff fc66 	bl	80003b8 <gpio_pin_intialize>
					break;
 8000aec:	e00d      	b.n	8000b0a <MCAL_SPI_GPIO_Set_Pins+0x166>
					SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_12;
 8000aee:	230c      	movs	r3, #12
 8000af0:	733b      	strb	r3, [r7, #12]
					SPI_GPIO_Config.GPIO_MODE = GPIO_ALT_OUTPUT_PUSHPULL_MODE;
 8000af2:	2306      	movs	r3, #6
 8000af4:	737b      	strb	r3, [r7, #13]
					SPI_GPIO_Config.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000af6:	2301      	movs	r3, #1
 8000af8:	73bb      	strb	r3, [r7, #14]
					SPI_GPIO_Config.GPIO_Port = GPIOB;
 8000afa:	4b35      	ldr	r3, [pc, #212]	; (8000bd0 <MCAL_SPI_GPIO_Set_Pins+0x22c>)
 8000afc:	60bb      	str	r3, [r7, #8]
					gpio_pin_intialize(&SPI_GPIO_Config);
 8000afe:	f107 0308 	add.w	r3, r7, #8
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fc58 	bl	80003b8 <gpio_pin_intialize>
					break;
 8000b08:	bf00      	nop
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_13;
 8000b0a:	230d      	movs	r3, #13
 8000b0c:	733b      	strb	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_MODE = GPIO_ALT_OUTPUT_PUSHPULL_MODE;
 8000b0e:	2306      	movs	r3, #6
 8000b10:	737b      	strb	r3, [r7, #13]
			SPI_GPIO_Config.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000b12:	2301      	movs	r3, #1
 8000b14:	73bb      	strb	r3, [r7, #14]
			SPI_GPIO_Config.GPIO_Port = GPIOB;
 8000b16:	4b2e      	ldr	r3, [pc, #184]	; (8000bd0 <MCAL_SPI_GPIO_Set_Pins+0x22c>)
 8000b18:	60bb      	str	r3, [r7, #8]
			gpio_pin_intialize(&SPI_GPIO_Config);
 8000b1a:	f107 0308 	add.w	r3, r7, #8
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff fc4a 	bl	80003b8 <gpio_pin_intialize>
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_14;
 8000b24:	230e      	movs	r3, #14
 8000b26:	733b      	strb	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_MODE = GPIO_FLOATING_INPUT_MODE;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	737b      	strb	r3, [r7, #13]
			SPI_GPIO_Config.GPIO_Port = GPIOB;
 8000b2c:	4b28      	ldr	r3, [pc, #160]	; (8000bd0 <MCAL_SPI_GPIO_Set_Pins+0x22c>)
 8000b2e:	60bb      	str	r3, [r7, #8]
			gpio_pin_intialize(&SPI_GPIO_Config);
 8000b30:	f107 0308 	add.w	r3, r7, #8
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fc3f 	bl	80003b8 <gpio_pin_intialize>
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_15;
 8000b3a:	230f      	movs	r3, #15
 8000b3c:	733b      	strb	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_MODE = GPIO_ALT_OUTPUT_PUSHPULL_MODE;
 8000b3e:	2306      	movs	r3, #6
 8000b40:	737b      	strb	r3, [r7, #13]
			SPI_GPIO_Config.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000b42:	2301      	movs	r3, #1
 8000b44:	73bb      	strb	r3, [r7, #14]
			SPI_GPIO_Config.GPIO_Port = GPIOB;
 8000b46:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <MCAL_SPI_GPIO_Set_Pins+0x22c>)
 8000b48:	60bb      	str	r3, [r7, #8]
			gpio_pin_intialize(&SPI_GPIO_Config);
 8000b4a:	f107 0308 	add.w	r3, r7, #8
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff fc32 	bl	80003b8 <gpio_pin_intialize>
}
 8000b54:	e031      	b.n	8000bba <MCAL_SPI_GPIO_Set_Pins+0x216>
			if(Config->NSS == NSS_HW_SLAVE)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	8a1b      	ldrh	r3, [r3, #16]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d10a      	bne.n	8000b74 <MCAL_SPI_GPIO_Set_Pins+0x1d0>
				SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_12;
 8000b5e:	230c      	movs	r3, #12
 8000b60:	733b      	strb	r3, [r7, #12]
				SPI_GPIO_Config.GPIO_MODE = GPIO_FLOATING_INPUT_MODE;
 8000b62:	2301      	movs	r3, #1
 8000b64:	737b      	strb	r3, [r7, #13]
				SPI_GPIO_Config.GPIO_Port = GPIOB;
 8000b66:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <MCAL_SPI_GPIO_Set_Pins+0x22c>)
 8000b68:	60bb      	str	r3, [r7, #8]
				gpio_pin_intialize(&SPI_GPIO_Config);
 8000b6a:	f107 0308 	add.w	r3, r7, #8
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fc22 	bl	80003b8 <gpio_pin_intialize>
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_13;
 8000b74:	230d      	movs	r3, #13
 8000b76:	733b      	strb	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_MODE = GPIO_FLOATING_INPUT_MODE;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	737b      	strb	r3, [r7, #13]
			SPI_GPIO_Config.GPIO_Port = GPIOB;
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <MCAL_SPI_GPIO_Set_Pins+0x22c>)
 8000b7e:	60bb      	str	r3, [r7, #8]
			gpio_pin_intialize(&SPI_GPIO_Config);
 8000b80:	f107 0308 	add.w	r3, r7, #8
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fc17 	bl	80003b8 <gpio_pin_intialize>
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_14;
 8000b8a:	230e      	movs	r3, #14
 8000b8c:	733b      	strb	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_MODE = GPIO_ALT_OUTPUT_PUSHPULL_MODE;
 8000b8e:	2306      	movs	r3, #6
 8000b90:	737b      	strb	r3, [r7, #13]
			SPI_GPIO_Config.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000b92:	2301      	movs	r3, #1
 8000b94:	73bb      	strb	r3, [r7, #14]
			SPI_GPIO_Config.GPIO_Port = GPIOB;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MCAL_SPI_GPIO_Set_Pins+0x22c>)
 8000b98:	60bb      	str	r3, [r7, #8]
			gpio_pin_intialize(&SPI_GPIO_Config);
 8000b9a:	f107 0308 	add.w	r3, r7, #8
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fc0a 	bl	80003b8 <gpio_pin_intialize>
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_15;
 8000ba4:	230f      	movs	r3, #15
 8000ba6:	733b      	strb	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_MODE = GPIO_FLOATING_INPUT_MODE;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	737b      	strb	r3, [r7, #13]
			SPI_GPIO_Config.GPIO_Port = GPIOB;
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <MCAL_SPI_GPIO_Set_Pins+0x22c>)
 8000bae:	60bb      	str	r3, [r7, #8]
			gpio_pin_intialize(&SPI_GPIO_Config);
 8000bb0:	f107 0308 	add.w	r3, r7, #8
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff fbff 	bl	80003b8 <gpio_pin_intialize>
}
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40013000 	.word	0x40013000
 8000bc8:	40010800 	.word	0x40010800
 8000bcc:	40003800 	.word	0x40003800
 8000bd0:	40010c00 	.word	0x40010c00

08000bd4 <SPI1_IRQHandler>:

/* ================= IRQ Function Definitions ===================== */
/* ================================================================ */

void SPI1_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	SPI_INT_CALLBACK [0]();
 8000bd8:	4b02      	ldr	r3, [pc, #8]	; (8000be4 <SPI1_IRQHandler+0x10>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4798      	blx	r3
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200000a4 	.word	0x200000a4

08000be8 <SPI2_IRQHandler>:


void SPI2_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	SPI_INT_CALLBACK [1]();
 8000bec:	4b02      	ldr	r3, [pc, #8]	; (8000bf8 <SPI2_IRQHandler+0x10>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	4798      	blx	r3
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200000a4 	.word	0x200000a4

08000bfc <MCAL_UART_Init>:
 * Note				-Support for Now Asynch mode & Clock 8 MHZ S

 /  */

void MCAL_UART_Init ( UART_Config* UART_Config)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	uint32_t pclk ,BRR  ;

	//	enable the Clock for given USART peripheral
	if ( UART_Config->USARTx == USART1 ){
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a78      	ldr	r2, [pc, #480]	; (8000dec <MCAL_UART_Init+0x1f0>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d10d      	bne.n	8000c2a <MCAL_UART_Init+0x2e>
		RCC_USART1_CLK_EN();
 8000c0e:	4b78      	ldr	r3, [pc, #480]	; (8000df0 <MCAL_UART_Init+0x1f4>)
 8000c10:	699b      	ldr	r3, [r3, #24]
 8000c12:	4a77      	ldr	r2, [pc, #476]	; (8000df0 <MCAL_UART_Init+0x1f4>)
 8000c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c18:	6193      	str	r3, [r2, #24]
		USART_INT_CALLBACK [0] = UART_Config->P_IRQ_CallBack;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	4a75      	ldr	r2, [pc, #468]	; (8000df4 <MCAL_UART_Init+0x1f8>)
 8000c20:	6013      	str	r3, [r2, #0]
		pclk = MCAL_RCC_GetPCLK2Freq();
 8000c22:	f7ff fde1 	bl	80007e8 <MCAL_RCC_GetPCLK2Freq>
 8000c26:	6178      	str	r0, [r7, #20]
 8000c28:	e024      	b.n	8000c74 <MCAL_UART_Init+0x78>
	}
	else if ( UART_Config->USARTx == USART2 ){
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a72      	ldr	r2, [pc, #456]	; (8000df8 <MCAL_UART_Init+0x1fc>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d10d      	bne.n	8000c50 <MCAL_UART_Init+0x54>
		RCC_USART2_CLK_EN();
 8000c34:	4b6e      	ldr	r3, [pc, #440]	; (8000df0 <MCAL_UART_Init+0x1f4>)
 8000c36:	69db      	ldr	r3, [r3, #28]
 8000c38:	4a6d      	ldr	r2, [pc, #436]	; (8000df0 <MCAL_UART_Init+0x1f4>)
 8000c3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c3e:	61d3      	str	r3, [r2, #28]
		USART_INT_CALLBACK [1] = UART_Config->P_IRQ_CallBack;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	695b      	ldr	r3, [r3, #20]
 8000c44:	4a6b      	ldr	r2, [pc, #428]	; (8000df4 <MCAL_UART_Init+0x1f8>)
 8000c46:	6053      	str	r3, [r2, #4]
		pclk = MCAL_RCC_GetPCLK1Freq();
 8000c48:	f7ff fdba 	bl	80007c0 <MCAL_RCC_GetPCLK1Freq>
 8000c4c:	6178      	str	r0, [r7, #20]
 8000c4e:	e011      	b.n	8000c74 <MCAL_UART_Init+0x78>
	}
	else if ( UART_Config->USARTx == USART3 ){
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a69      	ldr	r2, [pc, #420]	; (8000dfc <MCAL_UART_Init+0x200>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d10c      	bne.n	8000c74 <MCAL_UART_Init+0x78>
		RCC_USART3_CLK_EN();
 8000c5a:	4b65      	ldr	r3, [pc, #404]	; (8000df0 <MCAL_UART_Init+0x1f4>)
 8000c5c:	69db      	ldr	r3, [r3, #28]
 8000c5e:	4a64      	ldr	r2, [pc, #400]	; (8000df0 <MCAL_UART_Init+0x1f4>)
 8000c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c64:	61d3      	str	r3, [r2, #28]
		USART_INT_CALLBACK [2] = UART_Config->P_IRQ_CallBack;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	695b      	ldr	r3, [r3, #20]
 8000c6a:	4a62      	ldr	r2, [pc, #392]	; (8000df4 <MCAL_UART_Init+0x1f8>)
 8000c6c:	6093      	str	r3, [r2, #8]
		pclk = MCAL_RCC_GetPCLK1Freq();
 8000c6e:	f7ff fda7 	bl	80007c0 <MCAL_RCC_GetPCLK1Freq>
 8000c72:	6178      	str	r0, [r7, #20]
	}


	//Enable USART Module
	//	USART_CR1  Bit 13 UE: USART enable
	UART_Config->USARTx->CR1 |= 1<<13 ;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	68da      	ldr	r2, [r3, #12]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000c82:	60da      	str	r2, [r3, #12]

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	//	USART_CR1 Bit 3 TE: Transmitter enable & Bit 2 RE: Receiver enable
	UART_Config->USARTx->CR1 |= UART_Config->USART_Mode ;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	68da      	ldr	r2, [r3, #12]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	791b      	ldrb	r3, [r3, #4]
 8000c8e:	4619      	mov	r1, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	430a      	orrs	r2, r1
 8000c96:	60da      	str	r2, [r3, #12]

	//PAYLOAD Width
	// USARTx->CR1  Bit 12 M: Word length
	UART_Config->USARTx->CR1 |= UART_Config->Payload_Length ;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	68da      	ldr	r2, [r3, #12]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	7b1b      	ldrb	r3, [r3, #12]
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	430a      	orrs	r2, r1
 8000caa:	60da      	str	r2, [r3, #12]

	//Configuration of parity control bit fields
	// USARTx->CR1 	Bit 10 PCE: Parity control enable     Bit 9 PS: Parity selection
	UART_Config->USARTx->CR1 |= UART_Config->Parity ;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	68da      	ldr	r2, [r3, #12]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	7b5b      	ldrb	r3, [r3, #13]
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	60da      	str	r2, [r3, #12]

	//configure the number of stop bits
	//USART_CR2  Bits 13:12 STOP: STOP bits
	UART_Config->USARTx->CR2 |= UART_Config->StopBits ;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	691a      	ldr	r2, [r3, #16]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	7b9b      	ldrb	r3, [r3, #14]
 8000cca:	4619      	mov	r1, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	430a      	orrs	r2, r1
 8000cd2:	611a      	str	r2, [r3, #16]


	//USART hardware flow control
	//USART_CR3  Bit 9 CTSE: CTS enable   Bit 8 RTSE: RTS enable
	UART_Config->USARTx->CR3 |= UART_Config->HwFlowCtl ;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	695a      	ldr	r2, [r3, #20]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	7bdb      	ldrb	r3, [r3, #15]
 8000cde:	4619      	mov	r1, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	615a      	str	r2, [r3, #20]

	BRR = UART_BRR_Register(pclk, UART_Config->BaudRate) ;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	011b      	lsls	r3, r3, #4
 8000cee:	697a      	ldr	r2, [r7, #20]
 8000cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf4:	0119      	lsls	r1, r3, #4
 8000cf6:	697a      	ldr	r2, [r7, #20]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	4413      	add	r3, r2
 8000cfe:	009a      	lsls	r2, r3, #2
 8000d00:	441a      	add	r2, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	011b      	lsls	r3, r3, #4
 8000d12:	6978      	ldr	r0, [r7, #20]
 8000d14:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d18:	2064      	movs	r0, #100	; 0x64
 8000d1a:	fb00 f303 	mul.w	r3, r0, r3
 8000d1e:	1ad3      	subs	r3, r2, r3
 8000d20:	011b      	lsls	r3, r3, #4
 8000d22:	4a37      	ldr	r2, [pc, #220]	; (8000e00 <MCAL_UART_Init+0x204>)
 8000d24:	fba2 2303 	umull	r2, r3, r2, r3
 8000d28:	095b      	lsrs	r3, r3, #5
 8000d2a:	f003 030f 	and.w	r3, r3, #15
 8000d2e:	430b      	orrs	r3, r1
 8000d30:	613b      	str	r3, [r7, #16]
	UART_Config->USARTx->BRR = BRR ;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	609a      	str	r2, [r3, #8]

	/* 9. ENABLE / DISABLE Interrupt */
	uint8_t interrupts =0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	73fb      	strb	r3, [r7, #15]
	interrupts |= UART_Config->RXNEIE_IRQ_Enable
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	7c1b      	ldrb	r3, [r3, #16]
 8000d42:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	b25a      	sxtb	r2, r3
			| (UART_Config->TCIE_IRQ_Enable<<1)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	7c1b      	ldrb	r3, [r3, #16]
 8000d4e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	b25b      	sxtb	r3, r3
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	b25a      	sxtb	r2, r3
			| (UART_Config->TXEIE_IRQ_Enable<<2)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	7c1b      	ldrb	r3, [r3, #16]
 8000d60:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	b25b      	sxtb	r3, r3
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	b25a      	sxtb	r2, r3
			| (UART_Config->PEIE_IRQ_Enable<<3);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	7c1b      	ldrb	r3, [r3, #16]
 8000d72:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	b25b      	sxtb	r3, r3
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	b25a      	sxtb	r2, r3
	interrupts |= UART_Config->RXNEIE_IRQ_Enable
 8000d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	b25b      	sxtb	r3, r3
 8000d88:	73fb      	strb	r3, [r7, #15]
	UART_Config->USARTx->CR1 |=  interrupts<<5;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	68da      	ldr	r2, [r3, #12]
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
 8000d92:	015b      	lsls	r3, r3, #5
 8000d94:	4619      	mov	r1, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	60da      	str	r2, [r3, #12]

	if (UART_Config->USARTx == USART1)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a12      	ldr	r2, [pc, #72]	; (8000dec <MCAL_UART_Init+0x1f0>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d106      	bne.n	8000db6 <MCAL_UART_Init+0x1ba>
		NVIC_IRQ37_USART1_Enable;
 8000da8:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <MCAL_UART_Init+0x208>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a15      	ldr	r2, [pc, #84]	; (8000e04 <MCAL_UART_Init+0x208>)
 8000dae:	f043 0320 	orr.w	r3, r3, #32
 8000db2:	6013      	str	r3, [r2, #0]
		NVIC_IRQ38_USART2_Enable;

	else if (UART_Config->USARTx == USART3)
		NVIC_IRQ39_USART3_Enable;

}
 8000db4:	e016      	b.n	8000de4 <MCAL_UART_Init+0x1e8>
	else if (UART_Config->USARTx == USART2)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a0f      	ldr	r2, [pc, #60]	; (8000df8 <MCAL_UART_Init+0x1fc>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d106      	bne.n	8000dce <MCAL_UART_Init+0x1d2>
		NVIC_IRQ38_USART2_Enable;
 8000dc0:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <MCAL_UART_Init+0x208>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0f      	ldr	r2, [pc, #60]	; (8000e04 <MCAL_UART_Init+0x208>)
 8000dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	e00a      	b.n	8000de4 <MCAL_UART_Init+0x1e8>
	else if (UART_Config->USARTx == USART3)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <MCAL_UART_Init+0x200>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d105      	bne.n	8000de4 <MCAL_UART_Init+0x1e8>
		NVIC_IRQ39_USART3_Enable;
 8000dd8:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <MCAL_UART_Init+0x208>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a09      	ldr	r2, [pc, #36]	; (8000e04 <MCAL_UART_Init+0x208>)
 8000dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000de2:	6013      	str	r3, [r2, #0]
}
 8000de4:	bf00      	nop
 8000de6:	3718      	adds	r7, #24
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40013800 	.word	0x40013800
 8000df0:	40021000 	.word	0x40021000
 8000df4:	200000ac 	.word	0x200000ac
 8000df8:	40004400 	.word	0x40004400
 8000dfc:	40004800 	.word	0x40004800
 8000e00:	51eb851f 	.word	0x51eb851f
 8000e04:	e000e104 	.word	0xe000e104

08000e08 <MCAL_UART_SendData>:
 * 					- because it is replaced by the parity
 * 					- when receiving with the parity enabled the value read in the MSB bit is the received parity bit
 */

void MCAL_UART_SendData	(UART_Config* UART_Config, uint16_t *pTxBuffer,enum Polling_mechism PollingEn )
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	4613      	mov	r3, r2
 8000e14:	71fb      	strb	r3, [r7, #7]
	/* 1. Wait until TXE flag is set in the SR */
	if (PollingEn == enable)
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d107      	bne.n	8000e2c <MCAL_UART_SendData+0x24>
		 * The TXE bit is set by hardware and it indicates:
		 * The data has been moved from TDR to the shift register and the data transmission has started.
		 * The TDR register is empty.
		 * The next data can be written in the USART_DR register without overwriting the previous data.
		 */
		while (!(UART_Config->USARTx->SR & 1<<7));
 8000e1c:	bf00      	nop
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d0f8      	beq.n	8000e1e <MCAL_UART_SendData+0x16>
	 * the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect
	 * because it is replaced by the parity.
	 * When receiving with the parity enabled, the value read in the MSB bit is the received parity bit.
	 *
	 */
	if (UART_Config->Payload_Length == UART_Payload_Length_8B)
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	7b1b      	ldrb	r3, [r3, #12]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d106      	bne.n	8000e42 <MCAL_UART_SendData+0x3a>
	{
		UART_Config->USARTx->DR = (*pTxBuffer) & (uint8_t)0xFF ;
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	881b      	ldrh	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	b2d2      	uxtb	r2, r2
 8000e40:	605a      	str	r2, [r3, #4]
	{
		UART_Config->USARTx->DR = (*pTxBuffer) & (uint16_t)0x1FF ;
	}


}
 8000e42:	bf00      	nop
 8000e44:	3714      	adds	r7, #20
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr

08000e4c <MCAL_UART_GPIO_Set_Pins>:
 * @param[in]		- USARTx: where x can be (1..3 depending on device used)
 * @retval 			- None
 * @Notes			- Should enable the corresponding ALT & GPIO in RCC clock . Also called after MCAL_UART_Init()
 */
void MCAL_UART_GPIO_Set_Pins(UART_Config* UART_Config)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]

	GPIO_PinConfig_t Pin_Config;

	if (UART_Config->USARTx == USART1)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a3c      	ldr	r2, [pc, #240]	; (8000f4c <MCAL_UART_GPIO_Set_Pins+0x100>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d118      	bne.n	8000e90 <MCAL_UART_GPIO_Set_Pins+0x44>
		// PA10 Rx
		// PA11 CTS
		// PA12 RTS

		// PA9 Tx
		Pin_Config.GPIO_PinNumber = GPIO_PIN_9;
 8000e5e:	2309      	movs	r3, #9
 8000e60:	733b      	strb	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_ALT_OUTPUT_PUSHPULL_MODE;
 8000e62:	2306      	movs	r3, #6
 8000e64:	737b      	strb	r3, [r7, #13]
		Pin_Config.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000e66:	2301      	movs	r3, #1
 8000e68:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_Port= GPIOA;
 8000e6a:	4b39      	ldr	r3, [pc, #228]	; (8000f50 <MCAL_UART_GPIO_Set_Pins+0x104>)
 8000e6c:	60bb      	str	r3, [r7, #8]

		gpio_pin_intialize(&Pin_Config);
 8000e6e:	f107 0308 	add.w	r3, r7, #8
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff faa0 	bl	80003b8 <gpio_pin_intialize>

		// PA10 Rx
		Pin_Config.GPIO_PinNumber = GPIO_PIN_10;
 8000e78:	230a      	movs	r3, #10
 8000e7a:	733b      	strb	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_ALT_INPUT_MODE;
 8000e7c:	2308      	movs	r3, #8
 8000e7e:	737b      	strb	r3, [r7, #13]
		Pin_Config.GPIO_Port= GPIOA;
 8000e80:	4b33      	ldr	r3, [pc, #204]	; (8000f50 <MCAL_UART_GPIO_Set_Pins+0x104>)
 8000e82:	60bb      	str	r3, [r7, #8]
		gpio_pin_intialize(&Pin_Config);
 8000e84:	f107 0308 	add.w	r3, r7, #8
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fa95 	bl	80003b8 <gpio_pin_intialize>
			Pin_Config.GPIO_Output_Speed = GPIO_SPEED_10M;
			Pin_Config.GPIO_Port= GPIOA;
			gpio_pin_intialize( &Pin_Config);
		}
	}
}
 8000e8e:	e058      	b.n	8000f42 <MCAL_UART_GPIO_Set_Pins+0xf6>
	else if (UART_Config->USARTx == USART2)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a2f      	ldr	r2, [pc, #188]	; (8000f54 <MCAL_UART_GPIO_Set_Pins+0x108>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d127      	bne.n	8000eea <MCAL_UART_GPIO_Set_Pins+0x9e>
		Pin_Config.GPIO_PinNumber = GPIO_PIN_2;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	733b      	strb	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_ALT_OUTPUT_PUSHPULL_MODE;
 8000e9e:	2306      	movs	r3, #6
 8000ea0:	737b      	strb	r3, [r7, #13]
		Pin_Config.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_Port= GPIOA;
 8000ea6:	4b2a      	ldr	r3, [pc, #168]	; (8000f50 <MCAL_UART_GPIO_Set_Pins+0x104>)
 8000ea8:	60bb      	str	r3, [r7, #8]
		gpio_pin_intialize( &Pin_Config);
 8000eaa:	f107 0308 	add.w	r3, r7, #8
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fa82 	bl	80003b8 <gpio_pin_intialize>
		Pin_Config.GPIO_PinNumber = GPIO_PIN_3;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	733b      	strb	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_ALT_INPUT_MODE;
 8000eb8:	2308      	movs	r3, #8
 8000eba:	737b      	strb	r3, [r7, #13]
		Pin_Config.GPIO_Port= GPIOA;
 8000ebc:	4b24      	ldr	r3, [pc, #144]	; (8000f50 <MCAL_UART_GPIO_Set_Pins+0x104>)
 8000ebe:	60bb      	str	r3, [r7, #8]
		gpio_pin_intialize( &Pin_Config);
 8000ec0:	f107 0308 	add.w	r3, r7, #8
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fa77 	bl	80003b8 <gpio_pin_intialize>
		if (UART_Config->HwFlowCtl || UART_Config->HwFlowCtl == UART_HwFlowCtl_CTS)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	7bdb      	ldrb	r3, [r3, #15]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d037      	beq.n	8000f42 <MCAL_UART_GPIO_Set_Pins+0xf6>
			Pin_Config.GPIO_PinNumber = GPIO_PIN_0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	733b      	strb	r3, [r7, #12]
			Pin_Config.GPIO_MODE = GPIO_FLOATING_INPUT_MODE;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	737b      	strb	r3, [r7, #13]
			Pin_Config.GPIO_Port= GPIOA;
 8000eda:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <MCAL_UART_GPIO_Set_Pins+0x104>)
 8000edc:	60bb      	str	r3, [r7, #8]
			gpio_pin_intialize( &Pin_Config);
 8000ede:	f107 0308 	add.w	r3, r7, #8
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fa68 	bl	80003b8 <gpio_pin_intialize>
}
 8000ee8:	e02b      	b.n	8000f42 <MCAL_UART_GPIO_Set_Pins+0xf6>
	else if (UART_Config->USARTx == USART3)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a1a      	ldr	r2, [pc, #104]	; (8000f58 <MCAL_UART_GPIO_Set_Pins+0x10c>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d126      	bne.n	8000f42 <MCAL_UART_GPIO_Set_Pins+0xf6>
		Pin_Config.GPIO_PinNumber = GPIO_PIN_10;
 8000ef4:	230a      	movs	r3, #10
 8000ef6:	733b      	strb	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_ALT_OUTPUT_PUSHPULL_MODE;
 8000ef8:	2306      	movs	r3, #6
 8000efa:	737b      	strb	r3, [r7, #13]
		Pin_Config.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000efc:	2301      	movs	r3, #1
 8000efe:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_Port= GPIOB;
 8000f00:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <MCAL_UART_GPIO_Set_Pins+0x110>)
 8000f02:	60bb      	str	r3, [r7, #8]
		gpio_pin_intialize( &Pin_Config);
 8000f04:	f107 0308 	add.w	r3, r7, #8
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fa55 	bl	80003b8 <gpio_pin_intialize>
		Pin_Config.GPIO_PinNumber = GPIO_PIN_11;
 8000f0e:	230b      	movs	r3, #11
 8000f10:	733b      	strb	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_ALT_INPUT_MODE;
 8000f12:	2308      	movs	r3, #8
 8000f14:	737b      	strb	r3, [r7, #13]
		Pin_Config.GPIO_Port= GPIOB;
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <MCAL_UART_GPIO_Set_Pins+0x110>)
 8000f18:	60bb      	str	r3, [r7, #8]
		gpio_pin_intialize( &Pin_Config);
 8000f1a:	f107 0308 	add.w	r3, r7, #8
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff fa4a 	bl	80003b8 <gpio_pin_intialize>
		if (UART_Config->HwFlowCtl || UART_Config->HwFlowCtl == UART_HwFlowCtl_CTS)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	7bdb      	ldrb	r3, [r3, #15]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d00a      	beq.n	8000f42 <MCAL_UART_GPIO_Set_Pins+0xf6>
			Pin_Config.GPIO_PinNumber = GPIO_PIN_13;
 8000f2c:	230d      	movs	r3, #13
 8000f2e:	733b      	strb	r3, [r7, #12]
			Pin_Config.GPIO_MODE = GPIO_FLOATING_INPUT_MODE;
 8000f30:	2301      	movs	r3, #1
 8000f32:	737b      	strb	r3, [r7, #13]
			Pin_Config.GPIO_Port= GPIOB;
 8000f34:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <MCAL_UART_GPIO_Set_Pins+0x110>)
 8000f36:	60bb      	str	r3, [r7, #8]
			gpio_pin_intialize( &Pin_Config);
 8000f38:	f107 0308 	add.w	r3, r7, #8
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fa3b 	bl	80003b8 <gpio_pin_intialize>
}
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40013800 	.word	0x40013800
 8000f50:	40010800 	.word	0x40010800
 8000f54:	40004400 	.word	0x40004400
 8000f58:	40004800 	.word	0x40004800
 8000f5c:	40010c00 	.word	0x40010c00

08000f60 <USART1_IRQHandler>:



void USART1_IRQHandler (void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	USART_INT_CALLBACK [0]();
 8000f64:	4b02      	ldr	r3, [pc, #8]	; (8000f70 <USART1_IRQHandler+0x10>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4798      	blx	r3
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200000ac 	.word	0x200000ac

08000f74 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
	USART_INT_CALLBACK [1]();
 8000f78:	4b02      	ldr	r3, [pc, #8]	; (8000f84 <USART2_IRQHandler+0x10>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	4798      	blx	r3
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200000ac 	.word	0x200000ac

08000f88 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	USART_INT_CALLBACK [2]();
 8000f8c:	4b02      	ldr	r3, [pc, #8]	; (8000f98 <USART3_IRQHandler+0x10>)
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	4798      	blx	r3
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200000ac 	.word	0x200000ac

08000f9c <transmit>:
uint16 y=0;
uint16 z=0;
uint16 uart1_Data=0;


void transmit(){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	z=SPI1->SPI_DR;
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <transmit+0x1c>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <transmit+0x20>)
 8000fa8:	801a      	strh	r2, [r3, #0]
	MCAL_UART_SendData(&uart1, &z, 1);
 8000faa:	2201      	movs	r2, #1
 8000fac:	4903      	ldr	r1, [pc, #12]	; (8000fbc <transmit+0x20>)
 8000fae:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <transmit+0x24>)
 8000fb0:	f7ff ff2a 	bl	8000e08 <MCAL_UART_SendData>
	//MCAL_SPI_Send_Data(&spi_slave, &z, 1);
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40013000 	.word	0x40013000
 8000fbc:	200000b8 	.word	0x200000b8
 8000fc0:	20000020 	.word	0x20000020

08000fc4 <UART_CALLBACK>:

void UART_CALLBACK (){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	uart1_Data=USART1->DR;
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <UART_CALLBACK+0x1c>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <UART_CALLBACK+0x20>)
 8000fd0:	801a      	strh	r2, [r3, #0]
	MCAL_UART_SendData(&uart1, &uart1_Data, 1);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	4903      	ldr	r1, [pc, #12]	; (8000fe4 <UART_CALLBACK+0x20>)
 8000fd6:	4804      	ldr	r0, [pc, #16]	; (8000fe8 <UART_CALLBACK+0x24>)
 8000fd8:	f7ff ff16 	bl	8000e08 <MCAL_UART_SendData>

}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40013800 	.word	0x40013800
 8000fe4:	200000ba 	.word	0x200000ba
 8000fe8:	20000020 	.word	0x20000020

08000fec <main>:
		.GPIO_Port=GPIOB
};


int main(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 8000ff0:	4b18      	ldr	r3, [pc, #96]	; (8001054 <main+0x68>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	4a17      	ldr	r2, [pc, #92]	; (8001054 <main+0x68>)
 8000ff6:	f043 0304 	orr.w	r3, r3, #4
 8000ffa:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000ffc:	4b15      	ldr	r3, [pc, #84]	; (8001054 <main+0x68>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	4a14      	ldr	r2, [pc, #80]	; (8001054 <main+0x68>)
 8001002:	f043 0308 	orr.w	r3, r3, #8
 8001006:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <main+0x68>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	4a11      	ldr	r2, [pc, #68]	; (8001054 <main+0x68>)
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	6193      	str	r3, [r2, #24]

	MCAL_SPI_GPIO_Set_Pins(&spi_slave);
 8001014:	4810      	ldr	r0, [pc, #64]	; (8001058 <main+0x6c>)
 8001016:	f7ff fcc5 	bl	80009a4 <MCAL_SPI_GPIO_Set_Pins>
	MCAL_SPI_Init(&spi_slave);
 800101a:	480f      	ldr	r0, [pc, #60]	; (8001058 <main+0x6c>)
 800101c:	f7ff fbf8 	bl	8000810 <MCAL_SPI_Init>
	MCAL_UART_GPIO_Set_Pins(&uart1);
 8001020:	480e      	ldr	r0, [pc, #56]	; (800105c <main+0x70>)
 8001022:	f7ff ff13 	bl	8000e4c <MCAL_UART_GPIO_Set_Pins>
	MCAL_UART_Init(&uart1);
 8001026:	480d      	ldr	r0, [pc, #52]	; (800105c <main+0x70>)
 8001028:	f7ff fde8 	bl	8000bfc <MCAL_UART_Init>
	gpio_pin_intialize(&pin);
 800102c:	480c      	ldr	r0, [pc, #48]	; (8001060 <main+0x74>)
 800102e:	f7ff f9c3 	bl	80003b8 <gpio_pin_intialize>
	gpio_pin_write_logic(&pin, 0);
 8001032:	2100      	movs	r1, #0
 8001034:	480a      	ldr	r0, [pc, #40]	; (8001060 <main+0x74>)
 8001036:	f7ff fa53 	bl	80004e0 <gpio_pin_write_logic>
	delay_ms(5000);
 800103a:	f241 3088 	movw	r0, #5000	; 0x1388
 800103e:	f7ff fa78 	bl	8000532 <delay_ms>


	while (1){
		//MCAL_SPI_Recieve_Data(&spi_slave, &y, 1);
		//delay_ms(100);
		if(z!=0)gpio_pin_write_logic(&pin, 1);
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <main+0x78>)
 8001044:	881b      	ldrh	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d0fb      	beq.n	8001042 <main+0x56>
 800104a:	2101      	movs	r1, #1
 800104c:	4804      	ldr	r0, [pc, #16]	; (8001060 <main+0x74>)
 800104e:	f7ff fa47 	bl	80004e0 <gpio_pin_write_logic>
 8001052:	e7f6      	b.n	8001042 <main+0x56>
 8001054:	40021000 	.word	0x40021000
 8001058:	20000000 	.word	0x20000000
 800105c:	20000020 	.word	0x20000020
 8001060:	20000038 	.word	0x20000038
 8001064:	200000b8 	.word	0x200000b8

08001068 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001068:	480d      	ldr	r0, [pc, #52]	; (80010a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800106a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800106c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001070:	480c      	ldr	r0, [pc, #48]	; (80010a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001072:	490d      	ldr	r1, [pc, #52]	; (80010a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001074:	4a0d      	ldr	r2, [pc, #52]	; (80010ac <LoopForever+0xe>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001078:	e002      	b.n	8001080 <LoopCopyDataInit>

0800107a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800107c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107e:	3304      	adds	r3, #4

08001080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001084:	d3f9      	bcc.n	800107a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001086:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001088:	4c0a      	ldr	r4, [pc, #40]	; (80010b4 <LoopForever+0x16>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800108c:	e001      	b.n	8001092 <LoopFillZerobss>

0800108e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001090:	3204      	adds	r2, #4

08001092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001094:	d3fb      	bcc.n	800108e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001096:	f000 f811 	bl	80010bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800109a:	f7ff ffa7 	bl	8000fec <main>

0800109e <LoopForever>:

LoopForever:
    b LoopForever
 800109e:	e7fe      	b.n	800109e <LoopForever>
  ldr   r0, =_estack
 80010a0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80010a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a8:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 80010ac:	0800113c 	.word	0x0800113c
  ldr r2, =_sbss
 80010b0:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 80010b4:	200000f8 	.word	0x200000f8

080010b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010b8:	e7fe      	b.n	80010b8 <ADC1_2_IRQHandler>
	...

080010bc <__libc_init_array>:
 80010bc:	b570      	push	{r4, r5, r6, lr}
 80010be:	2500      	movs	r5, #0
 80010c0:	4e0c      	ldr	r6, [pc, #48]	; (80010f4 <__libc_init_array+0x38>)
 80010c2:	4c0d      	ldr	r4, [pc, #52]	; (80010f8 <__libc_init_array+0x3c>)
 80010c4:	1ba4      	subs	r4, r4, r6
 80010c6:	10a4      	asrs	r4, r4, #2
 80010c8:	42a5      	cmp	r5, r4
 80010ca:	d109      	bne.n	80010e0 <__libc_init_array+0x24>
 80010cc:	f000 f81a 	bl	8001104 <_init>
 80010d0:	2500      	movs	r5, #0
 80010d2:	4e0a      	ldr	r6, [pc, #40]	; (80010fc <__libc_init_array+0x40>)
 80010d4:	4c0a      	ldr	r4, [pc, #40]	; (8001100 <__libc_init_array+0x44>)
 80010d6:	1ba4      	subs	r4, r4, r6
 80010d8:	10a4      	asrs	r4, r4, #2
 80010da:	42a5      	cmp	r5, r4
 80010dc:	d105      	bne.n	80010ea <__libc_init_array+0x2e>
 80010de:	bd70      	pop	{r4, r5, r6, pc}
 80010e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80010e4:	4798      	blx	r3
 80010e6:	3501      	adds	r5, #1
 80010e8:	e7ee      	b.n	80010c8 <__libc_init_array+0xc>
 80010ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80010ee:	4798      	blx	r3
 80010f0:	3501      	adds	r5, #1
 80010f2:	e7f2      	b.n	80010da <__libc_init_array+0x1e>
 80010f4:	08001134 	.word	0x08001134
 80010f8:	08001134 	.word	0x08001134
 80010fc:	08001134 	.word	0x08001134
 8001100:	08001138 	.word	0x08001138

08001104 <_init>:
 8001104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001106:	bf00      	nop
 8001108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800110a:	bc08      	pop	{r3}
 800110c:	469e      	mov	lr, r3
 800110e:	4770      	bx	lr

08001110 <_fini>:
 8001110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001112:	bf00      	nop
 8001114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001116:	bc08      	pop	{r3}
 8001118:	469e      	mov	lr, r3
 800111a:	4770      	bx	lr
