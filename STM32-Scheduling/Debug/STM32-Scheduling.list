
STM32-Scheduling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c40  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d70  08000d70  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d70  08000d70  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000d70  08000d70  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d70  08000d70  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d70  08000d70  00010d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d74  08000d74  00010d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000d78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000004  08000d7c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  08000d7c  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005f08  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000d9a  00000000  00000000  00025f35  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000013f8  00000000  00000000  00026ccf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002c8  00000000  00000000  000280c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000260  00000000  00000000  00028390  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000010c3  00000000  00000000  000285f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002e42  00000000  00000000  000296b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000cad3  00000000  00000000  0002c4f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00038fc8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000009e0  00000000  00000000  00039044  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000d58 	.word	0x08000d58

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000d58 	.word	0x08000d58

08000170 <Enable_NVIC>:
 * 							Generic Functions
 * =======================================================================================
 */

void Enable_NVIC (uint16_t IRQ)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	switch (IRQ)
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	2b0f      	cmp	r3, #15
 800017e:	d854      	bhi.n	800022a <Enable_NVIC+0xba>
 8000180:	a201      	add	r2, pc, #4	; (adr r2, 8000188 <Enable_NVIC+0x18>)
 8000182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000186:	bf00      	nop
 8000188:	080001c9 	.word	0x080001c9
 800018c:	080001d7 	.word	0x080001d7
 8000190:	080001e5 	.word	0x080001e5
 8000194:	080001f3 	.word	0x080001f3
 8000198:	08000201 	.word	0x08000201
 800019c:	0800020f 	.word	0x0800020f
 80001a0:	0800020f 	.word	0x0800020f
 80001a4:	0800020f 	.word	0x0800020f
 80001a8:	0800020f 	.word	0x0800020f
 80001ac:	0800020f 	.word	0x0800020f
 80001b0:	0800021d 	.word	0x0800021d
 80001b4:	0800021d 	.word	0x0800021d
 80001b8:	0800021d 	.word	0x0800021d
 80001bc:	0800021d 	.word	0x0800021d
 80001c0:	0800021d 	.word	0x0800021d
 80001c4:	0800021d 	.word	0x0800021d
	{
	case 0:
		NVIC_IRQ6_EXTI0_Enable ;
 80001c8:	4b1a      	ldr	r3, [pc, #104]	; (8000234 <Enable_NVIC+0xc4>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a19      	ldr	r2, [pc, #100]	; (8000234 <Enable_NVIC+0xc4>)
 80001ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001d2:	6013      	str	r3, [r2, #0]
		break;
 80001d4:	e029      	b.n	800022a <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable ;
 80001d6:	4b17      	ldr	r3, [pc, #92]	; (8000234 <Enable_NVIC+0xc4>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a16      	ldr	r2, [pc, #88]	; (8000234 <Enable_NVIC+0xc4>)
 80001dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80001e0:	6013      	str	r3, [r2, #0]
		break ;
 80001e2:	e022      	b.n	800022a <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable ;
 80001e4:	4b13      	ldr	r3, [pc, #76]	; (8000234 <Enable_NVIC+0xc4>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a12      	ldr	r2, [pc, #72]	; (8000234 <Enable_NVIC+0xc4>)
 80001ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001ee:	6013      	str	r3, [r2, #0]
		break ;
 80001f0:	e01b      	b.n	800022a <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable ;
 80001f2:	4b10      	ldr	r3, [pc, #64]	; (8000234 <Enable_NVIC+0xc4>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a0f      	ldr	r2, [pc, #60]	; (8000234 <Enable_NVIC+0xc4>)
 80001f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001fc:	6013      	str	r3, [r2, #0]
		break ;
 80001fe:	e014      	b.n	800022a <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable ;
 8000200:	4b0c      	ldr	r3, [pc, #48]	; (8000234 <Enable_NVIC+0xc4>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a0b      	ldr	r2, [pc, #44]	; (8000234 <Enable_NVIC+0xc4>)
 8000206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800020a:	6013      	str	r3, [r2, #0]
		break ;
 800020c:	e00d      	b.n	800022a <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable;
 800020e:	4b09      	ldr	r3, [pc, #36]	; (8000234 <Enable_NVIC+0xc4>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a08      	ldr	r2, [pc, #32]	; (8000234 <Enable_NVIC+0xc4>)
 8000214:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000218:	6013      	str	r3, [r2, #0]
		break ;
 800021a:	e006      	b.n	800022a <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable;
 800021c:	4b06      	ldr	r3, [pc, #24]	; (8000238 <Enable_NVIC+0xc8>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a05      	ldr	r2, [pc, #20]	; (8000238 <Enable_NVIC+0xc8>)
 8000222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000226:	6013      	str	r3, [r2, #0]
		break ;
 8000228:	bf00      	nop

	}
}
 800022a:	bf00      	nop
 800022c:	370c      	adds	r7, #12
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr
 8000234:	e000e100 	.word	0xe000e100
 8000238:	e000e104 	.word	0xe000e104

0800023c <Disable_NVIC>:

void Disable_NVIC (uint16_t IRQ)
{
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	80fb      	strh	r3, [r7, #6]
	switch (IRQ)
 8000246:	88fb      	ldrh	r3, [r7, #6]
 8000248:	2b0f      	cmp	r3, #15
 800024a:	d854      	bhi.n	80002f6 <Disable_NVIC+0xba>
 800024c:	a201      	add	r2, pc, #4	; (adr r2, 8000254 <Disable_NVIC+0x18>)
 800024e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000252:	bf00      	nop
 8000254:	08000295 	.word	0x08000295
 8000258:	080002a3 	.word	0x080002a3
 800025c:	080002b1 	.word	0x080002b1
 8000260:	080002bf 	.word	0x080002bf
 8000264:	080002cd 	.word	0x080002cd
 8000268:	080002db 	.word	0x080002db
 800026c:	080002db 	.word	0x080002db
 8000270:	080002db 	.word	0x080002db
 8000274:	080002db 	.word	0x080002db
 8000278:	080002db 	.word	0x080002db
 800027c:	080002e9 	.word	0x080002e9
 8000280:	080002e9 	.word	0x080002e9
 8000284:	080002e9 	.word	0x080002e9
 8000288:	080002e9 	.word	0x080002e9
 800028c:	080002e9 	.word	0x080002e9
 8000290:	080002e9 	.word	0x080002e9
		{
		case 0:
			NVIC_IRQ6_EXTI0_Disable ;
 8000294:	4b1a      	ldr	r3, [pc, #104]	; (8000300 <Disable_NVIC+0xc4>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a19      	ldr	r2, [pc, #100]	; (8000300 <Disable_NVIC+0xc4>)
 800029a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800029e:	6013      	str	r3, [r2, #0]
			break;
 80002a0:	e029      	b.n	80002f6 <Disable_NVIC+0xba>
		case 1:
			NVIC_IRQ7_EXTI1_Disable ;
 80002a2:	4b17      	ldr	r3, [pc, #92]	; (8000300 <Disable_NVIC+0xc4>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4a16      	ldr	r2, [pc, #88]	; (8000300 <Disable_NVIC+0xc4>)
 80002a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ac:	6013      	str	r3, [r2, #0]
			break ;
 80002ae:	e022      	b.n	80002f6 <Disable_NVIC+0xba>
		case 2:
			NVIC_IRQ8_EXTI2_Disable ;
 80002b0:	4b13      	ldr	r3, [pc, #76]	; (8000300 <Disable_NVIC+0xc4>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a12      	ldr	r2, [pc, #72]	; (8000300 <Disable_NVIC+0xc4>)
 80002b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ba:	6013      	str	r3, [r2, #0]
			break ;
 80002bc:	e01b      	b.n	80002f6 <Disable_NVIC+0xba>
		case 3:
			NVIC_IRQ9_EXTI3_Disable ;
 80002be:	4b10      	ldr	r3, [pc, #64]	; (8000300 <Disable_NVIC+0xc4>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a0f      	ldr	r2, [pc, #60]	; (8000300 <Disable_NVIC+0xc4>)
 80002c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002c8:	6013      	str	r3, [r2, #0]
			break ;
 80002ca:	e014      	b.n	80002f6 <Disable_NVIC+0xba>
		case 4:
			NVIC_IRQ10_EXTI4_Disable ;
 80002cc:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <Disable_NVIC+0xc4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a0b      	ldr	r2, [pc, #44]	; (8000300 <Disable_NVIC+0xc4>)
 80002d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002d6:	6013      	str	r3, [r2, #0]
			break ;
 80002d8:	e00d      	b.n	80002f6 <Disable_NVIC+0xba>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
			NVIC_IRQ23_EXTI5_9_Disable;
 80002da:	4b09      	ldr	r3, [pc, #36]	; (8000300 <Disable_NVIC+0xc4>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a08      	ldr	r2, [pc, #32]	; (8000300 <Disable_NVIC+0xc4>)
 80002e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002e4:	6013      	str	r3, [r2, #0]
			break ;
 80002e6:	e006      	b.n	80002f6 <Disable_NVIC+0xba>
		case 11:
		case 12:
		case 13:
		case 14:
		case 15:
			NVIC_IRQ40_EXTI10_15_Disable;
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <Disable_NVIC+0xc8>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a05      	ldr	r2, [pc, #20]	; (8000304 <Disable_NVIC+0xc8>)
 80002ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002f2:	6013      	str	r3, [r2, #0]
			break ;
 80002f4:	bf00      	nop

		}

}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr
 8000300:	e000e180 	.word	0xe000e180
 8000304:	e000e184 	.word	0xe000e184

08000308 <Update_EXTI>:




void Update_EXTI (EXTI_PinConfig_t* EXTI_Config)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b086      	sub	sp, #24
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
	//1- Configure GPIO to be AF Input -> Floating INPUT

	GPIO_PinConfig_t PinCfg ;
	//Update the GPIO Pin To Be Floating Input
	PinCfg.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_PIN;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	891b      	ldrh	r3, [r3, #8]
 8000314:	b2db      	uxtb	r3, r3
 8000316:	743b      	strb	r3, [r7, #16]
	PinCfg.GPIO_MODE = GPIO_ALT_INPUT_MODE ;
 8000318:	2308      	movs	r3, #8
 800031a:	747b      	strb	r3, [r7, #17]
	PinCfg.GPIO_Port = EXTI_Config->EXTI_PIN.GPIO_Port;
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	685b      	ldr	r3, [r3, #4]
 8000320:	60fb      	str	r3, [r7, #12]
	gpio_pin_intialize(&PinCfg);
 8000322:	f107 030c 	add.w	r3, r7, #12
 8000326:	4618      	mov	r0, r3
 8000328:	f000 fa0c 	bl	8000744 <gpio_pin_intialize>
	//==============================================

	//2- UPDATE AFIO to Route between EXTI Line with PORT A,B,C,D

	uint8_t  AFIO_EXTICR_index = EXTI_Config->EXTI_PIN.ETI_InputLineNumber / 4 ;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	881b      	ldrh	r3, [r3, #0]
 8000330:	089b      	lsrs	r3, r3, #2
 8000332:	b29b      	uxth	r3, r3
 8000334:	75fb      	strb	r3, [r7, #23]

	uint8_t	AFIO_EXTICR_Postion = (EXTI_Config->EXTI_PIN.ETI_InputLineNumber % 4) * 4 ;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	881b      	ldrh	r3, [r3, #0]
 800033a:	b2db      	uxtb	r3, r3
 800033c:	f003 0303 	and.w	r3, r3, #3
 8000340:	b2db      	uxtb	r3, r3
 8000342:	009b      	lsls	r3, r3, #2
 8000344:	75bb      	strb	r3, [r7, #22]

	//clear the four bit
	AFIO->EXTICR[AFIO_EXTICR_index ] &= ~(0xF <<AFIO_EXTICR_Postion );
 8000346:	4a60      	ldr	r2, [pc, #384]	; (80004c8 <Update_EXTI+0x1c0>)
 8000348:	7dfb      	ldrb	r3, [r7, #23]
 800034a:	3302      	adds	r3, #2
 800034c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000350:	7dbb      	ldrb	r3, [r7, #22]
 8000352:	210f      	movs	r1, #15
 8000354:	fa01 f303 	lsl.w	r3, r1, r3
 8000358:	43db      	mvns	r3, r3
 800035a:	4618      	mov	r0, r3
 800035c:	495a      	ldr	r1, [pc, #360]	; (80004c8 <Update_EXTI+0x1c0>)
 800035e:	7dfb      	ldrb	r3, [r7, #23]
 8000360:	4002      	ands	r2, r0
 8000362:	3302      	adds	r3, #2
 8000364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	AFIO->EXTICR[AFIO_EXTICR_index ] |= ((AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_Port) &0xF) << AFIO_EXTICR_Postion);
 8000368:	4a57      	ldr	r2, [pc, #348]	; (80004c8 <Update_EXTI+0x1c0>)
 800036a:	7dfb      	ldrb	r3, [r7, #23]
 800036c:	3302      	adds	r3, #2
 800036e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	685b      	ldr	r3, [r3, #4]
 8000376:	4955      	ldr	r1, [pc, #340]	; (80004cc <Update_EXTI+0x1c4>)
 8000378:	428b      	cmp	r3, r1
 800037a:	d016      	beq.n	80003aa <Update_EXTI+0xa2>
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	685b      	ldr	r3, [r3, #4]
 8000380:	4953      	ldr	r1, [pc, #332]	; (80004d0 <Update_EXTI+0x1c8>)
 8000382:	428b      	cmp	r3, r1
 8000384:	d00f      	beq.n	80003a6 <Update_EXTI+0x9e>
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	685b      	ldr	r3, [r3, #4]
 800038a:	4952      	ldr	r1, [pc, #328]	; (80004d4 <Update_EXTI+0x1cc>)
 800038c:	428b      	cmp	r3, r1
 800038e:	d008      	beq.n	80003a2 <Update_EXTI+0x9a>
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	685b      	ldr	r3, [r3, #4]
 8000394:	4950      	ldr	r1, [pc, #320]	; (80004d8 <Update_EXTI+0x1d0>)
 8000396:	428b      	cmp	r3, r1
 8000398:	d101      	bne.n	800039e <Update_EXTI+0x96>
 800039a:	2303      	movs	r3, #3
 800039c:	e006      	b.n	80003ac <Update_EXTI+0xa4>
 800039e:	2300      	movs	r3, #0
 80003a0:	e004      	b.n	80003ac <Update_EXTI+0xa4>
 80003a2:	2302      	movs	r3, #2
 80003a4:	e002      	b.n	80003ac <Update_EXTI+0xa4>
 80003a6:	2301      	movs	r3, #1
 80003a8:	e000      	b.n	80003ac <Update_EXTI+0xa4>
 80003aa:	2300      	movs	r3, #0
 80003ac:	7db9      	ldrb	r1, [r7, #22]
 80003ae:	408b      	lsls	r3, r1
 80003b0:	4618      	mov	r0, r3
 80003b2:	4945      	ldr	r1, [pc, #276]	; (80004c8 <Update_EXTI+0x1c0>)
 80003b4:	7dfb      	ldrb	r3, [r7, #23]
 80003b6:	4302      	orrs	r2, r0
 80003b8:	3302      	adds	r3, #2
 80003ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//==============================================

	//3- Update Rising or falling Register
	EXTI->RTSR &= ~(1<< EXTI_Config->EXTI_PIN.ETI_InputLineNumber);
 80003be:	4b47      	ldr	r3, [pc, #284]	; (80004dc <Update_EXTI+0x1d4>)
 80003c0:	689b      	ldr	r3, [r3, #8]
 80003c2:	687a      	ldr	r2, [r7, #4]
 80003c4:	8812      	ldrh	r2, [r2, #0]
 80003c6:	4611      	mov	r1, r2
 80003c8:	2201      	movs	r2, #1
 80003ca:	408a      	lsls	r2, r1
 80003cc:	43d2      	mvns	r2, r2
 80003ce:	4611      	mov	r1, r2
 80003d0:	4a42      	ldr	r2, [pc, #264]	; (80004dc <Update_EXTI+0x1d4>)
 80003d2:	400b      	ands	r3, r1
 80003d4:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1<< EXTI_Config->EXTI_PIN.ETI_InputLineNumber);
 80003d6:	4b41      	ldr	r3, [pc, #260]	; (80004dc <Update_EXTI+0x1d4>)
 80003d8:	68db      	ldr	r3, [r3, #12]
 80003da:	687a      	ldr	r2, [r7, #4]
 80003dc:	8812      	ldrh	r2, [r2, #0]
 80003de:	4611      	mov	r1, r2
 80003e0:	2201      	movs	r2, #1
 80003e2:	408a      	lsls	r2, r1
 80003e4:	43d2      	mvns	r2, r2
 80003e6:	4611      	mov	r1, r2
 80003e8:	4a3c      	ldr	r2, [pc, #240]	; (80004dc <Update_EXTI+0x1d4>)
 80003ea:	400b      	ands	r3, r1
 80003ec:	60d3      	str	r3, [r2, #12]

	if (EXTI_Config->Trigger_Case == EXTI_Trigger_RISING)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	7b1b      	ldrb	r3, [r3, #12]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d10b      	bne.n	800040e <Update_EXTI+0x106>
	{
		EXTI->RTSR |=  (1<< EXTI_Config->EXTI_PIN.ETI_InputLineNumber);
 80003f6:	4b39      	ldr	r3, [pc, #228]	; (80004dc <Update_EXTI+0x1d4>)
 80003f8:	689b      	ldr	r3, [r3, #8]
 80003fa:	687a      	ldr	r2, [r7, #4]
 80003fc:	8812      	ldrh	r2, [r2, #0]
 80003fe:	4611      	mov	r1, r2
 8000400:	2201      	movs	r2, #1
 8000402:	408a      	lsls	r2, r1
 8000404:	4611      	mov	r1, r2
 8000406:	4a35      	ldr	r2, [pc, #212]	; (80004dc <Update_EXTI+0x1d4>)
 8000408:	430b      	orrs	r3, r1
 800040a:	6093      	str	r3, [r2, #8]
 800040c:	e029      	b.n	8000462 <Update_EXTI+0x15a>

	}else if  (EXTI_Config->Trigger_Case == EXTI_Trigger_FALLING)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	7b1b      	ldrb	r3, [r3, #12]
 8000412:	2b01      	cmp	r3, #1
 8000414:	d10b      	bne.n	800042e <Update_EXTI+0x126>
	{
		EXTI->FTSR |= (1<< EXTI_Config->EXTI_PIN.ETI_InputLineNumber);
 8000416:	4b31      	ldr	r3, [pc, #196]	; (80004dc <Update_EXTI+0x1d4>)
 8000418:	68db      	ldr	r3, [r3, #12]
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	8812      	ldrh	r2, [r2, #0]
 800041e:	4611      	mov	r1, r2
 8000420:	2201      	movs	r2, #1
 8000422:	408a      	lsls	r2, r1
 8000424:	4611      	mov	r1, r2
 8000426:	4a2d      	ldr	r2, [pc, #180]	; (80004dc <Update_EXTI+0x1d4>)
 8000428:	430b      	orrs	r3, r1
 800042a:	60d3      	str	r3, [r2, #12]
 800042c:	e019      	b.n	8000462 <Update_EXTI+0x15a>


	}else if  (EXTI_Config->Trigger_Case == EXTI_Trigger_RisingAndFalling)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	7b1b      	ldrb	r3, [r3, #12]
 8000432:	2b02      	cmp	r3, #2
 8000434:	d115      	bne.n	8000462 <Update_EXTI+0x15a>
	{
		EXTI->RTSR |=  (1<< EXTI_Config->EXTI_PIN.ETI_InputLineNumber);
 8000436:	4b29      	ldr	r3, [pc, #164]	; (80004dc <Update_EXTI+0x1d4>)
 8000438:	689b      	ldr	r3, [r3, #8]
 800043a:	687a      	ldr	r2, [r7, #4]
 800043c:	8812      	ldrh	r2, [r2, #0]
 800043e:	4611      	mov	r1, r2
 8000440:	2201      	movs	r2, #1
 8000442:	408a      	lsls	r2, r1
 8000444:	4611      	mov	r1, r2
 8000446:	4a25      	ldr	r2, [pc, #148]	; (80004dc <Update_EXTI+0x1d4>)
 8000448:	430b      	orrs	r3, r1
 800044a:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1<< EXTI_Config->EXTI_PIN.ETI_InputLineNumber);
 800044c:	4b23      	ldr	r3, [pc, #140]	; (80004dc <Update_EXTI+0x1d4>)
 800044e:	68db      	ldr	r3, [r3, #12]
 8000450:	687a      	ldr	r2, [r7, #4]
 8000452:	8812      	ldrh	r2, [r2, #0]
 8000454:	4611      	mov	r1, r2
 8000456:	2201      	movs	r2, #1
 8000458:	408a      	lsls	r2, r1
 800045a:	4611      	mov	r1, r2
 800045c:	4a1f      	ldr	r2, [pc, #124]	; (80004dc <Update_EXTI+0x1d4>)
 800045e:	430b      	orrs	r3, r1
 8000460:	60d3      	str	r3, [r2, #12]
	}

	//==============================================
	//4- Update IRQ Handling CALLBACK

	GP_IRQ_CallBack[EXTI_Config->EXTI_PIN.ETI_InputLineNumber] = EXTI_Config->P_IRQ_CallBack ;
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	881b      	ldrh	r3, [r3, #0]
 8000466:	4619      	mov	r1, r3
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	691b      	ldr	r3, [r3, #16]
 800046c:	4a1c      	ldr	r2, [pc, #112]	; (80004e0 <Update_EXTI+0x1d8>)
 800046e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	//==============================================
	//5- Enable/Disable IRQ EXTI & NVIC

	if (EXTI_Config->IRQ_EN == EXTI_IRQ_Enable )
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	7b5b      	ldrb	r3, [r3, #13]
 8000476:	2b01      	cmp	r3, #1
 8000478:	d110      	bne.n	800049c <Update_EXTI+0x194>
	{
		EXTI->IMR |= (1<< EXTI_Config->EXTI_PIN.ETI_InputLineNumber );
 800047a:	4b18      	ldr	r3, [pc, #96]	; (80004dc <Update_EXTI+0x1d4>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	687a      	ldr	r2, [r7, #4]
 8000480:	8812      	ldrh	r2, [r2, #0]
 8000482:	4611      	mov	r1, r2
 8000484:	2201      	movs	r2, #1
 8000486:	408a      	lsls	r2, r1
 8000488:	4611      	mov	r1, r2
 800048a:	4a14      	ldr	r2, [pc, #80]	; (80004dc <Update_EXTI+0x1d4>)
 800048c:	430b      	orrs	r3, r1
 800048e:	6013      	str	r3, [r2, #0]
		Enable_NVIC (EXTI_Config->EXTI_PIN.ETI_InputLineNumber ) ;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	881b      	ldrh	r3, [r3, #0]
 8000494:	4618      	mov	r0, r3
 8000496:	f7ff fe6b 	bl	8000170 <Enable_NVIC>
	}else
	{
		EXTI->IMR &= ~(1<< EXTI_Config->EXTI_PIN.ETI_InputLineNumber );
		Disable_NVIC (EXTI_Config->EXTI_PIN.ETI_InputLineNumber) ;
	}
}
 800049a:	e010      	b.n	80004be <Update_EXTI+0x1b6>
		EXTI->IMR &= ~(1<< EXTI_Config->EXTI_PIN.ETI_InputLineNumber );
 800049c:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <Update_EXTI+0x1d4>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	687a      	ldr	r2, [r7, #4]
 80004a2:	8812      	ldrh	r2, [r2, #0]
 80004a4:	4611      	mov	r1, r2
 80004a6:	2201      	movs	r2, #1
 80004a8:	408a      	lsls	r2, r1
 80004aa:	43d2      	mvns	r2, r2
 80004ac:	4611      	mov	r1, r2
 80004ae:	4a0b      	ldr	r2, [pc, #44]	; (80004dc <Update_EXTI+0x1d4>)
 80004b0:	400b      	ands	r3, r1
 80004b2:	6013      	str	r3, [r2, #0]
		Disable_NVIC (EXTI_Config->EXTI_PIN.ETI_InputLineNumber) ;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	881b      	ldrh	r3, [r3, #0]
 80004b8:	4618      	mov	r0, r3
 80004ba:	f7ff febf 	bl	800023c <Disable_NVIC>
}
 80004be:	bf00      	nop
 80004c0:	3718      	adds	r7, #24
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	40010000 	.word	0x40010000
 80004cc:	40010800 	.word	0x40010800
 80004d0:	40010c00 	.word	0x40010c00
 80004d4:	40011000 	.word	0x40011000
 80004d8:	40011400 	.word	0x40011400
 80004dc:	40010400 	.word	0x40010400
 80004e0:	20000080 	.word	0x20000080

080004e4 <MCAL_EXTI_GPIO_Init>:
 * Note				-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				 	But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 * 				 	- Also Mandatory to Enable RCC Clock for AFIO and the corresponding GPIO
 */
void MCAL_EXTI_GPIO_Init (EXTI_PinConfig_t* EXTI_Config)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config) ;
 80004ec:	6878      	ldr	r0, [r7, #4]
 80004ee:	f7ff ff0b 	bl	8000308 <Update_EXTI>
}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
	...

080004fc <EXTI0_IRQHandler>:
///**===========			ISR  Functions        =========================
///**================================================================
// */

void EXTI0_IRQHandler (void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	//cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= 1<<0 ;
 8000500:	4b05      	ldr	r3, [pc, #20]	; (8000518 <EXTI0_IRQHandler+0x1c>)
 8000502:	695b      	ldr	r3, [r3, #20]
 8000504:	4a04      	ldr	r2, [pc, #16]	; (8000518 <EXTI0_IRQHandler+0x1c>)
 8000506:	f043 0301 	orr.w	r3, r3, #1
 800050a:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[0]() ;
 800050c:	4b03      	ldr	r3, [pc, #12]	; (800051c <EXTI0_IRQHandler+0x20>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4798      	blx	r3
}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40010400 	.word	0x40010400
 800051c:	20000080 	.word	0x20000080

08000520 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void) {
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<1) ;
 8000524:	4b05      	ldr	r3, [pc, #20]	; (800053c <EXTI1_IRQHandler+0x1c>)
 8000526:	695b      	ldr	r3, [r3, #20]
 8000528:	4a04      	ldr	r2, [pc, #16]	; (800053c <EXTI1_IRQHandler+0x1c>)
 800052a:	f043 0302 	orr.w	r3, r3, #2
 800052e:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[1]() ; }
 8000530:	4b03      	ldr	r3, [pc, #12]	; (8000540 <EXTI1_IRQHandler+0x20>)
 8000532:	685b      	ldr	r3, [r3, #4]
 8000534:	4798      	blx	r3
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40010400 	.word	0x40010400
 8000540:	20000080 	.word	0x20000080

08000544 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler (void) {
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<2) ;
 8000548:	4b05      	ldr	r3, [pc, #20]	; (8000560 <EXTI2_IRQHandler+0x1c>)
 800054a:	695b      	ldr	r3, [r3, #20]
 800054c:	4a04      	ldr	r2, [pc, #16]	; (8000560 <EXTI2_IRQHandler+0x1c>)
 800054e:	f043 0304 	orr.w	r3, r3, #4
 8000552:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[2]() ; }
 8000554:	4b03      	ldr	r3, [pc, #12]	; (8000564 <EXTI2_IRQHandler+0x20>)
 8000556:	689b      	ldr	r3, [r3, #8]
 8000558:	4798      	blx	r3
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40010400 	.word	0x40010400
 8000564:	20000080 	.word	0x20000080

08000568 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler (void) {
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<3) ;
 800056c:	4b05      	ldr	r3, [pc, #20]	; (8000584 <EXTI3_IRQHandler+0x1c>)
 800056e:	695b      	ldr	r3, [r3, #20]
 8000570:	4a04      	ldr	r2, [pc, #16]	; (8000584 <EXTI3_IRQHandler+0x1c>)
 8000572:	f043 0308 	orr.w	r3, r3, #8
 8000576:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[3]() ; }
 8000578:	4b03      	ldr	r3, [pc, #12]	; (8000588 <EXTI3_IRQHandler+0x20>)
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	4798      	blx	r3
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40010400 	.word	0x40010400
 8000588:	20000080 	.word	0x20000080

0800058c <EXTI4_IRQHandler>:


void EXTI4_IRQHandler (void) {
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<4) ;
 8000590:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <EXTI4_IRQHandler+0x1c>)
 8000592:	695b      	ldr	r3, [r3, #20]
 8000594:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <EXTI4_IRQHandler+0x1c>)
 8000596:	f043 0310 	orr.w	r3, r3, #16
 800059a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]() ; }
 800059c:	4b03      	ldr	r3, [pc, #12]	; (80005ac <EXTI4_IRQHandler+0x20>)
 800059e:	691b      	ldr	r3, [r3, #16]
 80005a0:	4798      	blx	r3
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40010400 	.word	0x40010400
 80005ac:	20000080 	.word	0x20000080

080005b0 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler (void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5 ) {	EXTI->PR |=  (1<<5)    ; GP_IRQ_CallBack[5]() ;   }
 80005b4:	4b26      	ldr	r3, [pc, #152]	; (8000650 <EXTI9_5_IRQHandler+0xa0>)
 80005b6:	695b      	ldr	r3, [r3, #20]
 80005b8:	f003 0320 	and.w	r3, r3, #32
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d008      	beq.n	80005d2 <EXTI9_5_IRQHandler+0x22>
 80005c0:	4b23      	ldr	r3, [pc, #140]	; (8000650 <EXTI9_5_IRQHandler+0xa0>)
 80005c2:	695b      	ldr	r3, [r3, #20]
 80005c4:	4a22      	ldr	r2, [pc, #136]	; (8000650 <EXTI9_5_IRQHandler+0xa0>)
 80005c6:	f043 0320 	orr.w	r3, r3, #32
 80005ca:	6153      	str	r3, [r2, #20]
 80005cc:	4b21      	ldr	r3, [pc, #132]	; (8000654 <EXTI9_5_IRQHandler+0xa4>)
 80005ce:	695b      	ldr	r3, [r3, #20]
 80005d0:	4798      	blx	r3
	if (EXTI->PR & 1<<6 ) {	EXTI->PR |=  (1<<6)    ; GP_IRQ_CallBack[6]() ;   }
 80005d2:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <EXTI9_5_IRQHandler+0xa0>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d008      	beq.n	80005f0 <EXTI9_5_IRQHandler+0x40>
 80005de:	4b1c      	ldr	r3, [pc, #112]	; (8000650 <EXTI9_5_IRQHandler+0xa0>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	4a1b      	ldr	r2, [pc, #108]	; (8000650 <EXTI9_5_IRQHandler+0xa0>)
 80005e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005e8:	6153      	str	r3, [r2, #20]
 80005ea:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <EXTI9_5_IRQHandler+0xa4>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	4798      	blx	r3
	if (EXTI->PR & 1<<7 ) {	EXTI->PR |=  (1<<7)    ; GP_IRQ_CallBack[7]() ;   }
 80005f0:	4b17      	ldr	r3, [pc, #92]	; (8000650 <EXTI9_5_IRQHandler+0xa0>)
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d008      	beq.n	800060e <EXTI9_5_IRQHandler+0x5e>
 80005fc:	4b14      	ldr	r3, [pc, #80]	; (8000650 <EXTI9_5_IRQHandler+0xa0>)
 80005fe:	695b      	ldr	r3, [r3, #20]
 8000600:	4a13      	ldr	r2, [pc, #76]	; (8000650 <EXTI9_5_IRQHandler+0xa0>)
 8000602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000606:	6153      	str	r3, [r2, #20]
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <EXTI9_5_IRQHandler+0xa4>)
 800060a:	69db      	ldr	r3, [r3, #28]
 800060c:	4798      	blx	r3
	if (EXTI->PR & 1<<8 ) {	EXTI->PR |=  (1<<8)    ; GP_IRQ_CallBack[8]() ;   }
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <EXTI9_5_IRQHandler+0xa0>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000616:	2b00      	cmp	r3, #0
 8000618:	d008      	beq.n	800062c <EXTI9_5_IRQHandler+0x7c>
 800061a:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <EXTI9_5_IRQHandler+0xa0>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	4a0c      	ldr	r2, [pc, #48]	; (8000650 <EXTI9_5_IRQHandler+0xa0>)
 8000620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000624:	6153      	str	r3, [r2, #20]
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <EXTI9_5_IRQHandler+0xa4>)
 8000628:	6a1b      	ldr	r3, [r3, #32]
 800062a:	4798      	blx	r3
	if (EXTI->PR & 1<<9 ) {	EXTI->PR |=  (1<<9)    ; GP_IRQ_CallBack[9]() ;   }
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <EXTI9_5_IRQHandler+0xa0>)
 800062e:	695b      	ldr	r3, [r3, #20]
 8000630:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000634:	2b00      	cmp	r3, #0
 8000636:	d008      	beq.n	800064a <EXTI9_5_IRQHandler+0x9a>
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <EXTI9_5_IRQHandler+0xa0>)
 800063a:	695b      	ldr	r3, [r3, #20]
 800063c:	4a04      	ldr	r2, [pc, #16]	; (8000650 <EXTI9_5_IRQHandler+0xa0>)
 800063e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000642:	6153      	str	r3, [r2, #20]
 8000644:	4b03      	ldr	r3, [pc, #12]	; (8000654 <EXTI9_5_IRQHandler+0xa4>)
 8000646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000648:	4798      	blx	r3

}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40010400 	.word	0x40010400
 8000654:	20000080 	.word	0x20000080

08000658 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<10 ) {	EXTI->PR |=  (1<<10)    ; GP_IRQ_CallBack[10]() ;   }
 800065c:	4b2d      	ldr	r3, [pc, #180]	; (8000714 <EXTI15_10_IRQHandler+0xbc>)
 800065e:	695b      	ldr	r3, [r3, #20]
 8000660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000664:	2b00      	cmp	r3, #0
 8000666:	d008      	beq.n	800067a <EXTI15_10_IRQHandler+0x22>
 8000668:	4b2a      	ldr	r3, [pc, #168]	; (8000714 <EXTI15_10_IRQHandler+0xbc>)
 800066a:	695b      	ldr	r3, [r3, #20]
 800066c:	4a29      	ldr	r2, [pc, #164]	; (8000714 <EXTI15_10_IRQHandler+0xbc>)
 800066e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000672:	6153      	str	r3, [r2, #20]
 8000674:	4b28      	ldr	r3, [pc, #160]	; (8000718 <EXTI15_10_IRQHandler+0xc0>)
 8000676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000678:	4798      	blx	r3
	if (EXTI->PR & 1<<11 ) {	EXTI->PR |=  (1<<11)    ; GP_IRQ_CallBack[11]() ;   }
 800067a:	4b26      	ldr	r3, [pc, #152]	; (8000714 <EXTI15_10_IRQHandler+0xbc>)
 800067c:	695b      	ldr	r3, [r3, #20]
 800067e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000682:	2b00      	cmp	r3, #0
 8000684:	d008      	beq.n	8000698 <EXTI15_10_IRQHandler+0x40>
 8000686:	4b23      	ldr	r3, [pc, #140]	; (8000714 <EXTI15_10_IRQHandler+0xbc>)
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	4a22      	ldr	r2, [pc, #136]	; (8000714 <EXTI15_10_IRQHandler+0xbc>)
 800068c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000690:	6153      	str	r3, [r2, #20]
 8000692:	4b21      	ldr	r3, [pc, #132]	; (8000718 <EXTI15_10_IRQHandler+0xc0>)
 8000694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000696:	4798      	blx	r3
	if (EXTI->PR & 1<<12 ) {	EXTI->PR |=  (1<<12)    ; GP_IRQ_CallBack[12]() ;   }
 8000698:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <EXTI15_10_IRQHandler+0xbc>)
 800069a:	695b      	ldr	r3, [r3, #20]
 800069c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d008      	beq.n	80006b6 <EXTI15_10_IRQHandler+0x5e>
 80006a4:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <EXTI15_10_IRQHandler+0xbc>)
 80006a6:	695b      	ldr	r3, [r3, #20]
 80006a8:	4a1a      	ldr	r2, [pc, #104]	; (8000714 <EXTI15_10_IRQHandler+0xbc>)
 80006aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006ae:	6153      	str	r3, [r2, #20]
 80006b0:	4b19      	ldr	r3, [pc, #100]	; (8000718 <EXTI15_10_IRQHandler+0xc0>)
 80006b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b4:	4798      	blx	r3
	if (EXTI->PR & 1<<13 ) {	EXTI->PR |=  (1<<13)    ; GP_IRQ_CallBack[13]() ;   }
 80006b6:	4b17      	ldr	r3, [pc, #92]	; (8000714 <EXTI15_10_IRQHandler+0xbc>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d008      	beq.n	80006d4 <EXTI15_10_IRQHandler+0x7c>
 80006c2:	4b14      	ldr	r3, [pc, #80]	; (8000714 <EXTI15_10_IRQHandler+0xbc>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	4a13      	ldr	r2, [pc, #76]	; (8000714 <EXTI15_10_IRQHandler+0xbc>)
 80006c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006cc:	6153      	str	r3, [r2, #20]
 80006ce:	4b12      	ldr	r3, [pc, #72]	; (8000718 <EXTI15_10_IRQHandler+0xc0>)
 80006d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006d2:	4798      	blx	r3
	if (EXTI->PR & 1<<14 ) {	EXTI->PR |=  (1<<14)    ; GP_IRQ_CallBack[14]() ;   }
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <EXTI15_10_IRQHandler+0xbc>)
 80006d6:	695b      	ldr	r3, [r3, #20]
 80006d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d008      	beq.n	80006f2 <EXTI15_10_IRQHandler+0x9a>
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <EXTI15_10_IRQHandler+0xbc>)
 80006e2:	695b      	ldr	r3, [r3, #20]
 80006e4:	4a0b      	ldr	r2, [pc, #44]	; (8000714 <EXTI15_10_IRQHandler+0xbc>)
 80006e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ea:	6153      	str	r3, [r2, #20]
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <EXTI15_10_IRQHandler+0xc0>)
 80006ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006f0:	4798      	blx	r3
	if (EXTI->PR & 1<<15 ) {	EXTI->PR |=  (1<<15)    ; GP_IRQ_CallBack[15]() ;   }
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <EXTI15_10_IRQHandler+0xbc>)
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d008      	beq.n	8000710 <EXTI15_10_IRQHandler+0xb8>
 80006fe:	4b05      	ldr	r3, [pc, #20]	; (8000714 <EXTI15_10_IRQHandler+0xbc>)
 8000700:	695b      	ldr	r3, [r3, #20]
 8000702:	4a04      	ldr	r2, [pc, #16]	; (8000714 <EXTI15_10_IRQHandler+0xbc>)
 8000704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000708:	6153      	str	r3, [r2, #20]
 800070a:	4b03      	ldr	r3, [pc, #12]	; (8000718 <EXTI15_10_IRQHandler+0xc0>)
 800070c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800070e:	4798      	blx	r3

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40010400 	.word	0x40010400
 8000718:	20000080 	.word	0x20000080

0800071c <Get_CRL_Position>:
 * =======================================================================================
 * 							Generic Functions
 * =======================================================================================
 */
uint8_t Get_CRL_Position(GPIO_Pin_Num PinNumber)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
	if (PinNumber > 7) PinNumber -=8 ;
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	2b07      	cmp	r3, #7
 800072a:	d902      	bls.n	8000732 <Get_CRL_Position+0x16>
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	3b08      	subs	r3, #8
 8000730:	71fb      	strb	r3, [r7, #7]

	return (PinNumber * 4);
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	b2db      	uxtb	r3, r3

}
 8000738:	4618      	mov	r0, r3
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr
	...

08000744 <gpio_pin_intialize>:
 * @retval 			-none
 * Note				-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 					 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void gpio_pin_intialize(GPIO_PinConfig_t* PinConfig)
{
 8000744:	b590      	push	{r4, r7, lr}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]


	volatile uint32_t* configregister = NULL ;
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
	volatile uint32_t conf =0;
 8000750:	2300      	movs	r3, #0
 8000752:	60bb      	str	r3, [r7, #8]

	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &(PinConfig->GPIO_Port->CRL)  : &(PinConfig->GPIO_Port->CRH);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	791b      	ldrb	r3, [r3, #4]
 8000758:	2b07      	cmp	r3, #7
 800075a:	d802      	bhi.n	8000762 <gpio_pin_intialize+0x1e>
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	e002      	b.n	8000768 <gpio_pin_intialize+0x24>
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	3304      	adds	r3, #4
 8000768:	60fb      	str	r3, [r7, #12]

	//CNF0[1:0] MODE0[1:0=]   Clear the four Bits
	(*configregister) &= ~(0xf << Get_CRL_Position(PinConfig->GPIO_PinNumber) );
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	791b      	ldrb	r3, [r3, #4]
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff ffd4 	bl	800071c <Get_CRL_Position>
 8000774:	4603      	mov	r3, r0
 8000776:	461a      	mov	r2, r3
 8000778:	230f      	movs	r3, #15
 800077a:	4093      	lsls	r3, r2
 800077c:	43da      	mvns	r2, r3
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	401a      	ands	r2, r3
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	601a      	str	r2, [r3, #0]

	switch (PinConfig->GPIO_MODE) {
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	795b      	ldrb	r3, [r3, #5]
 800078c:	2b08      	cmp	r3, #8
 800078e:	d85a      	bhi.n	8000846 <gpio_pin_intialize+0x102>
 8000790:	a201      	add	r2, pc, #4	; (adr r2, 8000798 <gpio_pin_intialize+0x54>)
 8000792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000796:	bf00      	nop
 8000798:	080007bd 	.word	0x080007bd
 800079c:	080007c3 	.word	0x080007c3
 80007a0:	080007c9 	.word	0x080007c9
 80007a4:	080007e3 	.word	0x080007e3
 80007a8:	080007ff 	.word	0x080007ff
 80007ac:	0800080b 	.word	0x0800080b
 80007b0:	0800081d 	.word	0x0800081d
 80007b4:	0800082f 	.word	0x0800082f
 80007b8:	08000841 	.word	0x08000841
	case GPIO_ANALOG_MODE:
		conf = 0b0000 &0x0F;
 80007bc:	2300      	movs	r3, #0
 80007be:	60bb      	str	r3, [r7, #8]
		break;
 80007c0:	e042      	b.n	8000848 <gpio_pin_intialize+0x104>
	case GPIO_FLOATING_INPUT_MODE:
		conf = 0b0100 &0x0F;
 80007c2:	2304      	movs	r3, #4
 80007c4:	60bb      	str	r3, [r7, #8]
		break;
 80007c6:	e03f      	b.n	8000848 <gpio_pin_intialize+0x104>
	case GPIO_INPUT_PULLUP_MODE:
		conf = 0b1000 &0x0F;
 80007c8:	2308      	movs	r3, #8
 80007ca:	60bb      	str	r3, [r7, #8]
		PinConfig->GPIO_Port->ODR |=PinConfig->GPIO_PinNumber ;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	68da      	ldr	r2, [r3, #12]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	791b      	ldrb	r3, [r3, #4]
 80007d6:	4619      	mov	r1, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	430a      	orrs	r2, r1
 80007de:	60da      	str	r2, [r3, #12]
		break;
 80007e0:	e032      	b.n	8000848 <gpio_pin_intialize+0x104>
	case GPIO_INPUT_PULLDOWN_MODE:
		conf = 0b1000 &0x0F;
 80007e2:	2308      	movs	r3, #8
 80007e4:	60bb      	str	r3, [r7, #8]
		PinConfig->GPIO_Port->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	68da      	ldr	r2, [r3, #12]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	791b      	ldrb	r3, [r3, #4]
 80007f0:	43db      	mvns	r3, r3
 80007f2:	4619      	mov	r1, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	400a      	ands	r2, r1
 80007fa:	60da      	str	r2, [r3, #12]
		break;
 80007fc:	e024      	b.n	8000848 <gpio_pin_intialize+0x104>
	case GPIO_OUTPUT_PUSHPULL_MODE:
		conf = (((0b00<<2)| (PinConfig->GPIO_Output_Speed ))&0x0F);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	799b      	ldrb	r3, [r3, #6]
 8000802:	f003 030f 	and.w	r3, r3, #15
 8000806:	60bb      	str	r3, [r7, #8]
		break;
 8000808:	e01e      	b.n	8000848 <gpio_pin_intialize+0x104>
	case GPIO_OUTPUT_OPENDRAIN_MODE:
		conf = (((0b01<<2)| (PinConfig->GPIO_Output_Speed ))&0x0F);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	799b      	ldrb	r3, [r3, #6]
 800080e:	f043 0304 	orr.w	r3, r3, #4
 8000812:	b2db      	uxtb	r3, r3
 8000814:	f003 030f 	and.w	r3, r3, #15
 8000818:	60bb      	str	r3, [r7, #8]
		break;
 800081a:	e015      	b.n	8000848 <gpio_pin_intialize+0x104>
	case GPIO_ALT_OUTPUT_PUSHPULL_MODE:
		conf = (((0b10<<2)| (PinConfig->GPIO_Output_Speed ))&0x0F);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	799b      	ldrb	r3, [r3, #6]
 8000820:	f043 0308 	orr.w	r3, r3, #8
 8000824:	b2db      	uxtb	r3, r3
 8000826:	f003 030f 	and.w	r3, r3, #15
 800082a:	60bb      	str	r3, [r7, #8]
		break;
 800082c:	e00c      	b.n	8000848 <gpio_pin_intialize+0x104>
	case GPIO_ALT_OUTPUT_OPENDRAIN_MODE:
		conf = (((0b11<<2)| (PinConfig->GPIO_Output_Speed ))&0x0F);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	799b      	ldrb	r3, [r3, #6]
 8000832:	f043 030c 	orr.w	r3, r3, #12
 8000836:	b2db      	uxtb	r3, r3
 8000838:	f003 030f 	and.w	r3, r3, #15
 800083c:	60bb      	str	r3, [r7, #8]
		break;
 800083e:	e003      	b.n	8000848 <gpio_pin_intialize+0x104>
	case GPIO_ALT_INPUT_MODE:
		conf = (((0b01<<2) | 0x0) & 0x0f);
 8000840:	2304      	movs	r3, #4
 8000842:	60bb      	str	r3, [r7, #8]
		break;
 8000844:	e000      	b.n	8000848 <gpio_pin_intialize+0x104>
	default:
		break;
 8000846:	bf00      	nop
	}

	(*configregister) |= (  (  conf  ) << ( Get_CRL_Position( PinConfig->GPIO_PinNumber) ) ) ;
 8000848:	68bc      	ldr	r4, [r7, #8]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	791b      	ldrb	r3, [r3, #4]
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff ff64 	bl	800071c <Get_CRL_Position>
 8000854:	4603      	mov	r3, r0
 8000856:	fa04 f203 	lsl.w	r2, r4, r3
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	431a      	orrs	r2, r3
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	601a      	str	r2, [r3, #0]

}
 8000864:	bf00      	nop
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	bd90      	pop	{r4, r7, pc}

0800086c <I2C1_ER_IRQHandler>:
	return (uint8_t) I2Cx->DR;
}


void I2C1_ER_IRQHandler (void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0

}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr

08000878 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler (void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
	volatile uint32_t dummy_read = 0 ;
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
	I2C_TypeDef* I2Cx = I2C1 ;
 8000882:	4b37      	ldr	r3, [pc, #220]	; (8000960 <I2C1_EV_IRQHandler+0xe8>)
 8000884:	617b      	str	r3, [r7, #20]
	//Interrupt handling for both master and slave mode of a device
	uint32_t temp1, temp2, temp3;

	temp1   = I2Cx->CR2 & (  I2C_CR2_ITEVTEN) ;
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800088e:	613b      	str	r3, [r7, #16]
	temp2   = I2Cx->CR2 & ( I2C_CR2_ITBUFEN) ;
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000898:	60fb      	str	r3, [r7, #12]
	temp3  = I2Cx->SR1 & ( I2C_SR1_STOPF);
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	695b      	ldr	r3, [r3, #20]
 800089e:	f003 0310 	and.w	r3, r3, #16
 80008a2:	60bb      	str	r3, [r7, #8]


	// Handle For interrupt generated by STOPF event
		// Note : Stop detection flag is applicable only slave mode
		if(temp1 && temp3)
 80008a4:	693b      	ldr	r3, [r7, #16]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d00a      	beq.n	80008c0 <I2C1_EV_IRQHandler+0x48>
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d007      	beq.n	80008c0 <I2C1_EV_IRQHandler+0x48>
		{
			//STOF flag is set
			//Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )
			I2Cx->CR1 |= 0x0000;
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	601a      	str	r2, [r3, #0]
			Slave_States(I2Cx,I2C_EV_STOP);
 80008b8:	2100      	movs	r1, #0
 80008ba:	6978      	ldr	r0, [r7, #20]
 80008bc:	f000 f852 	bl	8000964 <Slave_States>


		}
		//----------------------------------------------------------
		temp3  = I2Cx->SR1 & (I2C_SR1_ADDR);
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	695b      	ldr	r3, [r3, #20]
 80008c4:	f003 0302 	and.w	r3, r3, #2
 80008c8:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by ADDR event
		//Note : When master mode : Address is sent
		//		 When Slave mode   : Address matched with own address
		if(temp1 && temp3)
 80008ca:	693b      	ldr	r3, [r7, #16]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d012      	beq.n	80008f6 <I2C1_EV_IRQHandler+0x7e>
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d00f      	beq.n	80008f6 <I2C1_EV_IRQHandler+0x7e>
		{
			// interrupt is generated because of ADDR event
			//check for device mode
			if(I2Cx->SR2 & ( I2C_SR2_MSL))
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d109      	bne.n	80008f6 <I2C1_EV_IRQHandler+0x7e>

			}else
			{
				//slave mode
				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = I2Cx->SR1;
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	607b      	str	r3, [r7, #4]
				dummy_read = I2Cx->SR2;
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	607b      	str	r3, [r7, #4]
				Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 80008ee:	2102      	movs	r1, #2
 80008f0:	6978      	ldr	r0, [r7, #20]
 80008f2:	f000 f837 	bl	8000964 <Slave_States>

			}
		}
		//----------------------------------------------------------

		temp3  = I2Cx->SR1 & ( I2C_SR1_TXE);
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008fe:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by TXE event
		if(temp1 && temp2 && temp3)
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d00f      	beq.n	8000926 <I2C1_EV_IRQHandler+0xae>
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d00c      	beq.n	8000926 <I2C1_EV_IRQHandler+0xae>
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d009      	beq.n	8000926 <I2C1_EV_IRQHandler+0xae>
		{
			//Check for device mode
			if(I2Cx->SR2 & (I2C_SR2_MSL))
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	2b00      	cmp	r3, #0
 800091c:	d103      	bne.n	8000926 <I2C1_EV_IRQHandler+0xae>
			{

			}else
			{
				//slave
				Slave_States(I2Cx,I2C_EV_DATA_REQ);
 800091e:	2103      	movs	r1, #3
 8000920:	6978      	ldr	r0, [r7, #20]
 8000922:	f000 f81f 	bl	8000964 <Slave_States>
			}
		}

		//----------------------------------------------------------

		temp3  = I2Cx->SR1 & ( I2C_SR1_RXNE);
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800092e:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by 	SB=1, cleared by reading SR1 register followed by writing DR register with Address.
		if(temp1 && temp2 && temp3)
 8000930:	693b      	ldr	r3, [r7, #16]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d00f      	beq.n	8000956 <I2C1_EV_IRQHandler+0xde>
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d00c      	beq.n	8000956 <I2C1_EV_IRQHandler+0xde>
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d009      	beq.n	8000956 <I2C1_EV_IRQHandler+0xde>
		{
			//check device mode .
			if(I2Cx->SR2 & ( I2C_SR2_MSL))
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	2b00      	cmp	r3, #0
 800094c:	d103      	bne.n	8000956 <I2C1_EV_IRQHandler+0xde>
				//The device is master

			}else
			{
				//slave
				Slave_States(I2Cx,I2C_EV_DATA_RCV);
 800094e:	2104      	movs	r1, #4
 8000950:	6978      	ldr	r0, [r7, #20]
 8000952:	f000 f807 	bl	8000964 <Slave_States>
			}
		}



}
 8000956:	bf00      	nop
 8000958:	3718      	adds	r7, #24
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40005400 	.word	0x40005400

08000964 <Slave_States>:


void Slave_States (I2C_TypeDef* I2Cx  ,Slave_State state)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	460b      	mov	r3, r1
 800096e:	70fb      	strb	r3, [r7, #3]
	uint8_t index =    I2Cx == I2C1 ? I2C1_INDEX: I2C2_INDEX ;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4a32      	ldr	r2, [pc, #200]	; (8000a3c <Slave_States+0xd8>)
 8000974:	4293      	cmp	r3, r2
 8000976:	bf14      	ite	ne
 8000978:	2301      	movne	r3, #1
 800097a:	2300      	moveq	r3, #0
 800097c:	b2db      	uxtb	r3, r3
 800097e:	73fb      	strb	r3, [r7, #15]

	switch (state)
 8000980:	78fb      	ldrb	r3, [r7, #3]
 8000982:	2b04      	cmp	r3, #4
 8000984:	d856      	bhi.n	8000a34 <Slave_States+0xd0>
 8000986:	a201      	add	r2, pc, #4	; (adr r2, 800098c <Slave_States+0x28>)
 8000988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800098c:	080009a7 	.word	0x080009a7
 8000990:	080009a1 	.word	0x080009a1
 8000994:	080009cb 	.word	0x080009cb
 8000998:	080009e3 	.word	0x080009e3
 800099c:	08000a07 	.word	0x08000a07
	{

	case I2C_ERROR_AF:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	699b      	ldr	r3, [r3, #24]
		{
			//Slave Shouldn't Send anything else

		}

		break ;
 80009a4:	e046      	b.n	8000a34 <Slave_States+0xd0>
	}

	case I2C_EV_STOP:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	f003 0304 	and.w	r3, r3, #4
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d03b      	beq.n	8000a2a <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is sent by the master
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_STOP) ;
 80009b2:	7bfa      	ldrb	r2, [r7, #15]
 80009b4:	4922      	ldr	r1, [pc, #136]	; (8000a40 <Slave_States+0xdc>)
 80009b6:	4613      	mov	r3, r2
 80009b8:	00db      	lsls	r3, r3, #3
 80009ba:	4413      	add	r3, r2
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	440b      	add	r3, r1
 80009c0:	3320      	adds	r3, #32
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2000      	movs	r0, #0
 80009c6:	4798      	blx	r3
		}

		break ;
 80009c8:	e02f      	b.n	8000a2a <Slave_States+0xc6>
	}

	case I2C_EV_ADDR_Matched:
	{
		//Notify APP that the Stop Condition is sent by the master
		Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_ADDR_Matched) ;
 80009ca:	7bfa      	ldrb	r2, [r7, #15]
 80009cc:	491c      	ldr	r1, [pc, #112]	; (8000a40 <Slave_States+0xdc>)
 80009ce:	4613      	mov	r3, r2
 80009d0:	00db      	lsls	r3, r3, #3
 80009d2:	4413      	add	r3, r2
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	440b      	add	r3, r1
 80009d8:	3320      	adds	r3, #32
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2002      	movs	r0, #2
 80009de:	4798      	blx	r3

		break ;
 80009e0:	e028      	b.n	8000a34 <Slave_States+0xd0>
	}

	case I2C_EV_DATA_REQ:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	699b      	ldr	r3, [r3, #24]
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d01f      	beq.n	8000a2e <Slave_States+0xca>
		{
			//the APP layer should send the data (MCAL_I2C_SlaveSendData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_REQ) ;
 80009ee:	7bfa      	ldrb	r2, [r7, #15]
 80009f0:	4913      	ldr	r1, [pc, #76]	; (8000a40 <Slave_States+0xdc>)
 80009f2:	4613      	mov	r3, r2
 80009f4:	00db      	lsls	r3, r3, #3
 80009f6:	4413      	add	r3, r2
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	440b      	add	r3, r1
 80009fc:	3320      	adds	r3, #32
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2003      	movs	r0, #3
 8000a02:	4798      	blx	r3
		}

		break ;
 8000a04:	e013      	b.n	8000a2e <Slave_States+0xca>
	}
	case I2C_EV_DATA_RCV:
	{
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & ( I2C_SR2_TRA)))
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	699b      	ldr	r3, [r3, #24]
 8000a0a:	f003 0304 	and.w	r3, r3, #4
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d10f      	bne.n	8000a32 <Slave_States+0xce>
		{
			//the APP layer should read the data (MCAL_I2C_SlaveReceiveData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_RCV) ;
 8000a12:	7bfa      	ldrb	r2, [r7, #15]
 8000a14:	490a      	ldr	r1, [pc, #40]	; (8000a40 <Slave_States+0xdc>)
 8000a16:	4613      	mov	r3, r2
 8000a18:	00db      	lsls	r3, r3, #3
 8000a1a:	4413      	add	r3, r2
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	440b      	add	r3, r1
 8000a20:	3320      	adds	r3, #32
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2004      	movs	r0, #4
 8000a26:	4798      	blx	r3
		}

		break ;
 8000a28:	e003      	b.n	8000a32 <Slave_States+0xce>
		break ;
 8000a2a:	bf00      	nop
 8000a2c:	e002      	b.n	8000a34 <Slave_States+0xd0>
		break ;
 8000a2e:	bf00      	nop
 8000a30:	e000      	b.n	8000a34 <Slave_States+0xd0>
		break ;
 8000a32:	bf00      	nop
	}
	}

}
 8000a34:	bf00      	nop
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40005400 	.word	0x40005400
 8000a40:	20000020 	.word	0x20000020

08000a44 <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler (void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0

}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr

08000a50 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler (void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr

08000a5c <SPI1_IRQHandler>:

/* ================= IRQ Function Definitions ===================== */
/* ================================================================ */

void SPI1_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
	SPI_INT_CALLBACK [0]();
 8000a60:	4b02      	ldr	r3, [pc, #8]	; (8000a6c <SPI1_IRQHandler+0x10>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4798      	blx	r3
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000068 	.word	0x20000068

08000a70 <SPI2_IRQHandler>:


void SPI2_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	SPI_INT_CALLBACK [1]();
 8000a74:	4b02      	ldr	r3, [pc, #8]	; (8000a80 <SPI2_IRQHandler+0x10>)
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	4798      	blx	r3
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000068 	.word	0x20000068

08000a84 <USART1_IRQHandler>:
}



void USART1_IRQHandler (void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	USART_INT_CALLBACK [0]();
 8000a88:	4b02      	ldr	r3, [pc, #8]	; (8000a94 <USART1_IRQHandler+0x10>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4798      	blx	r3
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000070 	.word	0x20000070

08000a98 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
	USART_INT_CALLBACK [1]();
 8000a9c:	4b02      	ldr	r3, [pc, #8]	; (8000aa8 <USART2_IRQHandler+0x10>)
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	4798      	blx	r3
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000070 	.word	0x20000070

08000aac <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
	USART_INT_CALLBACK [2]();
 8000ab0:	4b02      	ldr	r3, [pc, #8]	; (8000abc <USART3_IRQHandler+0x10>)
 8000ab2:	689b      	ldr	r3, [r3, #8]
 8000ab4:	4798      	blx	r3
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000070 	.word	0x20000070

08000ac0 <SVC_Handler>:
//flag
uint8_t Flag_Task_A=0;
uint8_t Flag_Task_B=0;
uint8_t Flag=0;
void SVC_Handler (void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
	CPU_Access_Level_Privileged();
 8000ac4:	f3ef 8314 	mrs	r3, CONTROL
 8000ac8:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8000acc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad0:	f383 8814 	msr	CONTROL, r3
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <EXTI_9>:

void EXTI_9 (void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
	if(Flag==0)
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <EXTI_9+0x38>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d106      	bne.n	8000af6 <EXTI_9+0x1a>
	{
		Flag_Task_A=1;
 8000ae8:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <EXTI_9+0x3c>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	701a      	strb	r2, [r3, #0]
		Flag=1;
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <EXTI_9+0x38>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	701a      	strb	r2, [r3, #0]
	else if(Flag==1)
	{
		Flag_Task_B=1;
		Flag=0;
	}
}
 8000af4:	e009      	b.n	8000b0a <EXTI_9+0x2e>
	else if(Flag==1)
 8000af6:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <EXTI_9+0x38>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d105      	bne.n	8000b0a <EXTI_9+0x2e>
		Flag_Task_B=1;
 8000afe:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <EXTI_9+0x40>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	701a      	strb	r2, [r3, #0]
		Flag=0;
 8000b04:	4b03      	ldr	r3, [pc, #12]	; (8000b14 <EXTI_9+0x38>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	701a      	strb	r2, [r3, #0]
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	2000007e 	.word	0x2000007e
 8000b18:	2000007c 	.word	0x2000007c
 8000b1c:	2000007d 	.word	0x2000007d

08000b20 <Task_A>:
uint8_t Task_A(uint8_t x,uint8_t y)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	460a      	mov	r2, r1
 8000b2a:	71fb      	strb	r3, [r7, #7]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	71bb      	strb	r3, [r7, #6]
	uint8_t sum=x+y;
 8000b30:	79fa      	ldrb	r2, [r7, #7]
 8000b32:	79bb      	ldrb	r3, [r7, #6]
 8000b34:	4413      	add	r3, r2
 8000b36:	73fb      	strb	r3, [r7, #15]
	return sum;
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr

08000b44 <Task_B>:

uint8_t Task_B(uint8_t x,uint8_t y)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	460a      	mov	r2, r1
 8000b4e:	71fb      	strb	r3, [r7, #7]
 8000b50:	4613      	mov	r3, r2
 8000b52:	71bb      	strb	r3, [r7, #6]
	uint8_t sub=x-y;
 8000b54:	79fa      	ldrb	r2, [r7, #7]
 8000b56:	79bb      	ldrb	r3, [r7, #6]
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	73fb      	strb	r3, [r7, #15]
	return sub;
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3714      	adds	r7, #20
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr

08000b68 <main_os>:

void main_os(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
	//init main stack pointer
	_E_MSP=_S_MSP-512;
 8000b6e:	4b33      	ldr	r3, [pc, #204]	; (8000c3c <main_os+0xd4>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000b76:	4a32      	ldr	r2, [pc, #200]	; (8000c40 <main_os+0xd8>)
 8000b78:	6013      	str	r3, [r2, #0]
	//init PSP Task A
	_S_PSP_TA=_E_MSP-8;
 8000b7a:	4b31      	ldr	r3, [pc, #196]	; (8000c40 <main_os+0xd8>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	3b08      	subs	r3, #8
 8000b80:	4a30      	ldr	r2, [pc, #192]	; (8000c44 <main_os+0xdc>)
 8000b82:	6013      	str	r3, [r2, #0]
	_E_PSP_TA=_S_PSP_TA-TaskA_Size;
 8000b84:	4b2f      	ldr	r3, [pc, #188]	; (8000c44 <main_os+0xdc>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	3b64      	subs	r3, #100	; 0x64
 8000b8a:	4a2f      	ldr	r2, [pc, #188]	; (8000c48 <main_os+0xe0>)
 8000b8c:	6013      	str	r3, [r2, #0]
	//init PSP Task B
	_S_PSP_TB=_E_PSP_TA-8;
 8000b8e:	4b2e      	ldr	r3, [pc, #184]	; (8000c48 <main_os+0xe0>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	3b08      	subs	r3, #8
 8000b94:	4a2d      	ldr	r2, [pc, #180]	; (8000c4c <main_os+0xe4>)
 8000b96:	6013      	str	r3, [r2, #0]
	_E_PSP_TB=_S_PSP_TB-TaskB_Size;
 8000b98:	4b2c      	ldr	r3, [pc, #176]	; (8000c4c <main_os+0xe4>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	3b64      	subs	r3, #100	; 0x64
 8000b9e:	4a2c      	ldr	r2, [pc, #176]	; (8000c50 <main_os+0xe8>)
 8000ba0:	6013      	str	r3, [r2, #0]
	while(1)
	{
		if(Flag_Task_A==1)
 8000ba2:	4b2c      	ldr	r3, [pc, #176]	; (8000c54 <main_os+0xec>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d121      	bne.n	8000bee <main_os+0x86>
		{
			uint8_t sum;
			Flag_Task_A=0;
 8000baa:	4b2a      	ldr	r3, [pc, #168]	; (8000c54 <main_os+0xec>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
			//set PSP
			OS_SET_PSP(_S_PSP_TA);
 8000bb0:	4b24      	ldr	r3, [pc, #144]	; (8000c44 <main_os+0xdc>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f380 8809 	msr	PSP, r0
			//switch to PSP
			OS_Switch_SP_PSP;
 8000bba:	f3ef 8014 	mrs	r0, CONTROL
 8000bbe:	f040 0002 	orr.w	r0, r0, #2
 8000bc2:	f380 8814 	msr	CONTROL, r0
			// switch to unprivileged mode
			CPU_Access_Level_Unprivileged();
 8000bc6:	f3ef 8314 	mrs	r3, CONTROL
 8000bca:	f040 0301 	orr.w	r3, r0, #1
 8000bce:	f383 8814 	msr	CONTROL, r3
			sum=Task_A(5, 10);
 8000bd2:	210a      	movs	r1, #10
 8000bd4:	2005      	movs	r0, #5
 8000bd6:	f7ff ffa3 	bl	8000b20 <Task_A>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71bb      	strb	r3, [r7, #6]
			//Generate Interrupt to switch to privileged mode
			OS_Generate_Interrupt;
 8000bde:	df03      	svc	3
			//set MSP
			OS_Switch_SP_MSP;
 8000be0:	f3ef 8014 	mrs	r0, CONTROL
 8000be4:	f000 0005 	and.w	r0, r0, #5
 8000be8:	f380 8814 	msr	CONTROL, r0
 8000bec:	e7d9      	b.n	8000ba2 <main_os+0x3a>
		}
		else if(Flag_Task_B==1)
 8000bee:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <main_os+0xf0>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d1d5      	bne.n	8000ba2 <main_os+0x3a>
		{
			uint8_t sub;
			Flag_Task_B=0;
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <main_os+0xf0>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	701a      	strb	r2, [r3, #0]
			//set PSP
			OS_SET_PSP(_S_PSP_TB);
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <main_os+0xe4>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f380 8809 	msr	PSP, r0
			//switch to PSP
			OS_Switch_SP_PSP;
 8000c06:	f3ef 8014 	mrs	r0, CONTROL
 8000c0a:	f040 0002 	orr.w	r0, r0, #2
 8000c0e:	f380 8814 	msr	CONTROL, r0
			// switch to unprivileged mode
			CPU_Access_Level_Unprivileged();
 8000c12:	f3ef 8314 	mrs	r3, CONTROL
 8000c16:	f040 0301 	orr.w	r3, r0, #1
 8000c1a:	f383 8814 	msr	CONTROL, r3
			sub=Task_B(50, 10);
 8000c1e:	210a      	movs	r1, #10
 8000c20:	2032      	movs	r0, #50	; 0x32
 8000c22:	f7ff ff8f 	bl	8000b44 <Task_B>
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
			//Generate Interrupt to switch to privileged mode
			OS_Generate_Interrupt;
 8000c2a:	df03      	svc	3
			//set MSP
			OS_Switch_SP_MSP;
 8000c2c:	f3ef 8014 	mrs	r0, CONTROL
 8000c30:	f000 0005 	and.w	r0, r0, #5
 8000c34:	f380 8814 	msr	CONTROL, r0
		if(Flag_Task_A==1)
 8000c38:	e7b3      	b.n	8000ba2 <main_os+0x3a>
 8000c3a:	bf00      	nop
 8000c3c:	20000000 	.word	0x20000000
 8000c40:	200000bc 	.word	0x200000bc
 8000c44:	200000c0 	.word	0x200000c0
 8000c48:	200000cc 	.word	0x200000cc
 8000c4c:	200000c4 	.word	0x200000c4
 8000c50:	200000c8 	.word	0x200000c8
 8000c54:	2000007c 	.word	0x2000007c
 8000c58:	2000007d 	.word	0x2000007d

08000c5c <main>:
		}
	}
}
int main(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 8000c62:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <main+0x54>)
 8000c64:	699b      	ldr	r3, [r3, #24]
 8000c66:	4a12      	ldr	r2, [pc, #72]	; (8000cb0 <main+0x54>)
 8000c68:	f043 0304 	orr.w	r3, r3, #4
 8000c6c:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <main+0x54>)
 8000c70:	699b      	ldr	r3, [r3, #24]
 8000c72:	4a0f      	ldr	r2, [pc, #60]	; (8000cb0 <main+0x54>)
 8000c74:	f043 0308 	orr.w	r3, r3, #8
 8000c78:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <main+0x54>)
 8000c7c:	699b      	ldr	r3, [r3, #24]
 8000c7e:	4a0c      	ldr	r2, [pc, #48]	; (8000cb0 <main+0x54>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6193      	str	r3, [r2, #24]

	EXTI_PinConfig_t INT={
 8000c86:	2309      	movs	r3, #9
 8000c88:	80bb      	strh	r3, [r7, #4]
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <main+0x58>)
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	2309      	movs	r3, #9
 8000c90:	81bb      	strh	r3, [r7, #12]
 8000c92:	2317      	movs	r3, #23
 8000c94:	73bb      	strb	r3, [r7, #14]
 8000c96:	2300      	movs	r3, #0
 8000c98:	743b      	strb	r3, [r7, #16]
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	747b      	strb	r3, [r7, #17]
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <main+0x5c>)
 8000ca0:	617b      	str	r3, [r7, #20]
			.IRQ_EN=1,
			.Trigger_Case=EXTI_Trigger_RISING,
			.P_IRQ_CallBack=EXTI_9
	};

	MCAL_EXTI_GPIO_Init(&INT);
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff fc1d 	bl	80004e4 <MCAL_EXTI_GPIO_Init>
	main_os();
 8000caa:	f7ff ff5d 	bl	8000b68 <main_os>

	/* Loop forever */
	for(;;);
 8000cae:	e7fe      	b.n	8000cae <main+0x52>
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40010c00 	.word	0x40010c00
 8000cb8:	08000add 	.word	0x08000add

08000cbc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cbc:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cbe:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000cc0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc4:	480c      	ldr	r0, [pc, #48]	; (8000cf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cc6:	490d      	ldr	r1, [pc, #52]	; (8000cfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <LoopForever+0xe>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ccc:	e002      	b.n	8000cd4 <LoopCopyDataInit>

08000cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd2:	3304      	adds	r3, #4

08000cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd8:	d3f9      	bcc.n	8000cce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cda:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cdc:	4c0a      	ldr	r4, [pc, #40]	; (8000d08 <LoopForever+0x16>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce0:	e001      	b.n	8000ce6 <LoopFillZerobss>

08000ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce4:	3204      	adds	r2, #4

08000ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce8:	d3fb      	bcc.n	8000ce2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cea:	f000 f811 	bl	8000d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cee:	f7ff ffb5 	bl	8000c5c <main>

08000cf2 <LoopForever>:

LoopForever:
    b LoopForever
 8000cf2:	e7fe      	b.n	8000cf2 <LoopForever>
  ldr   r0, =_estack
 8000cf4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cfc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000d00:	08000d78 	.word	0x08000d78
  ldr r2, =_sbss
 8000d04:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000d08:	200000d0 	.word	0x200000d0

08000d0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d0c:	e7fe      	b.n	8000d0c <ADC1_2_IRQHandler>
	...

08000d10 <__libc_init_array>:
 8000d10:	b570      	push	{r4, r5, r6, lr}
 8000d12:	2500      	movs	r5, #0
 8000d14:	4e0c      	ldr	r6, [pc, #48]	; (8000d48 <__libc_init_array+0x38>)
 8000d16:	4c0d      	ldr	r4, [pc, #52]	; (8000d4c <__libc_init_array+0x3c>)
 8000d18:	1ba4      	subs	r4, r4, r6
 8000d1a:	10a4      	asrs	r4, r4, #2
 8000d1c:	42a5      	cmp	r5, r4
 8000d1e:	d109      	bne.n	8000d34 <__libc_init_array+0x24>
 8000d20:	f000 f81a 	bl	8000d58 <_init>
 8000d24:	2500      	movs	r5, #0
 8000d26:	4e0a      	ldr	r6, [pc, #40]	; (8000d50 <__libc_init_array+0x40>)
 8000d28:	4c0a      	ldr	r4, [pc, #40]	; (8000d54 <__libc_init_array+0x44>)
 8000d2a:	1ba4      	subs	r4, r4, r6
 8000d2c:	10a4      	asrs	r4, r4, #2
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d105      	bne.n	8000d3e <__libc_init_array+0x2e>
 8000d32:	bd70      	pop	{r4, r5, r6, pc}
 8000d34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d38:	4798      	blx	r3
 8000d3a:	3501      	adds	r5, #1
 8000d3c:	e7ee      	b.n	8000d1c <__libc_init_array+0xc>
 8000d3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d42:	4798      	blx	r3
 8000d44:	3501      	adds	r5, #1
 8000d46:	e7f2      	b.n	8000d2e <__libc_init_array+0x1e>
 8000d48:	08000d70 	.word	0x08000d70
 8000d4c:	08000d70 	.word	0x08000d70
 8000d50:	08000d70 	.word	0x08000d70
 8000d54:	08000d74 	.word	0x08000d74

08000d58 <_init>:
 8000d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d5a:	bf00      	nop
 8000d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d5e:	bc08      	pop	{r3}
 8000d60:	469e      	mov	lr, r3
 8000d62:	4770      	bx	lr

08000d64 <_fini>:
 8000d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d66:	bf00      	nop
 8000d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d6a:	bc08      	pop	{r3}
 8000d6c:	469e      	mov	lr, r3
 8000d6e:	4770      	bx	lr
